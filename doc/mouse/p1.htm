<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0033)http://wiki.osdev.org/Mouse_Input -->
<HTML lang=en dir=ltr xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Mouse Input - OSDev Wiki</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="Mouse Input,PS2 Keyboard,RBIL" name=keywords><LINK 
href="/favicon.ico" rel="shortcut icon"><LINK title="OSDev Wiki (English)" 
href="/opensearch_desc.php" type=application/opensearchdescription+xml 
rel=search><LINK title="OSDev Wiki RSS Feed" 
href="http://wiki.osdev.org/index.php?title=Special:Recentchanges&amp;feed=rss" 
type=application/rss+xml rel=alternate><LINK title="OSDev Wiki Atom Feed" 
href="http://wiki.osdev.org/index.php?title=Special:Recentchanges&amp;feed=atom" 
type=application/atom+xml rel=alternate>
<STYLE type=text/css media="screen, projection">@import url( /skins/common/shared.css?116 );
@import url( /skins/monobook/main.css?116 );
</STYLE>
<LINK media=print href="p1.files/commonPrint.css" type=text/css rel=stylesheet><!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css?116";</style><![endif]--><!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css?116";</style><![endif]--><!--[if IE 6]>
<STYLE type=text/css>@import url( /skins/monobook/IE60Fixes.css?116 );
</STYLE>
<![endif]--><!--[if IE 7]><style type="text/css">@import "/skins/monobook/IE70Fixes.css?116";</style><![endif]--><!--[if lt IE 7]>
<SCRIPT src="p1.files/IEFixes.js" type=text/javascript></SCRIPT>

<META http-equiv=imagetoolbar content=no><![endif]-->
<SCRIPT type=text/javascript>/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/skins";
var wgArticlePath = "/$1";
var wgScriptPath = "";
var wgScript = "/index.php";
var wgServer = "http://wiki.osdev.org";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Mouse_Input";
var wgTitle = "Mouse Input";
var wgAction = "view";
var wgRestrictionEdit = [];
var wgRestrictionMove = [];
var wgArticleId = "1909";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "8323";
var wgVersion = "1.12.0";
var wgEnableAPI = true;
var wgEnableWriteAPI = false;
/*]]>*/</SCRIPT>

<SCRIPT src="p1.files/wikibits.js" 
type=text/javascript><!-- wikibits js --></SCRIPT>
<!-- Head Scripts -->
<SCRIPT src="p1.files/ajax.js" type=text/javascript></SCRIPT>

<SCRIPT src="p1.files/index.php" type=text/javascript><!-- site js --></SCRIPT>

<STYLE type=text/css>@import url( /index.php?title=MediaWiki:Common.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000 );
@import url( /index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000 );
@import url( /index.php?title=-&action=raw&gen=css&maxage=18000 );
</STYLE>

<META content="MSHTML 6.00.2900.6036" name=GENERATOR></HEAD>
<BODY class="mediawiki ns-0 ltr page-Mouse_Input">
<DIV id=globalWrapper>
<DIV id=column-content>
<DIV id=content><A id=top name=top></A>
<H1 class=firstHeading>Mouse Input</H1>
<DIV id=bodyContent>
<H3 id=siteSub>From OSDev Wiki</H3>
<DIV id=contentSub></DIV>
<DIV id=jump-to-nav>Jump to: <A 
href="http://wiki.osdev.org/Mouse_Input#column-one">navigation</A>, <A 
href="http://wiki.osdev.org/Mouse_Input#searchInput">search</A></DIV><!-- start content -->
<TABLE class=toc id=toc summary=Contents>
  <TBODY>
  <TR>
    <TD>
      <DIV id=toctitle>
      <H2>Contents</H2></DIV>
      <UL>
        <LI class=toclevel-1><A 
        href="http://wiki.osdev.org/Mouse_Input#PC_Mouse_Interfaces"><SPAN 
        class=tocnumber>1</SPAN> <SPAN class=toctext>PC Mouse 
        Interfaces</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#USB_Mouse"><SPAN 
          class=tocnumber>1.1</SPAN> <SPAN class=toctext>USB Mouse</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#PS2_Mouse_--_Basic_Operation_.28Microsoft_compliant.29"><SPAN 
          class=tocnumber>1.2</SPAN> <SPAN class=toctext>PS2 Mouse -- Basic 
          Operation (Microsoft compliant)</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Keyboard.2FAux_Data_Bit"><SPAN 
            class=tocnumber>1.2.1</SPAN> <SPAN class=toctext>Keyboard/Aux Data 
            Bit</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#PS2_Mouse_Subtypes"><SPAN 
            class=tocnumber>1.2.2</SPAN> <SPAN class=toctext>PS2 Mouse 
            Subtypes</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Mouse_Packet_Info"><SPAN 
            class=tocnumber>1.2.3</SPAN> <SPAN class=toctext>Mouse Packet 
            Info</SPAN></A> 
            <UL>
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Timing.2FGeneration_of_Mouse_Packets"><SPAN 
              class=tocnumber>1.2.3.1</SPAN> <SPAN 
              class=toctext>Timing/Generation of Mouse Packets</SPAN></A> 
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Format_of_First_3_Packet_Bytes"><SPAN 
              class=tocnumber>1.2.3.2</SPAN> <SPAN class=toctext>Format of First 
              3 Packet Bytes</SPAN></A> 
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Formats_of_Optional_4th_Packet_Byte"><SPAN 
              class=tocnumber>1.2.3.3</SPAN> <SPAN class=toctext>Formats of 
              Optional 4th Packet Byte</SPAN></A> </LI></UL>
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Non-Linear_Movement"><SPAN 
            class=tocnumber>1.2.4</SPAN> <SPAN class=toctext>Non-Linear 
            Movement</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Doubleclicks"><SPAN 
            class=tocnumber>1.2.5</SPAN> <SPAN 
            class=toctext>Doubleclicks</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Timeouts.2FMouse_Disconnect"><SPAN 
            class=tocnumber>1.2.6</SPAN> <SPAN class=toctext>Timeouts/Mouse 
            Disconnect</SPAN></A> </LI></UL>
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#PS2_Mouse_Commands"><SPAN 
          class=tocnumber>1.3</SPAN> <SPAN class=toctext>PS2 Mouse 
          Commands</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Waiting_to_Send_Bytes_to_Port_0x60_and_0x64"><SPAN 
            class=tocnumber>1.3.1</SPAN> <SPAN class=toctext>Waiting to Send 
            Bytes to Port 0x60 and 0x64</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#0xD4_Byte_and_Command_Byte"><SPAN 
            class=tocnumber>1.3.2</SPAN> <SPAN class=toctext>0xD4 Byte and 
            Command Byte</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Wait_for_ACK_from_Mouse"><SPAN 
            class=tocnumber>1.3.3</SPAN> <SPAN class=toctext>Wait for ACK from 
            Mouse</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Mouse_Command_Set"><SPAN 
            class=tocnumber>1.3.4</SPAN> <SPAN class=toctext>Mouse Command 
            Set</SPAN></A> 
            <UL>
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Resolution.2C_scaling_and_sampling_rate"><SPAN 
              class=tocnumber>1.3.4.1</SPAN> <SPAN class=toctext>Resolution, 
              scaling and sampling rate</SPAN></A> </LI></UL></LI></UL>
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#Initializing_a_PS2_Mouse"><SPAN 
          class=tocnumber>1.4</SPAN> <SPAN class=toctext>Initializing a PS2 
          Mouse</SPAN></A> 
          <UL>
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#PS.2F2_Device_Unplugging.2FHot_Plugging"><SPAN 
            class=tocnumber>1.4.1</SPAN> <SPAN class=toctext>PS/2 Device 
            Unplugging/Hot Plugging</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#PS2_Aux_Port_Initialization"><SPAN 
            class=tocnumber>1.4.2</SPAN> <SPAN class=toctext>PS2 Aux Port 
            Initialization</SPAN></A> 
            <UL>
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Set_Compaq_Status.2FEnable_IRQ12"><SPAN 
              class=tocnumber>1.4.2.1</SPAN> <SPAN class=toctext>Set Compaq 
              Status/Enable IRQ12</SPAN></A> 
              <LI class=toclevel-4><A 
              href="http://wiki.osdev.org/Mouse_Input#Aux_Input_Enable_Command"><SPAN 
              class=tocnumber>1.4.2.2</SPAN> <SPAN class=toctext>Aux Input 
              Enable Command</SPAN></A> </LI></UL>
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Mouse_State_at_Power-on"><SPAN 
            class=tocnumber>1.4.3</SPAN> <SPAN class=toctext>Mouse State at 
            Power-on</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#MouseID_Byte"><SPAN 
            class=tocnumber>1.4.4</SPAN> <SPAN class=toctext>MouseID 
            Byte</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Init.2FDetection_Command_Sequences"><SPAN 
            class=tocnumber>1.4.5</SPAN> <SPAN class=toctext>Init/Detection 
            Command Sequences</SPAN></A> 
            <LI class=toclevel-3><A 
            href="http://wiki.osdev.org/Mouse_Input#Enable_Packets"><SPAN 
            class=tocnumber>1.4.6</SPAN> <SPAN class=toctext>Enable 
            Packets</SPAN></A> </LI></UL>
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#PC_Serial_Mouse"><SPAN 
          class=tocnumber>1.5</SPAN> <SPAN class=toctext>PC Serial 
          Mouse</SPAN></A> </LI></UL>
        <LI class=toclevel-1><A 
        href="http://wiki.osdev.org/Mouse_Input#Mac_Mouse_Interface"><SPAN 
        class=tocnumber>2</SPAN> <SPAN class=toctext>Mac Mouse 
        Interface</SPAN></A> 
        <LI class=toclevel-1><A 
        href="http://wiki.osdev.org/Mouse_Input#See_Also"><SPAN 
        class=tocnumber>3</SPAN> <SPAN class=toctext>See Also</SPAN></A> 
        <UL>
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#Threads"><SPAN 
          class=tocnumber>3.1</SPAN> <SPAN class=toctext>Threads</SPAN></A> 
          <LI class=toclevel-2><A 
          href="http://wiki.osdev.org/Mouse_Input#External_Links"><SPAN 
          class=tocnumber>3.2</SPAN> <SPAN class=toctext>External 
          Links</SPAN></A> </LI></UL></LI></UL></TD></TR></TBODY></TABLE>
<SCRIPT type=text/javascript> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </SCRIPT>
<A name=PC_Mouse_Interfaces></A>
<H2><SPAN class=mw-headline>PC Mouse Interfaces</SPAN></H2>
<P>Current PCs generally use PS2 mice, or a similar format that emulates a PS2 
mouse. Serial mice are a much older technology that is no longer common. </P><A 
name=USB_Mouse></A>
<H3><SPAN class=mw-headline>USB Mouse</SPAN></H3>
<P>A USB mouse generally emulates a PS2 mouse, except that it generates IRQs 
from the USB bus, and not IRQ 12. </P><A 
name=PS2_Mouse_--_Basic_Operation_.28Microsoft_compliant.29></A>
<H3><SPAN class=mw-headline>PS2 Mouse -- Basic Operation (Microsoft 
compliant)</SPAN></H3>
<P>Once a mouse has been initialized (see below), a mouse sends 3 or 4 byte 
packets to communicate mouse movement, and mouse button press/release events. 
These packets show up asynchronously as data on IO port 0x60. Even though the 
data shows up on port 0x60 (the keyboard port), it does <I>not</I> trigger an 
IRQ1. The only way that you will know that mouse data has arrived is if you 
handle an appropriate IRQ (generally IRQ12), or if you occasionally poll bit 
number 0 (value=1) of port 0x64, to see if data is available on port 0x60. It is 
not necessary to handle all of the following things inside the driver, but doing 
so can make things work faster. </P><A name=Keyboard.2FAux_Data_Bit></A>
<H4><SPAN class=mw-headline>Keyboard/Aux Data Bit</SPAN></H4>
<P>Since both keyboard and mouse data is showing up to be read on port 0x60, it 
is necessary to be able to tell which is which. To tell if there is any 
available data on port 0x60 at all, it is necessary to read a byte from port 
0x64. In that byte from port 0x64, bit number 0 (value=1) indicates that a byte 
is available to be read on port 0x60. An additional bit, bit number 5 
(value=0x20), indicates that this next byte came from the mouse, if the bit is 
set. If you look at <A class=mw-redirect title=RBIL 
href="http://wiki.osdev.org/RBIL">RBIL</A>, it says that this "mouse bit" is MCA 
specific, but this is no longer true. All PCs that support PS2 mice use this bit 
to indicate that the incoming byte was generated by the auxiliary PS2 input 
port. </P><A name=PS2_Mouse_Subtypes></A>
<H4><SPAN class=mw-headline>PS2 Mouse Subtypes</SPAN></H4>
<P>There are several types of mice, but they can be separated into two groups, 
depending on whether they have a scroll wheel. Mice with scroll wheels can send 
an additional byte in each mouse packet, indicating the status of mouse wheels 
and extra buttons. </P>
<P>Mice with no scroll wheels use 3 byte packets exclusively. Mice with scroll 
wheels, and up to 5 buttons (currently) can send 4 byte packets, if they are 
initialized properly. </P><A name=Mouse_Packet_Info></A>
<H4><SPAN class=mw-headline>Mouse Packet Info</SPAN></H4>
<P>For even greater detail on Microsoft compliant PS2 mouse packets than what is 
presented next: reference the links below, or search for the Adam Chapweske 
article. For mice that are not M$-compliant, see the Linux article. </P><A 
name=Timing.2FGeneration_of_Mouse_Packets></A>
<H5><SPAN class=mw-headline>Timing/Generation of Mouse Packets</SPAN></H5>
<P>A mouse is initialized to only generate movement packets at a particular 
rate. The default rate is 100 packets per second, if the mouse is being moved. A 
mouse also generates a packet if a button is either pressed or released. If the 
mouse is not moving, and no buttons are being clicked, a mouse will not generate 
any automatic packets. </P><A name=Format_of_First_3_Packet_Bytes></A>
<H5><SPAN class=mw-headline>Format of First 3 Packet Bytes</SPAN></H5>
<P>Even if your mouse is sending 4 byte packets, the first 3 bytes always have 
the same format. The first byte has a bunch of bit flags. The second byte is the 
"delta X" value -- that is, it measures horizontal mouse movement, with left 
being negative. The third byte is "delta Y", with down (toward the user) being 
negative. Typical values for deltaX and deltaY are one or two for slow movement, 
and perhaps 20 for very fast movement. Maximum possible values are +255 to -256 
(they are 9-bit quantities, two's complement). The meaning of the packets is 
like this: <BR><BR>byte 1: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Y overflow </TH>
    <TH>X overflow </TH>
    <TH>Y sign bit </TH>
    <TH>X sign bit </TH>
    <TH>Always 1 </TH>
    <TH>Middle Btn </TH>
    <TH>Right Btn </TH>
    <TH>Left Btn </TH></TR></TBODY></TABLE>
<P><BR>byte 2: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>X movement </TH></TR></TBODY></TABLE>
<P><BR>byte 3: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Y movement </TH></TR></TBODY></TABLE>
<P>The top two bits of the first byte (values 0x80 and 0x40) supposedly show Y 
and X overflows, respectively. They are not useful. If they are set, you should 
probably just discard the entire packet. </P>
<P>Bit number 5 of the first byte (value 0x20) indicates that delta Y (the 3rd 
byte) is a negative number, if it is set. This means that you should OR 
0xFFFFFF00 onto the value of delta Y, as a sign extension (if using 32 bits). 
</P>
<P>Bit number 4 of the first byte (value 0x10) indicates that delta X (the 2nd 
byte) is a negative number, if it is set. This means that you should OR 
0xFFFFFF00 onto the value of delta X, as a sign extension (if using 32 bits). 
</P>
<P>Bit number 3 of the first byte (value 0x8) is supposed to be always set. This 
helps to maintain and verify packet alignment. Unfortunately, some older mice 
(such as 10 year old Microspeed 2 button trackballs) do not set this bit. <A 
class=mw-redirect title=RBIL href="http://wiki.osdev.org/RBIL">RBIL</A> claims 
that this bit should be 0, but it is wrong. </P>
<P>The bottom 3 bits of the first byte indicate whether the middle, right, or 
left mouse buttons are currently being held down, if the respective bit is set. 
Middle = bit 2 (value=4), right = bit 1 (value=2), left = bit 0 (value=1). 
</P><A name=Formats_of_Optional_4th_Packet_Byte></A>
<H5><SPAN class=mw-headline>Formats of Optional 4th Packet Byte</SPAN></H5>
<P>If the mouse has been initalized so that its mouseID is 3 or 4, it will send 
a 4th byte in each packet. On all current mice, the top two bits should be 
ignored. On some mice, the bits will flip between 0 and 1, based on scroll 
wheeel movement. If the mouse has a 4th and 5th mouse button, then their state 
is indicated by bit 4 (value=0x10), and bit 5 (value=0x20), respectively. Note: 
if the buttons <I>do not</I> exist, then these bits may flip based on scroll 
wheel movement! (ie. Be careful that this does not generate spurious "mouse 
button click" events for buttons that do not exist.) </P>
<P>Currently, the bottom nibble of the 4th byte might have the following values: 
</P>
<UL>
  <LI>0 -- no scroll wheel movement 
  <LI>1 -- vertical scroll up one click 
  <LI>0xF -- vertical scroll down one click 
  <LI>2 -- horizontal scroll right one click 
  <LI>0xE -- horizontal scroll left one click </LI></UL>
<P>It will look something like this, when only 1 scroll has been activated: 
<BR>byte 4: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Z movement </TH></TR></TBODY></TABLE>
<P>However if you mangede to have a 2 scroll wheel ( or 5 btn) and init, then it 
will look like this&nbsp;: <BR>byte 4: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Always 0 </TH>
    <TH>Always 0 </TH>
    <TH>5th btn </TH>
    <TH>4th btn </TH>
    <TH>Z3 </TH>
    <TH>Z2 </TH>
    <TH>Z1 </TH>
    <TH>Z0 </TH></TR></TBODY></TABLE>
<P>Here is Z3 though Z0 is a signed value, of the Z movement (scroll) if it is 
increased/ decreased with 2, then it is the vertical scroll wheel, else it is 
just the horizontal scroll wheel.<BR>If a button is pressed, then the value for 
the button will be “1”, and when not pressed “0”. </P><A 
name=Non-Linear_Movement></A>
<H4><SPAN class=mw-headline>Non-Linear Movement</SPAN></H4>
<P>When a user is trying to point at something on a screen, they will quickly 
move the mouse in the general direction of the target, and then slow down to 
accurately point at it. The deltaX/Y values from the mouse packets can be used 
directly, but will force the user to move the mouse very far to get the cursor 
from one area of the screen to another -- since "rapid movement" of a mouse will 
only generate packets with deltaX/Y values of perhaps 20. One good answer is to 
scale the mouse movement by additional multiples, based on how fast the mouse is 
moving. If the mouse is moving slowly, the scale factor can be 1 -- to allow the 
highest possible sensitivity. When the mouse is (or has been) moving fast, the 
scale factor could be 5 or 10, to allow the cursor to move across large 
distances on the screen, quickly. </P>
<P>There are many ways to do such scaling, obviously. If you are coding the 
driver in assembler, one suggestion might be to use the BSR command to generate 
an approximate log base2 of deltaX and deltaY, and use that as your scaling 
factor. </P><A name=Doubleclicks></A>
<H4><SPAN class=mw-headline>Doubleclicks</SPAN></H4>
<P>If you intend to implement a doubleclick, you will need to record timestamps 
of mousedown events to high accuracy. The only way to know if a doubleclick has 
occurred is to know how long ago the previous click of the mouse button 
happened. If the delay between the two clicks was less than some threshhold, 
then it was a doubleclick. The problem here is that you need to be able to 
measure very short delays, and there may be extremely long delays between clicks 
(days, perhaps) -- long enough that your timestamp measurement might overflow. 
This needs to be handled carefully. </P><A name=Timeouts.2FMouse_Disconnect></A>
<H4><SPAN class=mw-headline>Timeouts/Mouse Disconnect</SPAN></H4>
<P>If a mouse is operating normally, but is not being moved or clicked, it will 
not send any packets. If a mouse has been unplugged, it will also not send any 
packets. If you want to support "hot plugging" of PS2 mice, then you might want 
to know when a mouse has become disconnected. So, if you have not seen any 
packets from the mouse for awhile, you can query the mouse to see if it is still 
alive. A convenient way to do this is to send a request for a mouse packet 
(mouse command 0xEB). You will get back an ACK (0xFA) from the mouse, and then a 
mouse packet (with everything set to 0, probably). Please note that you need to 
make sure that the 0xFA does not cause a misalignment of your input mouse 
packet. Also please note that if the contents of the mouse packet are <I>not</I> 
0, then that means that somehow your mouse packets have become disabled. </P>
<P>In general, it is a good idea to also have timeouts everywhere that the 
system is waiting for a response from the mouse, because it may never come. 
</P><A name=PS2_Mouse_Commands></A>
<H3><SPAN class=mw-headline>PS2 Mouse Commands</SPAN></H3>
<P>After the PS2 Aux port has been enabled, you can send commands to the mouse. 
It is recommended to disable packets while "reprogramming" the mouse. </P><A 
name=Waiting_to_Send_Bytes_to_Port_0x60_and_0x64></A>
<H4><SPAN class=mw-headline>Waiting to Send Bytes to Port 0x60 and 
0x64</SPAN></H4>
<P>All output to port 0x60 or 0x64 must be preceded by waiting for bit 1 
(value=2) of port 0x64 to become clear. Similarly, bytes cannot be read from 
port 0x60 until bit 0 (value=1) of port 0x64 is set. See <A title="PS2 Keyboard" 
href="http://wiki.osdev.org/PS2_Keyboard">PS2 Keyboard</A> for further details. 
</P><A name=0xD4_Byte_and_Command_Byte></A>
<H4><SPAN class=mw-headline>0xD4 Byte and Command Byte</SPAN></H4>
<P>Sending a command byte to the mouse (to port 0x60) must be preceded by 
sending a 0xD4 byte to port 0x64 (with appropriate waits on port 0x64, bit 1, 
before sending each output byte). Note: this 0xD4 byte does <I>not</I> generate 
any ACK, from either the keyboard or mouse. </P><A 
name=Wait_for_ACK_from_Mouse></A>
<H4><SPAN class=mw-headline>Wait for ACK from Mouse</SPAN></H4>
<P>It is required to wait until the mouse sends back the 0xFA acknowledgement 
byte after each command byte before sending the next 0xD4 (Note: reset commands 
might not be ACK'ed -- wait for the 0xAA after a reset). Some commands generate 
2 ACK, 1 for the command, and 1 for receiving data. </P><A 
name=Mouse_Command_Set></A>
<H4><SPAN class=mw-headline>Mouse Command Set</SPAN></H4>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Hex value </TH>
    <TH>Meaning </TH>
    <TH>Description </TH></TR>
  <TR>
    <TH>0xFF </TH>
    <TH>Reset </TH>
    <TH>The mouse sends ACK (0xFA) and resets. </TH></TR>
  <TR>
    <TH>0xFE </TH>
    <TH>Resend </TH>
    <TH>this command makes the mouse sends its second last packet to the host 
      again. </TH></TR>
  <TR>
    <TH>0xF6 </TH>
    <TH>Set Defaults </TH>
    <TH>The mouse sends ACK (0xFA) and applies default values </TH></TR>
  <TR>
    <TH>0xF5 </TH>
    <TH>Disable Data Reporting </TH>
    <TH>The mouse sends ACK (0xFA) and disable data reporting. </TH></TR>
  <TR>
    <TH>0xF4 </TH>
    <TH>Enable Data Reporting </TH>
    <TH>The mouse sends ACK (0xFA) and enables data reporting </TH></TR>
  <TR>
    <TH>0xF3 </TH>
    <TH>Set Sample Rate </TH>
    <TH>The mouse sends ACK (0xFA) and waits for the next data, written to the 
      mouse, to be the sample rate </TH></TR>
  <TR>
    <TH>0xF2 </TH>
    <TH>Get Device ID </TH>
    <TH>The mouse sends ACK (0xFA) and sends its ID, though the DATA port 
  </TH></TR>
  <TR>
    <TH>0xF0 </TH>
    <TH>Set Remote Mode </TH>
    <TH>The mouse sends ACK (0xFA) and then reset its movement counters, and 
      enters remote mode </TH></TR>
  <TR>
    <TH>0xEE </TH>
    <TH>Set Wrap Mode </TH>
    <TH>The mouse sends ACK (0xFA) and then reset its movement counters, and 
      enters warp mode </TH></TR>
  <TR>
    <TH>0xEC </TH>
    <TH>Reset Wrap Mode </TH>
    <TH>The mouse sends ACK, and then enters the last mode, before entering 
      wrap mode, it also resets its movement counters </TH></TR>
  <TR>
    <TH>0xEB </TH>
    <TH>Read Data </TH>
    <TH>The mouse sends ACK, followed by the first packet, and so on, until It 
      have sent all. </TH></TR>
  <TR>
    <TH>0xEA </TH>
    <TH>Set Stream Mode </TH>
    <TH>The mouse sends ACK (0xFA) and then reset its movement counters, and 
      enters reporting mode </TH></TR>
  <TR>
    <TH>0xE9 </TH>
    <TH>Status Request </TH>
    <TH>The mouse sends ACK, and sends afterwards the status bytes ( 3 bytes 
      in a row, remember to wait each time for new data) </TH></TR>
  <TR>
    <TH>0xE8 </TH>
    <TH>Set Resolution </TH>
    <TH>The mouse sends ACK and waits for the next data, written to the mouse, 
      to be the resolution </TH></TR>
  <TR>
    <TH>0xE7 </TH>
    <TH>Set Scaling 2:1 </TH>
    <TH>The mouse sends ACK and set scaling 2:1 </TH></TR>
  <TR>
    <TH>0xE6 </TH>
    <TH>Set Scaling 1:1 </TH>
    <TH>The mouse sends ACK and set scaling 1:1 </TH></TR></TBODY></TABLE>
<P><BR>The status byte looks like this: <BR>Byte 1: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Always 0 </TH>
    <TH>mode </TH>
    <TH>enable </TH>
    <TH>scaling </TH>
    <TH>Always 0 </TH>
    <TH>left btn </TH>
    <TH>middle </TH>
    <TH>right btn </TH></TR></TBODY></TABLE>
<P>Byte 2: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>resoltion </TH></TR></TBODY></TABLE>
<P>Byte 3: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>sample rate </TH></TR></TBODY></TABLE><BR>
<P>Mode: if it is 1, the current mode is remote mode; if 0 then it is stream 
mode <BR>Enable: if it is 1, then data reporting is enabled; if 0 then data 
reporting is disabled<BR>Scaling: if it is 1, scaling 2:1 is enabled; if 0 then 
scaling 1:1 is enabled.<BR></P><A 
name=Resolution.2C_scaling_and_sampling_rate></A>
<H5><SPAN class=mw-headline>Resolution, scaling and sampling rate</SPAN></H5>
<P>These terms are all like 'settings' or 'options' for the mouse. For example, 
when you move the mouse, how many packets it will send per movement, etc. Below 
you will find an explanation of these terms and a table with their respective 
possibly values. </P>
<P>Resolution: How many packets will be sent for each millimeter of mouse 
movement.<BR>Scaling: Changes the actual packet that is sent (the movement 
bytes, for example).<BR>Sampling Rate: How many packets the mouse can send per 
second.<BR></P>
<P>Resolution: </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>value </TH>
    <TH>resolution </TH></TR>
  <TR>
    <TH>0x00 </TH>
    <TH>1 count /mm </TH></TR>
  <TR>
    <TH>0x01 </TH>
    <TH>2 count /mm </TH></TR>
  <TR>
    <TH>0x02 </TH>
    <TH>4 count /mm </TH></TR>
  <TR>
    <TH>0x03 </TH>
    <TH>8 count /mm </TH></TR></TBODY></TABLE>
<P><BR>For scaling, there aren't many possibilities, since it can either be 
“1:1” or “2:1”, but looking at the scheme (below) we can see what happens if it 
is “2:1” </P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>Movement Counter </TH>
    <TH>Reported Movement </TH></TR>
  <TR>
    <TH>0 </TH>
    <TH>0 </TH></TR>
  <TR>
    <TH>1 </TH>
    <TH>1 </TH></TR>
  <TR>
    <TH>2 </TH>
    <TH>1 </TH></TR>
  <TR>
    <TH>3 </TH>
    <TH>3 </TH></TR>
  <TR>
    <TH>4 </TH>
    <TH>6 </TH></TR>
  <TR>
    <TH>5 </TH>
    <TH>9 </TH></TR>
  <TR>
    <TH>more than 5 </TH>
    <TH>2 * Movement Counter </TH></TR></TBODY></TABLE>
<P><BR>Sampling rate can have the following values: (all values is Decimal, NOT 
hex)<BR></P>
<TABLE cellSpacing=0 cellPadding=5 align=center border=1>
  <TBODY>
  <TR>
    <TH>value </TH>
    <TH>Samples pr second </TH></TR>
  <TR>
    <TH>10 </TH>
    <TH>10 </TH></TR>
  <TR>
    <TH>20 </TH>
    <TH>20 </TH></TR>
  <TR>
    <TH>40 </TH>
    <TH>40 </TH></TR>
  <TR>
    <TH>60 </TH>
    <TH>60 </TH></TR>
  <TR>
    <TH>80 </TH>
    <TH>80 </TH></TR>
  <TR>
    <TH>100 </TH>
    <TH>100 </TH></TR>
  <TR>
    <TH>200 </TH>
    <TH>200 </TH></TR></TBODY></TABLE><A name=Initializing_a_PS2_Mouse></A>
<H3><SPAN class=mw-headline>Initializing a PS2 Mouse</SPAN></H3>
<P>The PS2 mouse port on a PC is attached to the auxiliary input of the PS2 
keyboard controller. That input might be disabled at bootup, and needs to be 
enabled. It is usually also desirable to have the mouse generate IRQ12 
interrupts when it sends bytes through the keyboard controller to IO port 0x60. 
Additionally, it is necessary to tell the mouse to enable the transmission of 
packets. Optionally, you may also want to enable additional mouse features, such 
as scroll wheels, faster response times, increased resolution, or additional 
mouse buttons. </P><A name=PS.2F2_Device_Unplugging.2FHot_Plugging></A>
<H4><SPAN class=mw-headline>PS/2 Device Unplugging/Hot Plugging</SPAN></H4>
<P>Some idiot who created the PS/2 device specs did not specify that PS/2 
devices can be unplugged and replugged while the computer remains turned on 
("hot plugging"). A long time ago, some other idiots actually designed 
motherboards that would be damaged if PS2 hot plugging occurs. However, mice and 
keyboards have cords that were made to be tripped over, and sometimes it is very 
logical to try moving a mouse from one machine to another, temporarily, without 
powering the systems down. So all computers made in the last 15 years should, in 
fact, support hot plugging of PS2 devices. When a mouse is plugged into a 
running system, it may send a 0xAA, then a 0x00 byte, and then it will go into 
default state (see below). </P><A name=PS2_Aux_Port_Initialization></A>
<H4><SPAN class=mw-headline>PS2 Aux Port Initialization</SPAN></H4>
<P>When a computer is booted, the auxiliary port of the PS2 controller may need 
to be enabled, and IRQ12 may also need to be enabled. This should only need to 
be done once. </P><A name=Set_Compaq_Status.2FEnable_IRQ12></A>
<H5><SPAN class=mw-headline>Set Compaq Status/Enable IRQ12</SPAN></H5>
<P>On some systems, the PS2 aux port is disabled at boot. Data coming from the 
aux port will not generate any interrupts. To know that data has arrived, you 
need to enable the aux port to generate IRQ12. There is only one way to do that, 
which involves getting/modifying the "compaq status" byte. You need to send the 
command byte 0x20 ("Get Compaq Status Byte") to the PS2 controller on port 0x64. 
If you look at <A class=mw-redirect title=RBIL 
href="http://wiki.osdev.org/RBIL">RBIL</A>, it says that this command is Compaq 
specific, but this is no longer true. This command does <I>not</I> generate a 
0xFA ACK byte. The very next byte returned should be the Status byte. (Note: on 
some versions of Bochs, you will get a <I>second</I> byte, with a value of 0xD8, 
after sending this command, for some reason.) After you get the Status byte, you 
need to set bit number 1 (value=2, Enable IRQ12), and clear bit number 5 
(value=0x20, Disable Mouse Clock). Then send command byte 0x60 ("Set Compaq 
Status") to port 0x64, followed by the modified Status byte to port 0x60. This 
might generate a 0xFA ACK byte from the keyboard. </P><A 
name=Aux_Input_Enable_Command></A>
<H5><SPAN class=mw-headline>Aux Input Enable Command</SPAN></H5>
<P>Send the Enable Auxiliary Device command (0xA8) to port 0x64. This will 
generate an ACK response from the <I>keyboard</I>, which you must wait to 
receive. Please note that using this command is not necessary if you set the 
bits manually per the instructions above. </P><A 
name=Mouse_State_at_Power-on></A>
<H4><SPAN class=mw-headline>Mouse State at Power-on</SPAN></H4>
<P>When the mouse is reset, either by applying power or with a reset command 
(0xFF), it always goes into the following default state: </P>
<UL>
  <LI>streaming mode 
  <LI>packets disabled 
  <LI>emulate 3 button mouse (buttons 4, 5, and scroll wheels disabled) 
  <LI>3 byte packets 
  <LI>4 pixel/mm resolution 
  <LI>100 packets per second sample rate </LI></UL><A name=MouseID_Byte></A>
<H4><SPAN class=mw-headline>MouseID Byte</SPAN></H4>
<P>During initialization, a mouse indicates that it has various features (a 
scroll wheel, a 4th and 5th mouse button) by changing its mouseID in response to 
initialization commands. So you send a set of mouse commands, and then ask for 
the mouseID byte, with the Read MouseID command (0xF2). If it changed, then the 
mouse has changed modes. Then send another set of commands, and maybe change 
modes again. The mouseID byte is the next byte sent after the ACK for the Read 
MouseID command. At initialization, the mouseID is always 0. Other current legal 
values are 3 and 4. </P><A name=Init.2FDetection_Command_Sequences></A>
<H4><SPAN class=mw-headline>Init/Detection Command Sequences</SPAN></H4>
<P>If you would like more than just 3 buttons, you will have to use the 
following sequence(s). if a sequence is accepted, then the number of packets 
change ( see Format of First 3 Packet Bytes, and the Format of the optional 4 
Packet Bytes), also notic the mouse ID changes if the sequence is accepted. So 
if the sequence is not accepted, the ID remains, if accpeted it change. </P>
<P>The first sequence goes like this: </P>
<UL>
  <LI>set sample to 200 
  <LI>set sample to 100 
  <LI>set sample to 80 
  <LI>get the id </LI></UL>
<P><BR>this will only activate the scroll wheel </P>
<P><BR></P>
<UL>
  <LI>set sample to 200 
  <LI>set sample to 200 
  <LI>set sample to 80 
  <LI>get the id </LI></UL>
<P><BR>this will activate the scroll wheel, and the 4th and 5th button. </P>
<P>in order to try the second, you will need to do the first, you can not just 
skip the first. </P><A name=Enable_Packets></A>
<H4><SPAN class=mw-headline>Enable Packets</SPAN></H4>
<P>After the mouse has been initialized to the correct mouseID, its Samplerate 
is probably 80 samples per second, its Resolution is probably 4 pixels/mm, and 
packets are still disabled. You may want to modify the Samplerate and 
Resolution, and then you need to send a 0xF4 command to the mouse, to make the 
mouse generate movement packets. </P><A name=PC_Serial_Mouse></A>
<H3><SPAN class=mw-headline>PC Serial Mouse</SPAN></H3>
<P>For info on running a serial mouse on an RS232 port, see <A 
class="external text" 
title=http://freedos-32.sourceforge.net/showdoc.php?page=sermouse 
href="http://freedos-32.sourceforge.net/showdoc.php?page=sermouse" 
rel=nofollow>this document</A>. </P><A name=Mac_Mouse_Interface></A>
<H2><SPAN class=mw-headline>Mac Mouse Interface</SPAN></H2>
<P>(stub - to be written later) </P>
<P><BR></P><A name=See_Also></A>
<H2><SPAN class=mw-headline>See Also</SPAN></H2><A name=Threads></A>
<H3><SPAN class=mw-headline>Threads</SPAN></H3>
<UL>
  <LI><A class="external text" 
  title=http://www.osdev.org/phpBB2/viewtopic.php?t=10247 
  href="http://www.osdev.org/phpBB2/viewtopic.php?t=10247" rel=nofollow>SANiK's 
  mouse code</A> 
  <LI><A class="external text" 
  title=http://www.osdev.org/phpBB2/viewtopic.php?t=8323 
  href="http://www.osdev.org/phpBB2/viewtopic.php?t=8323" rel=nofollow>PS2 mouse 
  IRQ</A> 
  <LI><A class="external text" 
  title=http://www.osdev.org/phpBB2/viewtopic.php?t=6942 
  href="http://www.osdev.org/phpBB2/viewtopic.php?t=6942" rel=nofollow>PS2 mouse 
  links</A> </LI></UL><A name=External_Links></A>
<H3><SPAN class=mw-headline>External Links</SPAN></H3>
<UL>
  <LI><A class="external text" 
  title=http://www.isdaman.com/alsos/hardware/mouse/ps2interface.htm 
  href="http://www.isdaman.com/alsos/hardware/mouse/ps2interface.htm" 
  rel=nofollow>Adam Chapweske's tutorial</A> 
  <LI><A class="external text" 
  title=http://www.computer-engineering.org/index.php?title=PS/2_Mouse_Interface 
  href="http://www.computer-engineering.org/index.php?title=PS/2_Mouse_Interface" 
  rel=nofollow>Alternate link to Chapweske's tutorial</A> 
  <LI><A class="external text" 
  title=http://www.win.tue.nl/~aeb/linux/kbd/scancodes-13.html 
  href="http://www.win.tue.nl/~aeb/linux/kbd/scancodes-13.html" 
  rel=nofollow>Linux PS2 mouse article with non-Microsoft mouse info</A> 
  <LI><A class="external text" 
  title=http://houbysoft.xf.cz/download/ps2mouse.html 
  href="http://houbysoft.xf.cz/download/ps2mouse.html" rel=nofollow>Tutorial 
  with sample C code</A> 
  <LI><A class="external text" title=http://www.computer-engineering.org 
  href="http://www.computer-engineering.org/" 
  rel=nofollow>http://www.computer-engineering.org/</A> 
  <LI><A class="external text" title=http://www.mcamafia.de/pdf/ibm_hitrc07.pdf 
  href="http://www.mcamafia.de/pdf/ibm_hitrc07.pdf" rel=nofollow>IBM's Keyboard 
  and Auxiliary Device (mouse) Controller documentation</A> </LI></UL><!-- 
NewPP limit report
Preprocessor node count: 61/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
--><!-- Saved in parser cache with key wikidb:pcache:idhash:1909-0!1!0!!en!2!edit=0 and timestamp 20110715104014 -->
<DIV class=printfooter>Retrieved from "<A 
href="http://wiki.osdev.org/Mouse_Input">http://wiki.osdev.org/Mouse_Input</A>"</DIV>
<DIV id=catlinks>
<P class=catlinks><A title=Special:Categories 
href="http://wiki.osdev.org/Special:Categories">Category</A>: <SPAN dir=ltr><A 
title="Category:Human Interface Device" 
href="http://wiki.osdev.org/Category:Human_Interface_Device">Human Interface 
Device</A></SPAN></P></DIV><!-- end content -->
<DIV class=visualClear></DIV></DIV></DIV></DIV>
<DIV id=column-one>
<DIV class=portlet id=p-cactions>
<H5>Views</H5>
<DIV class=pBody>
<UL>
  <LI class=selected id=ca-nstab-main><A title="View the content page [c]" 
  accessKey=c href="http://wiki.osdev.org/Mouse_Input">Page</A> 
  <LI id=ca-talk><A title="Discussion about the content page [t]" accessKey=t 
  href="http://wiki.osdev.org/Talk:Mouse_Input">Discussion</A> 
  <LI id=ca-viewsource><A 
  title="This page is protected. You can view its source. [e]" accessKey=e 
  href="http://wiki.osdev.org/index.php?title=Mouse_Input&amp;action=edit">View 
  source</A> 
  <LI id=ca-history><A title="Past versions of this page. [h]" accessKey=h 
  href="http://wiki.osdev.org/index.php?title=Mouse_Input&amp;action=history">History</A> 
  </LI></UL></DIV></DIV>
<DIV class=portlet id=p-personal>
<H5>Personal tools</H5>
<DIV class=pBody>
<UL>
  <LI id=pt-login><A 
  title="You are encouraged to log in, it is not mandatory however. [o]" 
  accessKey=o 
  href="http://wiki.osdev.org/index.php?title=Special:Userlogin&amp;returnto=Mouse_Input">Log 
  in / create account</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-logo><A title="Visit the Main Page [z]" 
style="BACKGROUND-IMAGE: url(/skins/common/images/osdev.png)" accessKey=z 
href="http://wiki.osdev.org/Main_Page"></A></DIV>
<SCRIPT type=text/javascript> if (window.isMSIE55) fixalpha(); </SCRIPT>

<DIV class=portlet id=p-navigation>
<H5>Navigation</H5>
<DIV class=pBody>
<UL>
  <LI id=n-mainpage><A title="Visit the Main Page [z]" accessKey=z 
  href="http://wiki.osdev.org/Main_Page">Main Page</A> 
  <LI id=n-portal><A 
  title="About the project, what you can do, where to find things" 
  href="http://forum.osdev.org/">Forums</A> 
  <LI id=n-FAQ><A href="http://wiki.osdev.org/Category:FAQ">FAQ</A> 
  <LI id=n-OS-Projects><A href="http://wiki.osdev.org/Projects">OS Projects</A> 
  <LI id=n-randompage><A title="Load a random page [x]" accessKey=x 
  href="http://wiki.osdev.org/Special:Random">Random page</A> 
</LI></UL></DIV></DIV>
<DIV class=portlet id=p-about>
<H5>About</H5>
<DIV class=pBody>
<UL>
  <LI id=n-This-site><A href="http://wiki.osdev.org/OSDevWiki:About">This 
  site</A> 
  <LI id=n-Joining><A href="http://wiki.osdev.org/OSDevWiki:Joining">Joining</A> 

  <LI id=n-Editing-help><A 
  href="http://wiki.osdev.org/OSDevWiki:Editing">Editing help</A> 
  <LI id=n-recentchanges><A title="The list of recent changes in the wiki. [r]" 
  accessKey=r href="http://wiki.osdev.org/Special:Recentchanges">Recent 
  changes</A> </LI></UL></DIV></DIV>
<DIV class=portlet id=p-search>
<H5><LABEL for=searchInput>Search</LABEL></H5>
<DIV class=pBody id=searchBody>
<FORM id=searchform action=/Special:Search>
<DIV><INPUT id=searchInput title="Search OSDev Wiki [f]" accessKey=f 
name=search> <INPUT class=searchButton id=searchGoButton title="Go to a page with this exact name if exists" type=submit value=Go name=go>&nbsp; 
<INPUT class=searchButton id=mw-searchButton title="Search the pages for this text" type=submit value=Search name=fulltext> 
</DIV></FORM></DIV></DIV>
<DIV class=portlet id=p-tb>
<H5>Toolbox</H5>
<DIV class=pBody>
<UL>
  <LI id=t-whatlinkshere><A title="List of all wiki pages that link here [j]" 
  accessKey=j 
  href="http://wiki.osdev.org/Special:Whatlinkshere/Mouse_Input">What links 
  here</A> 
  <LI id=t-recentchangeslinked><A 
  title="Recent changes in pages linked from this page [k]" accessKey=k 
  href="http://wiki.osdev.org/Special:Recentchangeslinked/Mouse_Input">Related 
  changes</A> 
  <LI id=t-upload><A title="Upload files [u]" accessKey=u 
  href="http://wiki.osdev.org/Special:Upload">Upload file</A> 
  <LI id=t-specialpages><A title="List of all special pages [q]" accessKey=q 
  href="http://wiki.osdev.org/Special:Specialpages">Special pages</A> 
  <LI id=t-print><A title="Printable version of this page [p]" accessKey=p 
  href="http://wiki.osdev.org/index.php?title=Mouse_Input&amp;printable=yes">Printable 
  version</A> 
  <LI id=t-permalink><A title="Permanent link to this version of the page" 
  href="http://wiki.osdev.org/index.php?title=Mouse_Input&amp;oldid=8323">Permanent 
  link</A> </LI></UL></DIV></DIV></DIV><!-- end of the left (by default at least) column -->
<DIV class=visualClear></DIV>
<DIV id=footer>
<DIV id=f-poweredbyico><A href="http://www.mediawiki.org/"><IMG 
alt="Powered by MediaWiki" 
src="p1.files/poweredby_mediawiki_88x31.png"></A></DIV>
<UL id=f-list>
  <LI id=lastmod>This page was last modified 15:10, 2 July 2009. 
  <LI id=viewcount>This page has been accessed 18,037 times. 
  <LI id=privacy><A title="OSDev Wiki:Privacy policy" 
  href="http://wiki.osdev.org/OSDev_Wiki:Privacy_policy">Privacy policy</A> 
  <LI id=about><A title="OSDev Wiki:About" 
  href="http://wiki.osdev.org/OSDev_Wiki:About">About OSDev Wiki</A> 
  <LI id=disclaimer><A title="OSDev Wiki:General disclaimer" 
  href="http://wiki.osdev.org/OSDev_Wiki:General_disclaimer">Disclaimers</A> 
  </LI></UL></DIV>
<SCRIPT type=text/javascript>if (window.runOnloadHook) runOnloadHook();</SCRIPT>
</DIV><!-- Served in 0.372 secs. --></BODY></HTML>
