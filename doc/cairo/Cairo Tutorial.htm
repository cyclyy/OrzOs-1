<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0034)http://cairographics.org/tutorial/ -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Cairo Tutorial</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="Cairo Tutorial.files/style.css" type=text/css rel=stylesheet><LINK 
href="Cairo Tutorial.files/local.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2900.6036" name=GENERATOR></HEAD>
<BODY>
<DIV class=header>
<DIV id=logo><A href="http://cairographics.org/"><IMG alt=cairo 
src="Cairo Tutorial.files/cairo-banner.png"></A> </DIV></DIV>
<DIV id=navcontainer>
<UL id=navlist>
  <LI><A href="http://cairographics.org/news/">News</A> 
  <LI><A href="http://cairographics.org/download/">Download</A> 
  <LI><A href="http://cairographics.org/documentation/">Documentation</A> 
  <LI><A href="http://cairographics.org/contact/">Contact</A> 
  <LI><A href="http://cairographics.org/examples/">Examples</A> </LI></UL></DIV>
<DIV id=title>Cairo Tutorial </DIV>
<DIV id=content>
<P>This tutorial is derived from Michael Urman's <A 
href="http://www.tortall.net/mu/wiki/CairoTutorial">cairo tutorial for python 
programmers</A>. The original code snippets have been translated to C, the text 
has only been changed as much as necessary.</P>
<P>Cairo is a powerful 2d graphics library. This document introduces you to how 
cairo works and many of the functions you will use to create the graphic 
experience you desire.</P>
<P>In order to follow along on your computer, you need the following things:</P>
<OL>
  <LI>
  <P>Cairo itself. You will need both the library and the development files. See 
  <A href="http://cairographics.org/download/">Download</A> if you don't have it 
  already.</P>
  <LI>
  <P>A C compiler. The <A href="http://cairographics.org/FAQ/">FAQ</A> contains 
  a minimal example on how to turn the code into a program that produces the 
  desired output.</P>
  <P>If you want to see the code snippets included in this tutorial in action, 
  you can try to click on some of the images. You will get a small C program 
  which includes the described drawing code.</P></LI></OL>
<P>Alternately, if you're up for a challenge, you can translate the examples to 
your preferred language and host environment and only need cairo from above.</P>
<BLOCKQUOTE>
  <P>Note: The text mentions <CODE>cairo_push_group()</CODE> and 
  <CODE>cairo_pop_group()</CODE>. At least cairo version 1.2.0 is needed for 
  this.</P></BLOCKQUOTE>
<H2>Table of Contents</H2>
<UL>
  <LI><A href="http://cairographics.org/tutorial/#L1draw">Cairo's Drawing 
  Model</A> 
  <UL>
    <LI><A href="http://cairographics.org/tutorial/#L2nouns">Nouns</A> 
    <LI><A href="http://cairographics.org/tutorial/#L2verbs">Verbs</A> </LI></UL>
  <LI><A href="http://cairographics.org/tutorial/#L1drawing">Drawing with 
  Cairo</A> 
  <UL>
    <LI><A href="http://cairographics.org/tutorial/#L2preparesource">Preparing 
    and Selecting a Source</A> 
    <LI><A href="http://cairographics.org/tutorial/#L2createpath">Creating a 
    Path</A> </LI></UL>
  <LI><A 
  href="http://cairographics.org/tutorial/#L1understandingtext">Understanding 
  Text</A> 
  <LI><A href="http://cairographics.org/tutorial/#L1transforms">Working with 
  Transforms</A> 
  <LI><A href="http://cairographics.org/tutorial/#L1gonext">Where to Go Next</A> 

  <LI><A href="http://cairographics.org/tutorial/#L1tips">Tips and Tricks</A> 
  <UL>
    <LI><A href="http://cairographics.org/tutorial/#L2linewidth">Line Width</A> 
    <LI><A href="http://cairographics.org/tutorial/#L2textalign">Text 
    Alignment</A> </LI></UL></LI></UL>
<H1 id=L1drawingmodel>Cairo's Drawing Model</H1>
<P>In order to explain the operations used by cairo, we first delve into a model 
of how cairo models drawing. There are only a few concepts involved, which are 
then applied over and over by the different methods. First I'll describe the <A 
href="http://cairographics.org/tutorial/#L2nouns">nouns</A>: <A 
href="http://cairographics.org/tutorial/#L3destination">destination</A>, <A 
href="http://cairographics.org/tutorial/#L3source">source</A>, <A 
href="http://cairographics.org/tutorial/#L3mask">mask</A>, <A 
href="http://cairographics.org/tutorial/#L3path">path</A>, and <A 
href="http://cairographics.org/tutorial/#L3context">context</A>. After that I'll 
describe the <A href="http://cairographics.org/tutorial/#L2verbs">verbs</A> 
which offer ways to manipulate the nouns and draw the graphics you wish to 
create.</P>
<H2 id=L2nouns>Nouns</H2>
<P>Cairo's nouns are somewhat abstract. To make them concrete I'm including 
diagrams that depict how they interact. The first three nouns are the three 
layers in the diagrams you see in this section. The fourth noun, the path, is 
drawn on the middle layer when it is relevant. The final noun, the context, 
isn't shown.</P>
<H3 id=L3destination>Destination</H3>
<DIV class=tutright><IMG alt="" 
src="Cairo Tutorial.files/destination.png"></DIV>
<P>The destination is the <A 
href="http://www.cairographics.org/manual/cairo-surfaces.html">surface</A> on 
which you're drawing. It may be tied to an array of pixels like in this 
tutorial, or it might be tied to a SVG or PDF file, or something else. This 
surface collects the elements of your graphic as you apply them, allowing you to 
build up a complex work as though painting on a canvas.</P>
<H3 id=L3source>Source</H3>
<DIV class=tutright><IMG alt="" src="Cairo Tutorial.files/source.png"></DIV>
<P>The source is the "paint" you're about to work with. I show this as it 
is—plain black for several examples—but translucent to show lower layers. Unlike 
real paint, it doesn't have to be a single color; it can be a <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html">pattern</A> 
or even a previously created destination <A 
href="http://www.cairographics.org/manual/cairo-surfaces.html">surface</A> (see 
<A href="http://cairographics.org/FAQ/#paint_from_a_surface">How do I paint from 
one surface to another?</A>. Also unlike real paint it can contain transparency 
information—the Alpha channel.</P>
<H3 id=L3mask>Mask</H3>
<DIV class=tutright><IMG alt="" src="Cairo Tutorial.files/the-mask.png"></DIV>
<P>The mask is the most important piece: it controls where you apply the source 
to the destination. I will show it as a yellow layer with holes where it lets 
the source through. When you apply a drawing verb, it's like you stamp the 
source to the destination. Anywhere the mask allows, the source is copied. 
Anywhere the mask disallows, nothing happens.</P>
<H3 id=L3path>Path</H3>
<P>The path is somewhere between part of the mask and part of the context. I 
will show it as thin green lines on the mask layer. It is manipulated by path 
verbs, then used by drawing verbs.</P>
<H3 id=L3context>Context</H3>
<P>The context keeps track of everything that verbs affect. It tracks one 
source, one destination, and one mask. It also tracks several helper variables 
like your line width and style, your font face and size, and more. Most 
importantly it tracks the path, which is turned into a mask by drawing 
verbs.</P>
<P>Before you can start to draw something with cairo, you need to create the 
context. The context is stored in cairo's central data type, called 
<CODE>cairo_t</CODE>. When you create a cairo context, it must be tied to a 
specific surface—for example, an image surface if you want to create a PNG file. 
There is also a data type for the surface, called <CODE>cairo_surface_t</CODE>. 
You can initialize your cairo context like this:</P><PRE><CODE>cairo_surface_t *surface;
cairo_t *cr;

surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32, 120, 120);
cr = cairo_create (surface);
</CODE></PRE>
<P>The cairo context in this example is tied to an image surface of dimension 
120&nbsp;x&nbsp;120 and 32 bits per pixel to store RGB and Alpha information. 
Surfaces can be created specific to most cairo backends, see the <A 
href="http://cairographics.org/manual/cairo-surfaces.html">manual</A> for 
details.</P>
<H2 id=L2verbs>Verbs</H2>
<P>The reason you are using cairo in a program is to draw. Cairo internally 
draws with one fundamental drawing operation: the source and mask are freely 
placed somewhere over the destination. Then the layers are all pressed together 
and the paint from the source is transferred to the destination wherever the 
mask allows it. To that extent the following five drawing verbs, or operations, 
are all similar. They differ by how they construct the mask.</P>
<H3 id=L3stroke>Stroke</H3>
<DIV class=tutright><A href="http://cairographics.org/tutorial/stroke.c"><IMG 
alt="" src="Cairo Tutorial.files/stroke.png"></A></DIV>
<P>The <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-stroke"><CODE>cairo_stroke()</CODE></A> 
operation takes a virtual pen along the path. It allows the source to transfer 
through the mask in a thin (or thick) line around the path, according to the 
pen's <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-line-width">line 
width</A>, <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-dash">dash 
style</A>, and <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-line-cap">line 
caps</A>.</P>
<P>Note: To see the code snippet in action, use the stroke.c file linked from 
the figure to the right. Just pasting the snippet into the FAQ's hello.c might 
give unexpected results due to different scaling. Read on; scaling is explained 
in section <A href="http://cairographics.org/tutorial/#L1transforms">Working 
with Transforms</A> below.</P><PRE><CODE>cairo_set_line_width (cr, 0.1);
cairo_set_source_rgb (cr, 0, 0, 0);
cairo_rectangle (cr, 0.25, 0.25, 0.5, 0.5);
cairo_stroke (cr);
</CODE></PRE>
<H3 id=L3fill>Fill</H3>
<DIV class=tutright><A href="http://cairographics.org/tutorial/fill.c"><IMG 
alt="" src="Cairo Tutorial.files/fill.png"></A></DIV>
<P>The <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill"><CODE>cairo_fill()</CODE></A> 
operation instead uses the path like the lines of a coloring book, and allows 
the source through the mask within the hole whose boundaries are the path. For 
complex paths (paths with multiple closed sub-paths—like a donut—or paths that 
self-intersect) this is influenced by the <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-fill-rule">fill 
rule</A>. Note that while stroking the path transfers the source for half of the 
line width on each side of the path, filling a path fills directly up to the 
edge of the path and no further.</P><PRE><CODE>cairo_set_source_rgb (cr, 0, 0, 0);
cairo_rectangle (cr, 0.25, 0.25, 0.5, 0.5);
cairo_fill (cr);
</CODE></PRE>
<H3 id=L3showtext>Show Text / Glyphs</H3>
<DIV class=tutright><A href="http://cairographics.org/tutorial/showtext.c"><IMG 
alt="" src="Cairo Tutorial.files/showtext.png"></A></DIV>
<P>The <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-show-text"><CODE>cairo_show_text()</CODE></A> 
operation forms the mask from text. It may be easier to think of 
<CODE>cairo_show_text()</CODE> as a shortcut for creating a path with <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-text-path"><CODE>cairo_text_path()</CODE></A> 
and then using <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill"><CODE>cairo_fill()</CODE></A> 
to transfer it. Be aware <CODE>cairo_show_text()</CODE> caches glyphs so is much 
more efficient if you work with a lot of text.</P><PRE><CODE>cairo_text_extents_t te;
cairo_set_source_rgb (cr, 0.0, 0.0, 0.0);
cairo_select_font_face (cr, "Georgia",
    CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_BOLD);
cairo_set_font_size (cr, 1.2);
cairo_text_extents (cr, "a", &amp;te);
cairo_move_to (cr, 0.5 - te.width / 2 - te.x_bearing,
    0.5 - te.height / 2 - te.y_bearing);
cairo_show_text (cr, "a");
</CODE></PRE>
<H3 id=L3paint>Paint</H3>
<DIV class=tutright><A href="http://cairographics.org/tutorial/paint.c"><IMG 
alt="" src="Cairo Tutorial.files/paint.png"></A></DIV>
<P>The <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-paint"><CODE>cairo_paint()</CODE></A> 
operation uses a mask that transfers the entire source to the destination. Some 
people consider this an infinitely large mask, and others consider it no mask; 
the result is the same. The related operation <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-paint-with-alpha"><CODE>cairo_paint_with_alpha()</CODE></A> 
similarly allows transfer of the full source to destination, but it transfers 
only the provided percentage of the color.</P><PRE><CODE>cairo_set_source_rgb (cr, 0.0, 0.0, 0.0);
cairo_paint_with_alpha (cr, 0.5);
</CODE></PRE>
<H3 id=L3maskverb>Mask</H3>
<DIV class=tutright><A href="http://cairographics.org/tutorial/mask.c"><IMG 
alt="" src="Cairo Tutorial.files/mask.png"></A></DIV>
<P>The <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-mask"><CODE>cairo_mask()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-mask-surface"><CODE>cairo_mask_surface()</CODE></A> 
operations allow transfer according to the transparency/opacity of a second 
source pattern or surface. Where the pattern or surface is opaque, the current 
source is transferred to the destination. Where the pattern or surface is 
transparent, nothing is transferred.</P><PRE><CODE>cairo_pattern_t *linpat, *radpat;
linpat = cairo_pattern_create_linear (0, 0, 1, 1);
cairo_pattern_add_color_stop_rgb (linpat, 0, 0, 0.3, 0.8);
cairo_pattern_add_color_stop_rgb (linpat, 1, 0, 0.8, 0.3);

radpat = cairo_pattern_create_radial (0.5, 0.5, 0.25, 0.5, 0.5, 0.75);
cairo_pattern_add_color_stop_rgba (radpat, 0, 0, 0, 0, 1);
cairo_pattern_add_color_stop_rgba (radpat, 0.5, 0, 0, 0, 0);

cairo_set_source (cr, linpat);
cairo_mask (cr, radpat);
</CODE></PRE>
<H1 id=L1drawing>Drawing with Cairo</H1>
<P>In order to create an image you desire, you have to prepare the <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html">context</A> for 
each of the drawing verbs. To use <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-stroke"><CODE>cairo_stroke()</CODE></A> 
or <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill"><CODE>cairo_fill()</CODE></A> 
you first need a path. To use <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-show-text"><CODE>cairo_show_text()</CODE></A> 
you must position your text by its insertion point. To use <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-mask"><CODE>cairo_mask()</CODE></A> 
you need a second source <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html">pattern</A> 
or <A 
href="http://www.cairographics.org/manual/cairo-cairo-surface-t.html">surface</A>. 
And to use any of the operations, including <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-paint"><CODE>cairo_paint()</CODE></A>, 
you need a primary source.</P>
<H2 id=L2preparesource>Preparing and Selecting a Source</H2>
<P>There are three main kinds of sources in cairo: colors, gradients, and 
images. Colors are the simplest; they use a uniform hue and opacity for the 
entire source. You can select these without any preparation with <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-source-rgb"><CODE>cairo_set_source_rgb()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-source-rgba"><CODE>cairo_set_source_rgba()</CODE></A>. 
Using <CODE>cairo_set_source_rgb (cr, r, g, b)</CODE> is equivalent to using 
<CODE>cairo_set_source_rgba (cr, r, g, b, 1.0)</CODE>, and it sets your source 
color to use full opacity.</P>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/setsourcergba.c"><IMG alt="" 
src="Cairo Tutorial.files/setsourcergba.png"></A></DIV><PRE><CODE>cairo_set_source_rgb (cr, 0, 0, 0);
cairo_move_to (cr, 0, 0);
cairo_line_to (cr, 1, 1);
cairo_move_to (cr, 1, 0);
cairo_line_to (cr, 0, 1);
cairo_set_line_width (cr, 0.2);
cairo_stroke (cr);

cairo_rectangle (cr, 0, 0, 0.5, 0.5);
cairo_set_source_rgba (cr, 1, 0, 0, 0.80);
cairo_fill (cr);

cairo_rectangle (cr, 0, 0.5, 0.5, 0.5);
cairo_set_source_rgba (cr, 0, 1, 0, 0.60);
cairo_fill (cr);

cairo_rectangle (cr, 0.5, 0, 0.5, 0.5);
cairo_set_source_rgba (cr, 0, 0, 1, 0.40);
cairo_fill (cr);
</CODE></PRE>
<P>Gradients describe a progression of colors by setting a start and stop 
reference location and a series of "stops" along the way. <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-linear">Linear 
gradients</A> are built from two points which pass through parallel lines to 
define the start and stop locations. <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-create-radial">Radial 
gradients</A> are also built from two points, but each has an associated radius 
of the circle on which to define the start and stop locations. Stops are added 
to the gradient with <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-add-color-stop-rgb"><CODE>cairo_add_color_stop_rgb()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-add-color-stop-rgba"><CODE>cairo_add_color_stop_rgba()</CODE></A> 
which take a color like <CODE>cairo_set_source_rgb*()</CODE>, as well as an 
offset to indicate where it lies between the reference locations. The colors 
between adjacent stops are averaged over space to form a smooth blend. Finally, 
the behavior beyond the reference locations can be controlled with <A 
href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html#cairo-pattern-set-extend"><CODE>cairo_set_extend()</CODE></A>.</P>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/setsourcegradient.c"><IMG alt="" 
src="Cairo Tutorial.files/setsourcegradient.png"></A></DIV><PRE><CODE>int i, j;
cairo_pattern_t *radpat, *linpat;

radpat = cairo_pattern_create_radial (0.25, 0.25, 0.1,  0.5, 0.5, 0.5);
cairo_pattern_add_color_stop_rgb (radpat, 0,  1.0, 0.8, 0.8);
cairo_pattern_add_color_stop_rgb (radpat, 1,  0.9, 0.0, 0.0);

for (i=1; i&lt;10; i++)
    for (j=1; j&lt;10; j++)
        cairo_rectangle (cr, i/10.0 - 0.04, j/10.0 - 0.04, 0.08, 0.08);
cairo_set_source (cr, radpat);
cairo_fill (cr);

linpat = cairo_pattern_create_linear (0.25, 0.35, 0.75, 0.65);
cairo_pattern_add_color_stop_rgba (linpat, 0.00,  1, 1, 1, 0);
cairo_pattern_add_color_stop_rgba (linpat, 0.25,  0, 1, 0, 0.5);
cairo_pattern_add_color_stop_rgba (linpat, 0.50,  1, 1, 1, 0);
cairo_pattern_add_color_stop_rgba (linpat, 0.75,  0, 0, 1, 0.5);
cairo_pattern_add_color_stop_rgba (linpat, 1.00,  1, 1, 1, 0);

cairo_rectangle (cr, 0.0, 0.0, 1, 1);
cairo_set_source (cr, linpat);
cairo_fill (cr);
</CODE></PRE>
<P>Images include both surfaces loaded from existing files with <A 
href="http://www.cairographics.org/manual/cairo-PNG-Support.html#cairo-image-surface-create-from-png"><CODE>cairo_image_surface_create_from_png()</CODE></A> 
and surfaces created from within cairo as an earlier destination. As of cairo 
1.2, the easiest way to make and use an earlier destination as a source is with 
<A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-push-group"><CODE>cairo_push_group()</CODE></A> 
and either <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-pop-group"><CODE>cairo_pop_group()</CODE></A> 
or <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-pop-group-to-source"><CODE>cairo_pop_group_to_source()</CODE></A>. 
Use <CODE>cairo_pop_group_to_source()</CODE> to use it just until you select a 
new source, and <CODE>cairo_pop_group()</CODE> when you want to save it so you 
can select it over and over again with <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-set-source"><CODE>cairo_set_source()</CODE></A>.</P>
<H2 id=L2createpath>Creating a Path</H2>
<P>Cairo always has an active path. If you call <A 
href="http://cairographics.org/tutorial/#L3stroke"><CODE>cairo_stroke()</CODE></A> 
it will draw the path with your line settings. If you call <A 
href="http://cairographics.org/tutorial/#L3fill"><CODE>cairo_fill()</CODE></A> 
it will fill the inside of the path. But as often as not, the path is empty, and 
both calls will result in no change to your destination. Why is it empty so 
often? For one, it starts that way; but more importantly after each <A 
href="http://cairographics.org/tutorial/#L3stroke"><CODE>cairo_stroke()</CODE></A> 
or <A 
href="http://cairographics.org/tutorial/#L3fill"><CODE>cairo_fill()</CODE></A> 
it is emptied again to let you start building your next path.</P>
<P>What if you want to do multiple things with the same path? For instance to 
draw a red rectangle with a black border, you would want to fill the rectangle 
path with a red source, then stroke the same path with a black source. A 
rectangle path is easy to create multiple times, but a lot of paths are more 
complex.</P>
<P>Cairo supports easily reusing paths by having alternate versions of its 
operations. Both draw the same thing, but the alternate doesn't reset the path. 
For stroking, alongside <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-stroke"><CODE>cairo_stroke()</CODE></A> 
there is <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-stroke-preserve"><CODE>cairo_stroke_preserve()</CODE></A>; 
for filling, <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill-preserve"><CODE>cairo_fill_preserve()</CODE></A> 
joins <A 
href="http://www.cairographics.org/manual/cairo-cairo-t.html#cairo-fill"><CODE>cairo_fill()</CODE></A>. 
Even setting the clip has a preserve variant. Apart from choosing when to 
preserve your path, there are only a couple common operations.</P>
<H3 id=L3moving>Moving</H3>
<DIV class=tutright><IMG alt="" 
src="Cairo Tutorial.files/path-moveto.png"></DIV>
<P>Cairo uses a connect-the-dots style system when creating paths. Start at 1, 
draw a line to 2, then 3, and so forth. When you start a path, or when you need 
to start a new sub-path, you want it to be like point 1: it has nothing 
connecting to it. For this, use <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-move-to"><CODE>cairo_move_to()</CODE></A>. 
This sets the current reference point without making the path connect the 
previous point to it. There is also a relative coordinate variant, <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-rel-move-to"><CODE>cairo_rel_move_to()</CODE></A>, 
which sets the new reference a specified distance away from the current 
reference instead. After setting your first reference point, use the other path 
operations which both update the reference point and connect to it in some 
way.</P><PRE><CODE>cairo_move_to (cr, 0.25, 0.25);
</CODE></PRE>
<H3 id=L3lines>Straight Lines</H3>
<DIV class=tutright><IMG alt="" 
src="Cairo Tutorial.files/path-lineto.png"></DIV>
<P>Whether with absolute coordinates <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-line-to"><CODE>cairo_line_to()</CODE></A> 
(extend the path from the reference to this point), or relative coordinates <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-rel-line-to"><CODE>cairo_rel_line_to()</CODE></A> 
(extend the path from the reference this far in this direction), the path 
connection will be a straight line. The new reference point will be at the other 
end of the line.</P><PRE><CODE>cairo_line_to (cr, 0.5, 0.375);
cairo_rel_line_to (cr, 0.25, -0.125);
</CODE></PRE>
<H3 id=L3arcs>Arcs</H3>
<DIV class=tutright><IMG alt="" src="Cairo Tutorial.files/path-arcto.png"></DIV>
<P>Arcs are parts of the outside of a circle. Unlike straight lines, the point 
you directly specify is not on the path. Instead it is the center of the circle 
that makes up the addition to the path. Both a starting and ending point on the 
circle must be specified, and these points are connected either clockwise by <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-arc"><CODE>cairo_arc()</CODE></A> 
or counter-clockwise by <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-arc-negative"><CODE>cairo_arc_negative()</CODE></A>. 
If the previous reference point is not on this new curve, a straight line is 
added from it to where the arc begins. The reference point is then updated to 
where the arc ends. There are only absolute versions.</P><PRE><CODE>cairo_arc (cr, 0.5, 0.5, 0.25 * sqrt(2), -0.25 * M_PI, 0.25 * M_PI);
</CODE></PRE>
<H3 id=L3curves>Curves</H3>
<DIV class=tutright><IMG alt="" 
src="Cairo Tutorial.files/path-curveto.png"></DIV>
<P>Curves in cairo are cubic Bézier splines. They start at the current reference 
point and smoothly follow the direction of two other points (without going 
through them) to get to a third specified point. Like lines, there are both 
absolute (<A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-curve-to"><CODE>cairo_curve_to()</CODE></A>) 
and relative (<A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-rel-curve-to"><CODE>cairo_rel_curve_to()</CODE></A>) 
versions. Note that the relative variant specifies all points relative to the 
previous reference point, rather than each relative to the preceding control 
point of the curve.</P><PRE><CODE>cairo_rel_curve_to (cr, -0.25, -0.125, -0.25, 0.125, -0.5, 0);
</CODE></PRE>
<H3 id=L3closepath>Close the path</H3>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/path-close.c"><IMG alt="" 
src="Cairo Tutorial.files/path-close.png"></A></DIV>
<P>Cairo can also close the path by drawing a straight line to the beginning of 
the current sub-path. This straight line can be useful for the last edge of a 
polygon, but is not directly useful for curve-based shapes. A closed path is 
fundamentally different from an open path: it's one continuous path and has no 
start or end. A closed path has no line caps for there is no place to put 
them.</P><PRE><CODE>cairo_close_path (cr);
</CODE></PRE>
<H3 id=L3text>Text</H3>
<P>Finally text can be turned into a path with <A 
href="http://www.cairographics.org/manual/cairo-Paths.html#cairo-text-path"><CODE>cairo_text_path()</CODE></A>. 
Paths created from text are like any other path, supporting stroke or fill 
operations. This path is placed anchored to the current reference point, so <A 
href="http://cairographics.org/tutorial/#L3moving"><CODE>cairo_move_to()</CODE></A> 
your desired location before turning text into a path. However there are 
performance concerns to doing this if you are working with a lot of text; when 
possible you should prefer using the verb <A 
href="http://cairographics.org/tutorial/#L3showtext"><CODE>cairo_show_text()</CODE></A> 
over <A 
href="http://cairographics.org/tutorial/#L3text"><CODE>cairo_text_path()</CODE></A> 
and <A 
href="http://cairographics.org/tutorial/#L3fill"><CODE>cairo_fill()</CODE></A>.</P>
<H1 id=L1understandingtext>Understanding Text</H1>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/textextents.c"><IMG alt="" 
src="Cairo Tutorial.files/textextents.png"></A></DIV>
<P>To use text effectively you need to know where it will go. The methods <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-font-extents"><CODE>cairo_font_extents()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-text-extents"><CODE>cairo_text_extents()</CODE></A> 
get you this information. Since this diagram is hard to see so small, I suggest 
getting its <A href="http://cairographics.org/tutorial/textextents.c">source</A> 
and bump the size up to 600. It shows the relation between the reference point 
(red dot); suggested next reference point (blue dot); bounding box (dashed blue 
lines); bearing displacement (solid blue line); and height, ascent, baseline, 
and descent lines (dashed green).</P>
<P>The reference point is always on the baseline. The descent line is below 
that, and reflects a rough bounding box for all characters in the font. However 
it is an artistic choice intended to indicate alignment rather than a true 
bounding box. The same is true for the ascent line above. Next above that is the 
height line, the artist-recommended spacing between subsequent baselines. All 
three of these are reported as distances from the baseline, and expected to be 
positive despite their differing directions.</P>
<P>The bearing is the displacement from the reference point to the upper-left 
corner of the bounding box. It is often zero or a small positive value for x 
displacement, but can be negative x for characters like j as shown; it's almost 
always a negative value for y displacement. The width and height then describe 
the size of the bounding box. The advance takes you to the suggested reference 
point for the next letter. Note that bounding boxes for subsequent blocks of 
text can overlap if the bearing is negative, or the advance is smaller than the 
width would suggest.</P>
<P>In addition to placement, you also need to specify a face, style, and size. 
Set the face and style together with <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-select-font-face"><CODE>cairo_select_font_face()</CODE></A>, 
and the size with <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-set-font-size"><CODE>cairo_set_font_size()</CODE></A>. 
If you need even finer control, try getting a <A 
href="http://www.cairographics.org/manual/cairo-cairo-font-options-t.html#cairo-font-options-t"><CODE>cairo_font_options_t</CODE></A> 
with <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-get-font-options"><CODE>cairo_get_font_options()</CODE></A>, 
tweaking it, and setting it with <A 
href="http://www.cairographics.org/manual/cairo-text.html#cairo-set-font-options"><CODE>cairo_set_font_options()</CODE></A>.</P>
<H1 id=L1transforms>Working with Transforms</H1>
<P>Transforms have three major uses. First they allow you to set up a coordinate 
system that's easy to think in and work in, yet have the output be of any size. 
Second they allow you to make helper functions that work at or around a (0, 0) 
but can be applied anywhere in the output image. Thirdly they let you deform the 
image, turning a circular arc into an elliptical arc, etc. Transforms are a way 
of setting up a relation between two coordinate systems. The device-space 
coordinate system is tied to the surface, and cannot change. The user-space 
coordinate system matches that space by default, but can be changed for the 
above reasons. The helper functions <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-user-to-device"><CODE>cairo_user_to_device()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-user-to-device-distance"><CODE>cairo_user_to_device_distance()</CODE></A> 
tell you what the device-coordinates are for a user-coordinates position or 
distance. Correspondingly <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-device-to-user"><CODE>cairo_device_to_user()</CODE></A> 
and <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-device-to-user-distance"><CODE>cairo_device_to_user_distance()</CODE></A> 
tell you user-coordinates for a device-coordinates position or distance. 
Remember to send positions through the non-distance variant, and relative moves 
or other distances through the distance variant.</P>
<P>I leverage all of these reasons to draw the diagrams in this document. 
Whether I'm drawing 120&nbsp;x&nbsp;120 or 600&nbsp;x&nbsp;600, I use <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-scale"><CODE>cairo_scale()</CODE></A> 
to give me a 1.0&nbsp;x&nbsp;1.0 workspace. To place the results along the right 
column, such as in the discussion of <A 
href="http://cairographics.org/tutorial/#L1drawingmodel">cairo's drawing 
model</A>, I use <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-translate"><CODE>cairo_translate()</CODE></A>. 
And to add the perspective view for the overlapping layers, I set up an 
arbitrary deformation with <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-transform"><CODE>cairo_transform()</CODE></A> 
on a <A 
href="http://www.cairographics.org/manual/cairo-cairo-matrix-t.html#cairo-matrix-t"><CODE>cairo_matrix_t</CODE></A>.</P>
<P>To understand your transforms, read them bottom to top, applying them to the 
point you're drawing. To figure out which transforms to create, think through 
this process in reverse. For example if I want my 1.0&nbsp;x&nbsp;1.0 workspace 
to be 100&nbsp;x&nbsp;100 pixels in the middle of a 120&nbsp;x&nbsp;120 pixel 
surface, I can set it up one of three ways:</P>
<OL>
  <LI><CODE>cairo_translate (cr, 10, 10); cairo_scale (cr, 100, 100);</CODE> 
  <LI><CODE>cairo_scale (cr, 100, 100); cairo_translate (cr, 0.1, 0.1);</CODE> 
  <LI><CODE>cairo_matrix_t mat; cairo_matrix_init (&amp;mat, 100, 0, 0, 100, 10, 
  10); cairo_transform (cr, &amp;mat);</CODE> </LI></OL>
<P>Use the first when relevant because it is often the most readable; use the 
third when necessary to access additional control not available with the primary 
functions.</P>
<P>Be careful when trying to draw lines while under transform. Even if you set 
your line width while the scale factor was 1, the line width setting is always 
in user-coordinates and isn't modified by setting the scale. While you're 
operating under a scale, the width of your line is multiplied by that scale. To 
specify a width of a line in pixels, use <A 
href="http://www.cairographics.org/manual/cairo-Transformations.html#cairo-device-to-user-distance"><CODE>cairo_device_to_user_distance()</CODE></A> 
to turn a <CODE>(1, 1)</CODE> device-space distance into, for example, a 
<CODE>(0.01, 0.01)</CODE> user-space distance. Note that if your transform 
deforms the image there isn't necessarily a way to specify a line with a uniform 
width.</P>
<H1 id=L1gonext>Where to Go Next</H1>
<P>This wraps up the tutorial. It doesn't cover all functions in cairo, so for 
some "advanced" lesser-used features, you'll need to look elsewhere. The code 
behind the examples (<A href="http://cairographics.org/tutorial/diagram.c">layer 
diagrams</A>, <A href="http://cairographics.org/tutorial/draw.c">drawing 
illustrations</A>) uses a handful of techniques that aren't described within, so 
analyzing them may be a good first step. Other <A 
href="http://cairographics.org/examples/">examples</A> on cairographics.org lead 
in different directions. As with everything, there's a large gap between knowing 
the rules of the tool, and being able to use it well. The final section of this 
document provides some ideas to help you traverse parts of the gap.</P>
<H1 id=L1tips>Tips and Tricks</H1>
<P>In the previous sections you should have built up a firm grasp of the 
operations cairo uses to create images. In this section I've put together a 
small handful of snippets I've found particularly useful or non-obvious. I'm 
still new to cairo myself, so there may be other better ways to do these things. 
If you find a better way, or find a cool way to do something else, let me know 
and perhaps I can incorporate it into these tips.</P>
<H2 id=L2linewidth>Line Width</H2>
<P>When you're working under a uniform scaling transform, you can't just use 
pixels for the width of your line. However it's easy to translate it with the 
help of <CODE>cairo_device_to_user_distance()</CODE> (assuming that the pixel 
width is <CODE>1</CODE>):</P><PRE><CODE>double ux=1, uy=1;
cairo_device_to_user_distance (cr, &amp;ux, &amp;uy);
if (ux &lt; uy)
    ux = uy;
cairo_set_line_width (cr, ux);
</CODE></PRE>
<P>When you're working under a deforming scale, you may wish to still have line 
widths that are uniform in device space. For this you should return to a uniform 
scale before you stroke the path. In the image, the arc on the left is stroked 
under a deformation, while the arc on the right is stroked under a uniform 
scale.</P>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/tips-ellipse.c"><IMG alt="" 
src="Cairo Tutorial.files/tips-ellipse.png"></A></DIV><PRE><CODE>cairo_set_line_width (cr, 0.1);

cairo_save (cr);
cairo_scale (cr, 0.5, 1);
cairo_arc (cr, 0.5, 0.5, 0.40, 0, 2 * M_PI);
cairo_stroke (cr);

cairo_translate (cr, 1, 0);
cairo_arc (cr, 0.5, 0.5, 0.40, 0, 2 * M_PI);
cairo_restore (cr);
cairo_stroke (cr);
</CODE></PRE>
<H2 id=L2textalign>Text Alignment</H2>
<P>When you try to center text letter by letter at various locations, you have 
to decide how you want to center it. For example the following code will 
actually center letters individually, leading to poor results when your letters 
are of different sizes. (Unlike most examples, here I assume a 26&nbsp;x&nbsp;1 
workspace.)</P>
<DIV class=tutright><A 
href="http://cairographics.org/tutorial/tips-letter.c"><IMG alt="" 
src="Cairo Tutorial.files/tips-letter.png"></A></DIV>
<DIV class=clear></DIV><PRE><CODE>cairo_text_extents_t te;
char alphabet[] = "AbCdEfGhIjKlMnOpQrStUvWxYz";
char letter[2];

for (i=0; i &lt; strlen(alphabet); i++) {
    *letter = '\0';
    strncat (letter, alphabet + i, 1);

    cairo_text_extents (cr, letter, &amp;te);
    cairo_move_to (cr, i + 0.5 - te.x_bearing - te.width / 2,
            0.5 - te.y_bearing - te.height / 2);
    cairo_show_text (cr, letter);
}
</CODE></PRE>
<P>Instead the vertical centering must be based on the general size of the font, 
thus keeping your baseline steady. Note that the exact positioning now depends 
on the metrics provided by the font itself, so the results are not necessarily 
the same from font to font.</P>
<DIV class=tutright><A href="http://cairographics.org/tutorial/tips-font.c"><IMG 
alt="" src="Cairo Tutorial.files/tips-font.png"></A></DIV>
<DIV class=clear></DIV><PRE><CODE>cairo_font_extents_t fe;
cairo_text_extents_t te;
char alphabet[] = "AbCdEfGhIjKlMnOpQrStUvWxYz";
char letter[2];

cairo_font_extents (cr, &amp;fe);
for (i=0; i &lt; strlen(alphabet); i++) {
    *letter = '\0';
    strncat (letter, alphabet + i, 1);

    cairo_text_extents (cr, letter, &amp;te);
    cairo_move_to (cr, i + 0.5 - te.x_bearing - te.width / 2,
            0.5 - fe.descent + fe.height / 2);
    cairo_show_text (cr, letter);
}
</CODE></PRE>
<HR>

<P>Copyright © 2005–2007 Michael Urman</P></DIV>
<DIV id=footer>
<DIV class=actions>
<UL>
  <LI><A 
  href="http://cairographics.org/ikiwiki?page=tutorial&amp;do=edit">Edit</A> 
  <LI><A href="http://cairographics.org/recentchanges/">RecentChanges</A> 
  <LI><A href="http://cairographics.org/ikiwiki?do=prefs">Preferences</A> 
</LI></UL></DIV>
<DIV id=pageinfo>
<DIV id=backlinks>Links: <A href="http://cairographics.org/cairomm/">cairomm</A> 
<A href="http://cairographics.org/documentation/">documentation</A> <A 
href="http://cairographics.org/operators/">operators</A> </DIV>
<DIV class=pagedate>Last edited <SPAN class=date>Sun 05 Jun 2011 02:35:28 AM 
PDT</SPAN> </DIV></DIV><!-- from cairographics.org --></DIV></BODY></HTML>
