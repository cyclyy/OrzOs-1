!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALIGN	paging.h	14;"	d
AR	Makefile	/^AR = x86_64-pc-elf-ar$/;"	m
ASFLAGS	Makefile	/^ASFLAGS=-felf64$/;"	m
ASSERT	common.h	12;"	d
ATAPI_CMD_EJECT	ide.h	39;"	d
ATAPI_CMD_READ	ide.h	38;"	d
ATA_CMD_CACHE_FLUSH	ide.h	32;"	d
ATA_CMD_CACHE_FLUSH_EXT	ide.h	33;"	d
ATA_CMD_IDENTIFY	ide.h	36;"	d
ATA_CMD_IDENTIFY_PACKET	ide.h	35;"	d
ATA_CMD_PACKET	ide.h	34;"	d
ATA_CMD_READ_DMA	ide.h	26;"	d
ATA_CMD_READ_DMA_EXT	ide.h	27;"	d
ATA_CMD_READ_PIO	ide.h	24;"	d
ATA_CMD_READ_PIO_EXT	ide.h	25;"	d
ATA_CMD_WRITE_DMA	ide.h	30;"	d
ATA_CMD_WRITE_DMA_EXT	ide.h	31;"	d
ATA_CMD_WRITE_PIO	ide.h	28;"	d
ATA_CMD_WRITE_PIO_EXT	ide.h	29;"	d
ATA_ER_ABRT	ide.h	20;"	d
ATA_ER_AMNF	ide.h	22;"	d
ATA_ER_BBK	ide.h	15;"	d
ATA_ER_IDNF	ide.h	18;"	d
ATA_ER_MC	ide.h	17;"	d
ATA_ER_MCR	ide.h	19;"	d
ATA_ER_TK0NF	ide.h	21;"	d
ATA_ER_UNC	ide.h	16;"	d
ATA_IDENT_CAPABILITIES	ide.h	47;"	d
ATA_IDENT_COMMANDSETS	ide.h	50;"	d
ATA_IDENT_CYLINDERS	ide.h	42;"	d
ATA_IDENT_DEVICETYPE	ide.h	41;"	d
ATA_IDENT_FIELDVALID	ide.h	48;"	d
ATA_IDENT_HEADS	ide.h	43;"	d
ATA_IDENT_MAX_LBA	ide.h	49;"	d
ATA_IDENT_MAX_LBA_EXT	ide.h	52;"	d
ATA_IDENT_MODEL	ide.h	46;"	d
ATA_IDENT_SECTORS	ide.h	44;"	d
ATA_IDENT_SERIAL	ide.h	45;"	d
ATA_IDENT_UDMA	ide.h	51;"	d
ATA_MASTER	ide.h	57;"	d
ATA_PRIMARY	ide.h	79;"	d
ATA_PRIMARY_IRQ	ide.h	86;"	d
ATA_READ	ide.h	83;"	d
ATA_REG_ALTSTATUS	ide.h	75;"	d
ATA_REG_COMMAND	ide.h	68;"	d
ATA_REG_CONTROL	ide.h	74;"	d
ATA_REG_DATA	ide.h	60;"	d
ATA_REG_DEVADDRESS	ide.h	76;"	d
ATA_REG_ERROR	ide.h	61;"	d
ATA_REG_FEATURES	ide.h	62;"	d
ATA_REG_HDDEVSEL	ide.h	67;"	d
ATA_REG_LBA0	ide.h	64;"	d
ATA_REG_LBA1	ide.h	65;"	d
ATA_REG_LBA2	ide.h	66;"	d
ATA_REG_LBA3	ide.h	71;"	d
ATA_REG_LBA4	ide.h	72;"	d
ATA_REG_LBA5	ide.h	73;"	d
ATA_REG_SECCOUNT0	ide.h	63;"	d
ATA_REG_SECCOUNT1	ide.h	70;"	d
ATA_REG_STATUS	ide.h	69;"	d
ATA_SECONDARY	ide.h	80;"	d
ATA_SECONDARY_IRQ	ide.h	87;"	d
ATA_SLAVE	ide.h	58;"	d
ATA_SR_BSY	ide.h	6;"	d
ATA_SR_CORR	ide.h	11;"	d
ATA_SR_DF	ide.h	8;"	d
ATA_SR_DRDY	ide.h	7;"	d
ATA_SR_DRQ	ide.h	10;"	d
ATA_SR_DSC	ide.h	9;"	d
ATA_SR_ERR	ide.h	13;"	d
ATA_SR_IDX	ide.h	12;"	d
ATA_WRITE	ide.h	84;"	d
AT_BASE	elfdef.h	786;"	d
AT_BASE_PLATFORM	elfdef.h	816;"	d
AT_CLKTCK	elfdef.h	794;"	d
AT_DCACHEBSIZE	elfdef.h	806;"	d
AT_EGID	elfdef.h	793;"	d
AT_ENTRY	elfdef.h	788;"	d
AT_EUID	elfdef.h	791;"	d
AT_EXECFD	elfdef.h	781;"	d
AT_EXECFN	elfdef.h	820;"	d
AT_FLAGS	elfdef.h	787;"	d
AT_FPUCW	elfdef.h	803;"	d
AT_GID	elfdef.h	792;"	d
AT_HWCAP	elfdef.h	798;"	d
AT_ICACHEBSIZE	elfdef.h	807;"	d
AT_IGNORE	elfdef.h	780;"	d
AT_IGNOREPPC	elfdef.h	812;"	d
AT_L1D_CACHESHAPE	elfdef.h	830;"	d
AT_L1I_CACHESHAPE	elfdef.h	829;"	d
AT_L2_CACHESHAPE	elfdef.h	831;"	d
AT_L3_CACHESHAPE	elfdef.h	832;"	d
AT_NOTELF	elfdef.h	789;"	d
AT_NULL	elfdef.h	779;"	d
AT_PAGESZ	elfdef.h	785;"	d
AT_PHDR	elfdef.h	782;"	d
AT_PHENT	elfdef.h	783;"	d
AT_PHNUM	elfdef.h	784;"	d
AT_PLATFORM	elfdef.h	797;"	d
AT_RANDOM	elfdef.h	818;"	d
AT_SECURE	elfdef.h	814;"	d
AT_SYSINFO	elfdef.h	824;"	d
AT_SYSINFO_EHDR	elfdef.h	825;"	d
AT_UCACHEBSIZE	elfdef.h	808;"	d
AT_UID	elfdef.h	790;"	d
BASE_QUANTUM	task.c	7;"	d	file:
BLOCK_FREE	tlsf.h	35;"	d
BLOCK_OVERHEAD	tlsf.h	31;"	d
BLOCK_SIZE	tlsf.h	34;"	d
BOOTFS_H	fs/bootfs.h	2;"	d
BOOTINFO_H	bootinfo.h	20;"	d
BootFSData	fs/bootfs.c	/^struct BootFSData {$/;"	s	file:
BootInfo	bootinfo.h	/^struct BootInfo {$/;"	s
CC	Makefile	/^CC = colorgcc$/;"	m
CDEV_H	dev.h	2;"	d
CFLAGS	Makefile	/^CFLAGS=-ffreestanding -nostdlib -nostdinc -fno-builtin -fno-stack-protector -mcmodel=large -mno-red-zone -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -Wall -I. -g$/;"	m
CIS	pci.h	/^            u32int CIS;$/;"	m	struct:__anon2::__anon3::__anon4
CODE_LOAD_ADDR	sysdef.h	13;"	d
COMMON_H	common.h	2;"	d
CORE_LDFLAGS	Makefile	/^CORE_LDFLAGS=-Tcore.ld -M=allsymbol.map -z max-page-size=0x1000$/;"	m
CORE_SOURCES	Makefile	/^CORE_SOURCES = main.o util.o kmm.o vmm.o bootinfo.o dtable.o flushdtable.o isr.o interrupt.o tlsf.o kobject.o vfs.o screen.o task.o taskasm.o fs\/bootfs.o$/;"	m
CPIO_FT_DIR	cpio.h	9;"	d
CPIO_FT_FILE	cpio.h	8;"	d
CPIO_FT_MASK	cpio.h	7;"	d
CPIO_H	cpio.h	2;"	d
CPIO_MAGIC	cpio.h	6;"	d
DBG	util.h	7;"	d
DECL_SYSCALL_0	syscall.h	6;"	d
DECL_SYSCALL_1	syscall.h	7;"	d
DECL_SYSCALL_2	syscall.h	8;"	d
DECL_SYSCALL_3	syscall.h	9;"	d
DECL_SYSCALL_4	syscall.h	10;"	d
DECL_SYSCALL_5	syscall.h	11;"	d
DEFN_SYSCALL_0	syscall.h	13;"	d
DEFN_SYSCALL_1	syscall.h	21;"	d
DEFN_SYSCALL_2	syscall.h	29;"	d
DEFN_SYSCALL_3	syscall.h	38;"	d
DEFN_SYSCALL_4	syscall.h	47;"	d
DEFN_SYSCALL_5	syscall.h	56;"	d
DEF_IRQ	isr.s	/^DEF_IRQ 0,32$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 1,33$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 10,42$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 11,43$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 12,44$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 13,45$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 14,46$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 15,47$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 2,34$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 3,35$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 4,36$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 5,37$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 6,38$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 7,39$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 8,40$/;"	l
DEF_IRQ	isr.s	/^DEF_IRQ 9,41$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 10  ; invalid tss$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 11  ;$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 12  ; stack exception$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 13  ; general protection exception$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 14  ; page fault$/;"	l
DEF_ISR_ERRCODE	isr.s	/^DEF_ISR_ERRCODE 8   ; double fault$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 0 ; divide zero$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 1 ; debug exceptions$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 128$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 15 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 16 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 17 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 18 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 19 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 2 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 20 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 21 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 22 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 23 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 24 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 25 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 26 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 27 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 28 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 29 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 3 ; breakpoint$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 30 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 31 $/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 4 ; overflow$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 5 ; bounds check$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 6 ; invalid opcode$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 7 ; coprocessor not available$/;"	l
DEF_ISR_NOERRCODE	isr.s	/^DEF_ISR_NOERRCODE 9 $/;"	l
DF_1_CONFALT	elfdef.h	666;"	d
DF_1_DIRECT	elfdef.h	661;"	d
DF_1_DISPRELDNE	elfdef.h	668;"	d
DF_1_DISPRELPND	elfdef.h	669;"	d
DF_1_ENDFILTEE	elfdef.h	667;"	d
DF_1_GLOBAL	elfdef.h	654;"	d
DF_1_GROUP	elfdef.h	655;"	d
DF_1_INITFIRST	elfdef.h	658;"	d
DF_1_INTERPOSE	elfdef.h	663;"	d
DF_1_LOADFLTR	elfdef.h	657;"	d
DF_1_NODEFLIB	elfdef.h	664;"	d
DF_1_NODELETE	elfdef.h	656;"	d
DF_1_NODUMP	elfdef.h	665;"	d
DF_1_NOOPEN	elfdef.h	659;"	d
DF_1_NOW	elfdef.h	653;"	d
DF_1_ORIGIN	elfdef.h	660;"	d
DF_1_TRANS	elfdef.h	662;"	d
DF_BIND_NOW	elfdef.h	648;"	d
DF_ORIGIN	elfdef.h	645;"	d
DF_P1_GROUPPERM	elfdef.h	677;"	d
DF_P1_LAZYLOAD	elfdef.h	676;"	d
DF_STATIC_TLS	elfdef.h	649;"	d
DF_SYMBOLIC	elfdef.h	646;"	d
DF_TEXTREL	elfdef.h	647;"	d
DISK_H	disk.h	2;"	d
DTABLE_H	dtable.h	2;"	d
DTF_1_CONFEXP	elfdef.h	673;"	d
DTF_1_PARINIT	elfdef.h	672;"	d
DT_ADDRNUM	elfdef.h	617;"	d
DT_ADDRRNGHI	elfdef.h	615;"	d
DT_ADDRRNGLO	elfdef.h	603;"	d
DT_ADDRTAGIDX	elfdef.h	616;"	d
DT_ALPHA_NUM	elfdef.h	1780;"	d
DT_ALPHA_PLTRO	elfdef.h	1779;"	d
DT_AUDIT	elfdef.h	611;"	d
DT_AUXILIARY	elfdef.h	639;"	d
DT_BIND_NOW	elfdef.h	561;"	d
DT_CHECKSUM	elfdef.h	585;"	d
DT_CONFIG	elfdef.h	609;"	d
DT_DEBUG	elfdef.h	558;"	d
DT_DEPAUDIT	elfdef.h	610;"	d
DT_ENCODING	elfdef.h	568;"	d
DT_EXTRANUM	elfdef.h	642;"	d
DT_EXTRATAGIDX	elfdef.h	641;"	d
DT_FEATURE_1	elfdef.h	589;"	d
DT_FILTER	elfdef.h	640;"	d
DT_FINI	elfdef.h	550;"	d
DT_FINI_ARRAY	elfdef.h	563;"	d
DT_FINI_ARRAYSZ	elfdef.h	565;"	d
DT_FLAGS	elfdef.h	567;"	d
DT_FLAGS_1	elfdef.h	627;"	d
DT_GNU_CONFLICT	elfdef.h	607;"	d
DT_GNU_CONFLICTSZ	elfdef.h	583;"	d
DT_GNU_HASH	elfdef.h	604;"	d
DT_GNU_LIBLIST	elfdef.h	608;"	d
DT_GNU_LIBLISTSZ	elfdef.h	584;"	d
DT_GNU_PRELINKED	elfdef.h	582;"	d
DT_HASH	elfdef.h	541;"	d
DT_HIOS	elfdef.h	573;"	d
DT_HIPROC	elfdef.h	575;"	d
DT_IA_64_NUM	elfdef.h	2179;"	d
DT_IA_64_PLT_RESERVE	elfdef.h	2178;"	d
DT_INIT	elfdef.h	549;"	d
DT_INIT_ARRAY	elfdef.h	562;"	d
DT_INIT_ARRAYSZ	elfdef.h	564;"	d
DT_JMPREL	elfdef.h	560;"	d
DT_LOOS	elfdef.h	572;"	d
DT_LOPROC	elfdef.h	574;"	d
DT_MIPS_AUX_DYNAMIC	elfdef.h	1465;"	d
DT_MIPS_BASE_ADDRESS	elfdef.h	1419;"	d
DT_MIPS_COMPACT_SIZE	elfdef.h	1463;"	d
DT_MIPS_CONFLICT	elfdef.h	1421;"	d
DT_MIPS_CONFLICTNO	elfdef.h	1424;"	d
DT_MIPS_CXX_FLAGS	elfdef.h	1448;"	d
DT_MIPS_DELTA_CLASS	elfdef.h	1431;"	d
DT_MIPS_DELTA_CLASSSYM	elfdef.h	1444;"	d
DT_MIPS_DELTA_CLASSSYM_NO	elfdef.h	1446;"	d
DT_MIPS_DELTA_CLASS_NO	elfdef.h	1432;"	d
DT_MIPS_DELTA_INSTANCE	elfdef.h	1434;"	d
DT_MIPS_DELTA_INSTANCE_NO	elfdef.h	1435;"	d
DT_MIPS_DELTA_RELOC	elfdef.h	1437;"	d
DT_MIPS_DELTA_RELOC_NO	elfdef.h	1438;"	d
DT_MIPS_DELTA_SYM	elfdef.h	1440;"	d
DT_MIPS_DELTA_SYM_NO	elfdef.h	1442;"	d
DT_MIPS_DYNSTR_ALIGN	elfdef.h	1457;"	d
DT_MIPS_FLAGS	elfdef.h	1418;"	d
DT_MIPS_GOTSYM	elfdef.h	1428;"	d
DT_MIPS_GP_VALUE	elfdef.h	1464;"	d
DT_MIPS_HIDDEN_GOTIDX	elfdef.h	1453;"	d
DT_MIPS_HIPAGENO	elfdef.h	1429;"	d
DT_MIPS_ICHECKSUM	elfdef.h	1416;"	d
DT_MIPS_INTERFACE	elfdef.h	1456;"	d
DT_MIPS_INTERFACE_SIZE	elfdef.h	1458;"	d
DT_MIPS_IVERSION	elfdef.h	1417;"	d
DT_MIPS_LIBLIST	elfdef.h	1422;"	d
DT_MIPS_LIBLISTNO	elfdef.h	1425;"	d
DT_MIPS_LOCALPAGE_GOTIDX	elfdef.h	1451;"	d
DT_MIPS_LOCAL_GOTIDX	elfdef.h	1452;"	d
DT_MIPS_LOCAL_GOTNO	elfdef.h	1423;"	d
DT_MIPS_MSYM	elfdef.h	1420;"	d
DT_MIPS_NUM	elfdef.h	1472;"	d
DT_MIPS_OPTIONS	elfdef.h	1455;"	d
DT_MIPS_PERF_SUFFIX	elfdef.h	1461;"	d
DT_MIPS_PIXIE_INIT	elfdef.h	1449;"	d
DT_MIPS_PLTGOT	elfdef.h	1467;"	d
DT_MIPS_PROTECTED_GOTIDX	elfdef.h	1454;"	d
DT_MIPS_RLD_MAP	elfdef.h	1430;"	d
DT_MIPS_RLD_TEXT_RESOLVE_ADDR	elfdef.h	1459;"	d
DT_MIPS_RLD_VERSION	elfdef.h	1414;"	d
DT_MIPS_RWPLT	elfdef.h	1471;"	d
DT_MIPS_SYMBOL_LIB	elfdef.h	1450;"	d
DT_MIPS_SYMTABNO	elfdef.h	1426;"	d
DT_MIPS_TIME_STAMP	elfdef.h	1415;"	d
DT_MIPS_UNREFEXTNO	elfdef.h	1427;"	d
DT_MOVEENT	elfdef.h	587;"	d
DT_MOVESZ	elfdef.h	588;"	d
DT_MOVETAB	elfdef.h	613;"	d
DT_NEEDED	elfdef.h	538;"	d
DT_NULL	elfdef.h	537;"	d
DT_NUM	elfdef.h	571;"	d
DT_PLTGOT	elfdef.h	540;"	d
DT_PLTPAD	elfdef.h	612;"	d
DT_PLTPADSZ	elfdef.h	586;"	d
DT_PLTREL	elfdef.h	557;"	d
DT_PLTRELSZ	elfdef.h	539;"	d
DT_POSFLAG_1	elfdef.h	590;"	d
DT_PPC64_GLINK	elfdef.h	2026;"	d
DT_PPC64_NUM	elfdef.h	2029;"	d
DT_PPC64_OPD	elfdef.h	2027;"	d
DT_PPC64_OPDSZ	elfdef.h	2028;"	d
DT_PPC_GOT	elfdef.h	1902;"	d
DT_PPC_NUM	elfdef.h	1903;"	d
DT_PREINIT_ARRAY	elfdef.h	569;"	d
DT_PREINIT_ARRAYSZ	elfdef.h	570;"	d
DT_PROCNUM	elfdef.h	576;"	d
DT_REL	elfdef.h	554;"	d
DT_RELA	elfdef.h	544;"	d
DT_RELACOUNT	elfdef.h	623;"	d
DT_RELAENT	elfdef.h	546;"	d
DT_RELASZ	elfdef.h	545;"	d
DT_RELCOUNT	elfdef.h	624;"	d
DT_RELENT	elfdef.h	556;"	d
DT_RELSZ	elfdef.h	555;"	d
DT_RPATH	elfdef.h	552;"	d
DT_RUNPATH	elfdef.h	566;"	d
DT_SONAME	elfdef.h	551;"	d
DT_SPARC_NUM	elfdef.h	1135;"	d
DT_SPARC_REGISTER	elfdef.h	1134;"	d
DT_STRSZ	elfdef.h	547;"	d
DT_STRTAB	elfdef.h	542;"	d
DT_SYMBOLIC	elfdef.h	553;"	d
DT_SYMENT	elfdef.h	548;"	d
DT_SYMINENT	elfdef.h	593;"	d
DT_SYMINFO	elfdef.h	614;"	d
DT_SYMINSZ	elfdef.h	592;"	d
DT_SYMTAB	elfdef.h	543;"	d
DT_TEXTREL	elfdef.h	559;"	d
DT_TLSDESC_GOT	elfdef.h	606;"	d
DT_TLSDESC_PLT	elfdef.h	605;"	d
DT_VALNUM	elfdef.h	596;"	d
DT_VALRNGHI	elfdef.h	594;"	d
DT_VALRNGLO	elfdef.h	581;"	d
DT_VALTAGIDX	elfdef.h	595;"	d
DT_VERDEF	elfdef.h	628;"	d
DT_VERDEFNUM	elfdef.h	630;"	d
DT_VERNEED	elfdef.h	631;"	d
DT_VERNEEDNUM	elfdef.h	633;"	d
DT_VERSIONTAGIDX	elfdef.h	634;"	d
DT_VERSIONTAGNUM	elfdef.h	635;"	d
DT_VERSYM	elfdef.h	621;"	d
DirectoryRecord	vfs.h	/^struct DirectoryRecord$/;"	s
E2BIG	errno.h	10;"	d
EACCES	errno.h	16;"	d
EAGAIN	errno.h	14;"	d
EBADF	errno.h	12;"	d
EBUSY	errno.h	19;"	d
ECHILD	errno.h	13;"	d
EDOM	errno.h	36;"	d
EEXIST	errno.h	20;"	d
EFAULT	errno.h	17;"	d
EFA_PARISC_1_0	elfdef.h	1535;"	d
EFA_PARISC_1_1	elfdef.h	1536;"	d
EFA_PARISC_2_0	elfdef.h	1537;"	d
EFBIG	errno.h	30;"	d
EF_ALPHA_32BIT	elfdef.h	1715;"	d
EF_ALPHA_CANRELAX	elfdef.h	1716;"	d
EF_ARM_ALIGN8	elfdef.h	2041;"	d
EF_ARM_APCS_26	elfdef.h	2038;"	d
EF_ARM_APCS_FLOAT	elfdef.h	2039;"	d
EF_ARM_BE8	elfdef.h	2057;"	d
EF_ARM_DYNSYMSUSESEGIDX	elfdef.h	2052;"	d
EF_ARM_EABIMASK	elfdef.h	2054;"	d
EF_ARM_EABI_UNKNOWN	elfdef.h	2061;"	d
EF_ARM_EABI_VER1	elfdef.h	2062;"	d
EF_ARM_EABI_VER2	elfdef.h	2063;"	d
EF_ARM_EABI_VER3	elfdef.h	2064;"	d
EF_ARM_EABI_VER4	elfdef.h	2065;"	d
EF_ARM_EABI_VER5	elfdef.h	2066;"	d
EF_ARM_EABI_VERSION	elfdef.h	2060;"	d
EF_ARM_HASENTRY	elfdef.h	2036;"	d
EF_ARM_INTERWORK	elfdef.h	2037;"	d
EF_ARM_LE8	elfdef.h	2058;"	d
EF_ARM_MAPSYMSFIRST	elfdef.h	2053;"	d
EF_ARM_MAVERICK_FLOAT	elfdef.h	2046;"	d
EF_ARM_NEW_ABI	elfdef.h	2042;"	d
EF_ARM_OLD_ABI	elfdef.h	2043;"	d
EF_ARM_PIC	elfdef.h	2040;"	d
EF_ARM_RELEXEC	elfdef.h	2035;"	d
EF_ARM_SOFT_FLOAT	elfdef.h	2044;"	d
EF_ARM_SYMSARESORTED	elfdef.h	2051;"	d
EF_ARM_VFP_FLOAT	elfdef.h	2045;"	d
EF_CPU32	elfdef.h	896;"	d
EF_IA_64_ABI64	elfdef.h	2156;"	d
EF_IA_64_ARCH	elfdef.h	2157;"	d
EF_IA_64_MASKOS	elfdef.h	2155;"	d
EF_MIPS_64BIT_WHIRL	elfdef.h	1156;"	d
EF_MIPS_ABI2	elfdef.h	1157;"	d
EF_MIPS_ABI_ON32	elfdef.h	1158;"	d
EF_MIPS_ARCH	elfdef.h	1159;"	d
EF_MIPS_ARCH_1	elfdef.h	1163;"	d
EF_MIPS_ARCH_2	elfdef.h	1164;"	d
EF_MIPS_ARCH_3	elfdef.h	1165;"	d
EF_MIPS_ARCH_32	elfdef.h	1168;"	d
EF_MIPS_ARCH_4	elfdef.h	1166;"	d
EF_MIPS_ARCH_5	elfdef.h	1167;"	d
EF_MIPS_ARCH_64	elfdef.h	1169;"	d
EF_MIPS_CPIC	elfdef.h	1154;"	d
EF_MIPS_NOREORDER	elfdef.h	1152;"	d
EF_MIPS_PIC	elfdef.h	1153;"	d
EF_MIPS_XGOT	elfdef.h	1155;"	d
EF_PARISC_ARCH	elfdef.h	1531;"	d
EF_PARISC_EXT	elfdef.h	1525;"	d
EF_PARISC_LAZYSWAP	elfdef.h	1530;"	d
EF_PARISC_LSB	elfdef.h	1526;"	d
EF_PARISC_NO_KABP	elfdef.h	1528;"	d
EF_PARISC_TRAPNIL	elfdef.h	1524;"	d
EF_PARISC_WIDE	elfdef.h	1527;"	d
EF_PPC_EMB	elfdef.h	1785;"	d
EF_PPC_RELOCATABLE	elfdef.h	1788;"	d
EF_PPC_RELOCATABLE_LIB	elfdef.h	1789;"	d
EF_S390_HIGH_GPRS	elfdef.h	2335;"	d
EF_SH1	elfdef.h	2269;"	d
EF_SH2	elfdef.h	2270;"	d
EF_SH2A	elfdef.h	2279;"	d
EF_SH2A_NOFPU	elfdef.h	2283;"	d
EF_SH2A_SH3E	elfdef.h	2288;"	d
EF_SH2A_SH3_NOFPU	elfdef.h	2286;"	d
EF_SH2A_SH4	elfdef.h	2287;"	d
EF_SH2A_SH4_NOFPU	elfdef.h	2285;"	d
EF_SH2E	elfdef.h	2277;"	d
EF_SH3	elfdef.h	2271;"	d
EF_SH3E	elfdef.h	2275;"	d
EF_SH3_DSP	elfdef.h	2273;"	d
EF_SH3_NOMMU	elfdef.h	2284;"	d
EF_SH4	elfdef.h	2276;"	d
EF_SH4A	elfdef.h	2278;"	d
EF_SH4AL_DSP	elfdef.h	2274;"	d
EF_SH4A_NOFPU	elfdef.h	2281;"	d
EF_SH4_NOFPU	elfdef.h	2280;"	d
EF_SH4_NOMMU_NOFPU	elfdef.h	2282;"	d
EF_SH_DSP	elfdef.h	2272;"	d
EF_SH_MACH_MASK	elfdef.h	2267;"	d
EF_SH_UNKNOWN	elfdef.h	2268;"	d
EF_SPARCV9_MM	elfdef.h	1020;"	d
EF_SPARCV9_PSO	elfdef.h	1022;"	d
EF_SPARCV9_RMO	elfdef.h	1023;"	d
EF_SPARCV9_TSO	elfdef.h	1021;"	d
EF_SPARC_32PLUS	elfdef.h	1026;"	d
EF_SPARC_EXT_MASK	elfdef.h	1025;"	d
EF_SPARC_HAL_R1	elfdef.h	1028;"	d
EF_SPARC_LEDATA	elfdef.h	1024;"	d
EF_SPARC_SUN_US1	elfdef.h	1027;"	d
EF_SPARC_SUN_US3	elfdef.h	1029;"	d
EINTR	errno.h	7;"	d
EINVAL	errno.h	25;"	d
EIO	errno.h	8;"	d
EISDIR	errno.h	24;"	d
EI_ABIVERSION	elfdef.h	122;"	d
EI_CLASS	elfdef.h	90;"	d
EI_DATA	elfdef.h	96;"	d
EI_MAG0	elfdef.h	74;"	d
EI_MAG1	elfdef.h	77;"	d
EI_MAG2	elfdef.h	80;"	d
EI_MAG3	elfdef.h	83;"	d
EI_NIDENT	elfdef.h	50;"	d
EI_OSABI	elfdef.h	105;"	d
EI_PAD	elfdef.h	124;"	d
EI_VERSION	elfdef.h	102;"	d
ELF32_R_INFO	elfdef.h	439;"	d
ELF32_R_SYM	elfdef.h	437;"	d
ELF32_R_TYPE	elfdef.h	438;"	d
ELF32_ST_BIND	elfdef.h	367;"	d
ELF32_ST_INFO	elfdef.h	369;"	d
ELF32_ST_TYPE	elfdef.h	368;"	d
ELF32_ST_VISIBILITY	elfdef.h	409;"	d
ELFCLASS32	elfdef.h	92;"	d
ELFCLASS64	elfdef.h	93;"	d
ELFCLASSNONE	elfdef.h	91;"	d
ELFCLASSNUM	elfdef.h	94;"	d
ELFDATA2LSB	elfdef.h	98;"	d
ELFDATA2MSB	elfdef.h	99;"	d
ELFDATANONE	elfdef.h	97;"	d
ELFDATANUM	elfdef.h	100;"	d
ELFDEF_H	elfdef.h	22;"	d
ELFMAG	elfdef.h	87;"	d
ELFMAG0	elfdef.h	75;"	d
ELFMAG1	elfdef.h	78;"	d
ELFMAG2	elfdef.h	81;"	d
ELFMAG3	elfdef.h	84;"	d
ELFOSABI_AIX	elfdef.h	112;"	d
ELFOSABI_ARM	elfdef.h	119;"	d
ELFOSABI_ARM_AEABI	elfdef.h	118;"	d
ELFOSABI_FREEBSD	elfdef.h	114;"	d
ELFOSABI_HPUX	elfdef.h	108;"	d
ELFOSABI_IRIX	elfdef.h	113;"	d
ELFOSABI_LINUX	elfdef.h	110;"	d
ELFOSABI_MODESTO	elfdef.h	116;"	d
ELFOSABI_NETBSD	elfdef.h	109;"	d
ELFOSABI_NONE	elfdef.h	106;"	d
ELFOSABI_OPENBSD	elfdef.h	117;"	d
ELFOSABI_SOLARIS	elfdef.h	111;"	d
ELFOSABI_STANDALONE	elfdef.h	120;"	d
ELFOSABI_SYSV	elfdef.h	107;"	d
ELFOSABI_TRU64	elfdef.h	115;"	d
ELF_H	elf.h	2;"	d
ELF_NOTE_ABI	elfdef.h	868;"	d
ELF_NOTE_GNU	elfdef.h	850;"	d
ELF_NOTE_OS_FREEBSD	elfdef.h	875;"	d
ELF_NOTE_OS_GNU	elfdef.h	873;"	d
ELF_NOTE_OS_LINUX	elfdef.h	872;"	d
ELF_NOTE_OS_SOLARIS2	elfdef.h	874;"	d
ELF_NOTE_PAGESIZE_HINT	elfdef.h	856;"	d
ELF_NOTE_SOLARIS	elfdef.h	847;"	d
EMFILE	errno.h	27;"	d
EMLINK	errno.h	34;"	d
EM_386	elfdef.h	144;"	d
EM_68HC05	elfdef.h	195;"	d
EM_68HC08	elfdef.h	194;"	d
EM_68HC11	elfdef.h	193;"	d
EM_68HC12	elfdef.h	177;"	d
EM_68HC16	elfdef.h	192;"	d
EM_68K	elfdef.h	145;"	d
EM_860	elfdef.h	147;"	d
EM_88K	elfdef.h	146;"	d
EM_960	elfdef.h	155;"	d
EM_ALPHA	elfdef.h	224;"	d
EM_ARC	elfdef.h	169;"	d
EM_ARC_A5	elfdef.h	216;"	d
EM_ARM	elfdef.h	164;"	d
EM_AVR	elfdef.h	206;"	d
EM_COLDFIRE	elfdef.h	176;"	d
EM_CRIS	elfdef.h	199;"	d
EM_D10V	elfdef.h	208;"	d
EM_D30V	elfdef.h	209;"	d
EM_FAKE_ALPHA	elfdef.h	165;"	d
EM_FIREPATH	elfdef.h	201;"	d
EM_FR20	elfdef.h	161;"	d
EM_FR30	elfdef.h	207;"	d
EM_FX66	elfdef.h	189;"	d
EM_H8S	elfdef.h	172;"	d
EM_H8_300	elfdef.h	170;"	d
EM_H8_300H	elfdef.h	171;"	d
EM_H8_500	elfdef.h	173;"	d
EM_HUANY	elfdef.h	204;"	d
EM_IA_64	elfdef.h	174;"	d
EM_JAVELIN	elfdef.h	200;"	d
EM_M32	elfdef.h	142;"	d
EM_M32R	elfdef.h	211;"	d
EM_ME16	elfdef.h	183;"	d
EM_MIPS	elfdef.h	148;"	d
EM_MIPS_RS3_LE	elfdef.h	150;"	d
EM_MIPS_X	elfdef.h	175;"	d
EM_MMA	elfdef.h	178;"	d
EM_MMIX	elfdef.h	203;"	d
EM_MN10200	elfdef.h	213;"	d
EM_MN10300	elfdef.h	212;"	d
EM_NCPU	elfdef.h	180;"	d
EM_NDR1	elfdef.h	181;"	d
EM_NONE	elfdef.h	141;"	d
EM_NUM	elfdef.h	218;"	d
EM_OPENRISC	elfdef.h	215;"	d
EM_PARISC	elfdef.h	152;"	d
EM_PCP	elfdef.h	179;"	d
EM_PDSP	elfdef.h	187;"	d
EM_PJ	elfdef.h	214;"	d
EM_PPC	elfdef.h	156;"	d
EM_PPC64	elfdef.h	157;"	d
EM_PRISM	elfdef.h	205;"	d
EM_RCE	elfdef.h	163;"	d
EM_RH32	elfdef.h	162;"	d
EM_S370	elfdef.h	149;"	d
EM_S390	elfdef.h	158;"	d
EM_SH	elfdef.h	166;"	d
EM_SPARC	elfdef.h	143;"	d
EM_SPARC32PLUS	elfdef.h	154;"	d
EM_SPARCV9	elfdef.h	167;"	d
EM_ST100	elfdef.h	184;"	d
EM_ST19	elfdef.h	197;"	d
EM_ST7	elfdef.h	191;"	d
EM_ST9PLUS	elfdef.h	190;"	d
EM_STARCORE	elfdef.h	182;"	d
EM_SVX	elfdef.h	196;"	d
EM_TINYJ	elfdef.h	185;"	d
EM_TRICORE	elfdef.h	168;"	d
EM_V800	elfdef.h	160;"	d
EM_V850	elfdef.h	210;"	d
EM_VAX	elfdef.h	198;"	d
EM_VPP500	elfdef.h	153;"	d
EM_X86_64	elfdef.h	186;"	d
EM_XTENSA	elfdef.h	217;"	d
EM_ZSP	elfdef.h	202;"	d
ENFILE	errno.h	26;"	d
ENODEV	errno.h	22;"	d
ENOENT	errno.h	5;"	d
ENOEXEC	errno.h	11;"	d
ENOMEM	errno.h	15;"	d
ENOSPC	errno.h	31;"	d
ENOTBLK	errno.h	18;"	d
ENOTDIR	errno.h	23;"	d
ENOTTY	errno.h	28;"	d
ENXIO	errno.h	9;"	d
EPERM	errno.h	4;"	d
EPIPE	errno.h	35;"	d
ERANGE	errno.h	37;"	d
EROFS	errno.h	33;"	d
ERRNO_H	errno.h	2;"	d
ESPIPE	errno.h	32;"	d
ESRCH	errno.h	6;"	d
ETXTBSY	errno.h	29;"	d
ET_CORE	elfdef.h	132;"	d
ET_DYN	elfdef.h	131;"	d
ET_EXEC	elfdef.h	130;"	d
ET_HIOS	elfdef.h	135;"	d
ET_HIPROC	elfdef.h	137;"	d
ET_LOOS	elfdef.h	134;"	d
ET_LOPROC	elfdef.h	136;"	d
ET_NONE	elfdef.h	128;"	d
ET_NUM	elfdef.h	133;"	d
ET_REL	elfdef.h	129;"	d
EV_CURRENT	elfdef.h	229;"	d
EV_NONE	elfdef.h	228;"	d
EV_NUM	elfdef.h	230;"	d
EXDEV	errno.h	21;"	d
EXT2FS_H	fs/ext2fs.h	2;"	d
EXT2_BAD_INO	fs/ext2fs.h	81;"	d
EXT2_BOOT_LOADER_INO	fs/ext2fs.h	83;"	d
EXT2_DENTRY_BASE_LEN	fs/ext2fs.h	260;"	d
EXT2_DIND_BLOCK	fs/ext2fs.h	91;"	d
EXT2_DYNAMIC_REV	fs/ext2fs.h	35;"	d
EXT2_ERRORS_CONTINUE	fs/ext2fs.h	17;"	d
EXT2_ERRORS_DEFAULT	fs/ext2fs.h	20;"	d
EXT2_ERRORS_PANIC	fs/ext2fs.h	19;"	d
EXT2_ERRORS_RO	fs/ext2fs.h	18;"	d
EXT2_ERROR_FS	fs/ext2fs.h	12;"	d
EXT2_FEATURE_COMPAT_ANY	fs/ext2fs.h	44;"	d
EXT2_FEATURE_COMPAT_DIR_INDEX	fs/ext2fs.h	43;"	d
EXT2_FEATURE_COMPAT_DIR_PREALLOC	fs/ext2fs.h	38;"	d
EXT2_FEATURE_COMPAT_EXT_ATTR	fs/ext2fs.h	41;"	d
EXT2_FEATURE_COMPAT_IMAGIC_INODES	fs/ext2fs.h	39;"	d
EXT2_FEATURE_COMPAT_RESIZE_INO	fs/ext2fs.h	42;"	d
EXT2_FEATURE_INCOMPAT_ANY	fs/ext2fs.h	56;"	d
EXT2_FEATURE_INCOMPAT_COMPRESSION	fs/ext2fs.h	51;"	d
EXT2_FEATURE_INCOMPAT_FILETYPE	fs/ext2fs.h	52;"	d
EXT2_FEATURE_INCOMPAT_META_BG	fs/ext2fs.h	55;"	d
EXT2_FEATURE_RO_COMPAT_ANY	fs/ext2fs.h	49;"	d
EXT2_FEATURE_RO_COMPAT_BTREE_DIR	fs/ext2fs.h	48;"	d
EXT2_FEATURE_RO_COMPAT_LARGE_FILE	fs/ext2fs.h	47;"	d
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER	fs/ext2fs.h	46;"	d
EXT2_FT_BLKDEV	fs/ext2fs.h	/^    EXT2_FT_BLKDEV      = 4,$/;"	e	enum:__anon8
EXT2_FT_CHRDEV	fs/ext2fs.h	/^    EXT2_FT_CHRDEV      = 3,$/;"	e	enum:__anon8
EXT2_FT_DIR	fs/ext2fs.h	/^    EXT2_FT_DIR     = 2,$/;"	e	enum:__anon8
EXT2_FT_FIFO	fs/ext2fs.h	/^    EXT2_FT_FIFO        = 5,$/;"	e	enum:__anon8
EXT2_FT_MAX	fs/ext2fs.h	/^    EXT2_FT_MAX$/;"	e	enum:__anon8
EXT2_FT_REG_FILE	fs/ext2fs.h	/^    EXT2_FT_REG_FILE    = 1,$/;"	e	enum:__anon8
EXT2_FT_SOCK	fs/ext2fs.h	/^    EXT2_FT_SOCK        = 6,$/;"	e	enum:__anon8
EXT2_FT_SYMLINK	fs/ext2fs.h	/^    EXT2_FT_SYMLINK     = 7,$/;"	e	enum:__anon8
EXT2_FT_UNKNOWN	fs/ext2fs.h	/^    EXT2_FT_UNKNOWN     = 0,$/;"	e	enum:__anon8
EXT2_GOOD_OLD_REV	fs/ext2fs.h	34;"	d
EXT2_IND_BLOCK	fs/ext2fs.h	90;"	d
EXT2_MAGIC	fs/ext2fs.h	6;"	d
EXT2_NAME_LEN	fs/ext2fs.h	259;"	d
EXT2_NDIR_BLOCKS	fs/ext2fs.h	89;"	d
EXT2_N_BLOCKS	fs/ext2fs.h	93;"	d
EXT2_OS_FREEBSD	fs/ext2fs.h	28;"	d
EXT2_OS_HURD	fs/ext2fs.h	26;"	d
EXT2_OS_LINUX	fs/ext2fs.h	25;"	d
EXT2_OS_LITES	fs/ext2fs.h	29;"	d
EXT2_OS_MASIX	fs/ext2fs.h	27;"	d
EXT2_ROOT_INO	fs/ext2fs.h	82;"	d
EXT2_S_IFBLK	fs/ext2fs.h	61;"	d
EXT2_S_IFCHR	fs/ext2fs.h	63;"	d
EXT2_S_IFDIR	fs/ext2fs.h	62;"	d
EXT2_S_IFIFO	fs/ext2fs.h	64;"	d
EXT2_S_IFLNK	fs/ext2fs.h	59;"	d
EXT2_S_IFREG	fs/ext2fs.h	60;"	d
EXT2_S_IFSOCK	fs/ext2fs.h	58;"	d
EXT2_S_IRGRP	fs/ext2fs.h	71;"	d
EXT2_S_IROTH	fs/ext2fs.h	74;"	d
EXT2_S_IRUSR	fs/ext2fs.h	68;"	d
EXT2_S_ISGID	fs/ext2fs.h	66;"	d
EXT2_S_ISUID	fs/ext2fs.h	65;"	d
EXT2_S_ISVTX	fs/ext2fs.h	67;"	d
EXT2_S_IWGRP	fs/ext2fs.h	72;"	d
EXT2_S_IWOTH	fs/ext2fs.h	75;"	d
EXT2_S_IWUSR	fs/ext2fs.h	69;"	d
EXT2_S_IXGRP	fs/ext2fs.h	73;"	d
EXT2_S_IXOTH	fs/ext2fs.h	76;"	d
EXT2_S_IXUSR	fs/ext2fs.h	70;"	d
EXT2_TIND_BLOCK	fs/ext2fs.h	92;"	d
EXT2_UNDEL_DIR_INO	fs/ext2fs.h	84;"	d
EXT2_VALID_FS	fs/ext2fs.h	11;"	d
EXT3_FEATURE_COMPAT_HAS_JOURNAL	fs/ext2fs.h	40;"	d
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV	fs/ext2fs.h	54;"	d
EXT3_FEATURE_INCOMPAT_RECOVER	fs/ext2fs.h	53;"	d
E_MIPS_ARCH_1	elfdef.h	1173;"	d
E_MIPS_ARCH_2	elfdef.h	1174;"	d
E_MIPS_ARCH_3	elfdef.h	1175;"	d
E_MIPS_ARCH_32	elfdef.h	1178;"	d
E_MIPS_ARCH_4	elfdef.h	1176;"	d
E_MIPS_ARCH_5	elfdef.h	1177;"	d
E_MIPS_ARCH_64	elfdef.h	1179;"	d
Elf32_Addr	elfdef.h	/^typedef u32int Elf32_Addr;$/;"	t
Elf32_Conflict	elfdef.h	/^typedef Elf32_Addr Elf32_Conflict;$/;"	t
Elf32_Dyn	elfdef.h	/^} Elf32_Dyn;$/;"	t	typeref:struct:__anon30
Elf32_Ehdr	elfdef.h	/^} Elf32_Ehdr;$/;"	t	typeref:struct:__anon23
Elf32_Half	elfdef.h	/^typedef u16int Elf32_Half;$/;"	t
Elf32_Lib	elfdef.h	/^} Elf32_Lib;$/;"	t	typeref:struct:__anon45
Elf32_Nhdr	elfdef.h	/^} Elf32_Nhdr;$/;"	t	typeref:struct:__anon38
Elf32_Off	elfdef.h	/^typedef u32int Elf32_Off;$/;"	t
Elf32_Phdr	elfdef.h	/^} Elf32_Phdr;$/;"	t	typeref:struct:__anon29
Elf32_RegInfo	elfdef.h	/^} Elf32_RegInfo;$/;"	t	typeref:struct:__anon42
Elf32_Rel	elfdef.h	/^} Elf32_Rel;$/;"	t	typeref:struct:__anon27
Elf32_Rela	elfdef.h	/^} Elf32_Rela;$/;"	t	typeref:struct:__anon28
Elf32_Section	elfdef.h	/^typedef u16int Elf32_Section;$/;"	t
Elf32_Shdr	elfdef.h	/^} Elf32_Shdr;$/;"	t	typeref:struct:__anon24
Elf32_Sword	elfdef.h	/^typedef	s32int  Elf32_Sword;$/;"	t
Elf32_Sym	elfdef.h	/^} Elf32_Sym;$/;"	t	typeref:struct:__anon25
Elf32_Syminfo	elfdef.h	/^} Elf32_Syminfo;$/;"	t	typeref:struct:__anon26
Elf32_Verdaux	elfdef.h	/^} Elf32_Verdaux;$/;"	t	typeref:struct:__anon33
Elf32_Verdef	elfdef.h	/^} Elf32_Verdef;$/;"	t	typeref:struct:__anon32
Elf32_Vernaux	elfdef.h	/^} Elf32_Vernaux;$/;"	t	typeref:struct:__anon35
Elf32_Verneed	elfdef.h	/^} Elf32_Verneed;$/;"	t	typeref:struct:__anon34
Elf32_Versym	elfdef.h	/^typedef Elf32_Half Elf32_Versym;$/;"	t
Elf32_Word	elfdef.h	/^typedef u32int Elf32_Word;$/;"	t
Elf32_auxv_t	elfdef.h	/^} Elf32_auxv_t;$/;"	t	typeref:struct:__anon36
Elf32_gptab	elfdef.h	/^} Elf32_gptab;$/;"	t	typeref:union:__anon39
Elf_Options	elfdef.h	/^} Elf_Options;$/;"	t	typeref:struct:__anon43
Elf_Options_Hw	elfdef.h	/^} Elf_Options_Hw;$/;"	t	typeref:struct:__anon44
FD_INVALID	file.h	6;"	d
FILE_H	file.h	2;"	d
FLI_OFFSET	tlsf.h	27;"	d
FLOOR_PAGE_ALIGN	kmm.h	25;"	d
FileSystem	vfs.h	/^struct FileSystem$/;"	s
FileSystemDriver	vfs.h	/^struct FileSystemDriver$/;"	s
FileSystemDriverOperation	vfs.h	/^struct FileSystemDriverOperation$/;"	s
FileSystemOperation	vfs.h	/^struct FileSystemOperation$/;"	s
GDTEntry	dtable.h	/^struct GDTEntry {$/;"	s
GDTPtr	dtable.h	/^struct GDTPtr {$/;"	s
GRP_COMDAT	elfdef.h	325;"	d
HEAP_START_ADDR	sysdef.h	12;"	d
HIGHMEM_START_ADDR	sysdef.h	11;"	d
HWCAP_SPARC_BLKINIT	elfdef.h	1145;"	d
HWCAP_SPARC_FLUSH	elfdef.h	1139;"	d
HWCAP_SPARC_MULDIV	elfdef.h	1142;"	d
HWCAP_SPARC_N2	elfdef.h	1146;"	d
HWCAP_SPARC_STBAR	elfdef.h	1140;"	d
HWCAP_SPARC_SWAP	elfdef.h	1141;"	d
HWCAP_SPARC_ULTRA3	elfdef.h	1144;"	d
HWCAP_SPARC_V9	elfdef.h	1143;"	d
HZ	timer.h	6;"	d
I8042_H	i8042.h	2;"	d
IDE_ATA	ide.h	54;"	d
IDE_ATAPI	ide.h	55;"	d
IDE_H	ide.h	2;"	d
IDTEntry	dtable.h	/^struct IDTEntry {$/;"	s
IDTPtr	dtable.h	/^struct IDTPtr {$/;"	s
IDX_FROM_BITS	paging.c	7;"	d	file:
INITRDFS_H	fs/initrdfs.h	2;"	d
INITRDFS_MAGIC	fs/initrdfs.h	7;"	d
INTERRUPT_H	interrupt.h	2;"	d
INVLPG	kmm.c	24;"	d	file:
INVLPG	paging.h	13;"	d
IO_BITMAP_BITS	dtable.h	6;"	d
IO_BITMAP_BYTES	dtable.h	7;"	d
IO_BITMAP_LONGS	dtable.h	8;"	d
IRQ0	interrupt.h	6;"	d
IRQ1	interrupt.h	7;"	d
IRQ10	interrupt.h	16;"	d
IRQ11	interrupt.h	17;"	d
IRQ12	interrupt.h	18;"	d
IRQ13	interrupt.h	19;"	d
IRQ14	interrupt.h	20;"	d
IRQ15	interrupt.h	21;"	d
IRQ2	interrupt.h	8;"	d
IRQ3	interrupt.h	9;"	d
IRQ4	interrupt.h	10;"	d
IRQ5	interrupt.h	11;"	d
IRQ6	interrupt.h	12;"	d
IRQ7	interrupt.h	13;"	d
IRQ8	interrupt.h	14;"	d
IRQ9	interrupt.h	15;"	d
IsrHandlerFunc	interrupt.h	/^typedef void (*IsrHandlerFunc)(struct RegisterState *);$/;"	t
KDIR_OP_ADDOBJECT	kobject.c	7;"	d	file:
KDIR_OP_FINDDIR	kobject.c	5;"	d	file:
KDIR_OP_READDIR	kobject.c	6;"	d	file:
KDIR_OP_REMOVEOBJECT	kobject.c	8;"	d	file:
KDirectoryObjectData	kobject.c	/^struct KDirectoryObjectData$/;"	s	file:
KDirectoryProcessData	kobject.c	/^struct KDirectoryProcessData$/;"	s	file:
KERNEL_STACK_SIZE	sysdef.h	10;"	d
KERNEL_STACK_SIZE	task2.h	10;"	d
KERNEL_STACK_START	task2.h	9;"	d
KERNEL_STACK_TOP	sysdef.h	9;"	d
KEY_H	key.h	2;"	d
KMM_H	kmm.h	20;"	d
KOBJECT_H	kobject.h	2;"	d
KOD	kobject.h	/^struct KOD$/;"	s
KObject	kobject.h	/^struct KObject$/;"	s
KObjectListNode	kobject.c	/^struct KObjectListNode$/;"	s	file:
Key_0	key.h	96;"	d
Key_1	key.h	97;"	d
Key_2	key.h	98;"	d
Key_3	key.h	99;"	d
Key_4	key.h	100;"	d
Key_5	key.h	101;"	d
Key_6	key.h	102;"	d
Key_7	key.h	103;"	d
Key_8	key.h	104;"	d
Key_9	key.h	105;"	d
Key_A	key.h	113;"	d
Key_Ampersand	key.h	86;"	d
Key_Any	key.h	80;"	d
Key_Apostrophe	key.h	87;"	d
Key_AsciiCircum	key.h	142;"	d
Key_AsciiTilde	key.h	148;"	d
Key_Asterisk	key.h	90;"	d
Key_At	key.h	112;"	d
Key_B	key.h	114;"	d
Key_Backslash	key.h	140;"	d
Key_Backspace	key.h	9;"	d
Key_Backtab	key.h	8;"	d
Key_Bar	key.h	146;"	d
Key_BraceLeft	key.h	145;"	d
Key_BraceRight	key.h	147;"	d
Key_BracketLeft	key.h	139;"	d
Key_BracketRight	key.h	141;"	d
Key_C	key.h	115;"	d
Key_CapsLock	key.h	33;"	d
Key_Clear	key.h	17;"	d
Key_Colon	key.h	106;"	d
Key_Comma	key.h	92;"	d
Key_D	key.h	116;"	d
Key_Delete	key.h	13;"	d
Key_Direction_L	key.h	77;"	d
Key_Direction_R	key.h	78;"	d
Key_Dollar	key.h	84;"	d
Key_Down	key.h	23;"	d
Key_E	key.h	117;"	d
Key_End	key.h	19;"	d
Key_Enter	key.h	11;"	d
Key_Equal	key.h	109;"	d
Key_Escape	key.h	6;"	d
Key_Exclam	key.h	81;"	d
Key_F	key.h	118;"	d
Key_F1	key.h	36;"	d
Key_F10	key.h	45;"	d
Key_F11	key.h	46;"	d
Key_F12	key.h	47;"	d
Key_F13	key.h	48;"	d
Key_F14	key.h	49;"	d
Key_F15	key.h	50;"	d
Key_F16	key.h	51;"	d
Key_F17	key.h	52;"	d
Key_F18	key.h	53;"	d
Key_F19	key.h	54;"	d
Key_F2	key.h	37;"	d
Key_F20	key.h	55;"	d
Key_F21	key.h	56;"	d
Key_F22	key.h	57;"	d
Key_F23	key.h	58;"	d
Key_F24	key.h	59;"	d
Key_F25	key.h	60;"	d
Key_F26	key.h	61;"	d
Key_F27	key.h	62;"	d
Key_F28	key.h	63;"	d
Key_F29	key.h	64;"	d
Key_F3	key.h	38;"	d
Key_F30	key.h	65;"	d
Key_F31	key.h	66;"	d
Key_F32	key.h	67;"	d
Key_F33	key.h	68;"	d
Key_F34	key.h	69;"	d
Key_F35	key.h	70;"	d
Key_F4	key.h	39;"	d
Key_F5	key.h	40;"	d
Key_F6	key.h	41;"	d
Key_F7	key.h	42;"	d
Key_F8	key.h	43;"	d
Key_F9	key.h	44;"	d
Key_G	key.h	119;"	d
Key_Greater	key.h	110;"	d
Key_H	key.h	120;"	d
Key_Help	key.h	76;"	d
Key_Home	key.h	18;"	d
Key_Hyper_L	key.h	74;"	d
Key_Hyper_R	key.h	75;"	d
Key_I	key.h	121;"	d
Key_Insert	key.h	12;"	d
Key_J	key.h	122;"	d
Key_K	key.h	123;"	d
Key_L	key.h	124;"	d
Key_Left	key.h	20;"	d
Key_LeftAlt	key.h	31;"	d
Key_LeftControl	key.h	28;"	d
Key_LeftShift	key.h	26;"	d
Key_Less	key.h	108;"	d
Key_M	key.h	125;"	d
Key_Menu	key.h	73;"	d
Key_Meta	key.h	30;"	d
Key_Minus	key.h	93;"	d
Key_N	key.h	126;"	d
Key_NumLock	key.h	34;"	d
Key_NumberSign	key.h	83;"	d
Key_O	key.h	127;"	d
Key_P	key.h	128;"	d
Key_PageDown	key.h	25;"	d
Key_PageUp	key.h	24;"	d
Key_ParenLeft	key.h	88;"	d
Key_ParenRight	key.h	89;"	d
Key_Pause	key.h	14;"	d
Key_Percent	key.h	85;"	d
Key_Period	key.h	94;"	d
Key_Plus	key.h	91;"	d
Key_Print	key.h	15;"	d
Key_Q	key.h	129;"	d
Key_Question	key.h	111;"	d
Key_QuoteDbl	key.h	82;"	d
Key_QuoteLeft	key.h	144;"	d
Key_R	key.h	130;"	d
Key_Release_Mask	key.h	4;"	d
Key_Return	key.h	10;"	d
Key_Right	key.h	22;"	d
Key_RightAlt	key.h	32;"	d
Key_RightControl	key.h	29;"	d
Key_RightShift	key.h	27;"	d
Key_S	key.h	131;"	d
Key_ScrollLock	key.h	35;"	d
Key_Semicolon	key.h	107;"	d
Key_Slash	key.h	95;"	d
Key_Space	key.h	79;"	d
Key_Super_L	key.h	71;"	d
Key_Super_R	key.h	72;"	d
Key_SysReq	key.h	16;"	d
Key_T	key.h	132;"	d
Key_Tab	key.h	7;"	d
Key_U	key.h	133;"	d
Key_Underscore	key.h	143;"	d
Key_Up	key.h	21;"	d
Key_V	key.h	134;"	d
Key_W	key.h	135;"	d
Key_X	key.h	136;"	d
Key_Y	key.h	137;"	d
Key_Z	key.h	138;"	d
Klass	kobject.h	/^struct Klass$/;"	s
LD	Makefile	/^LD = x86_64-pc-elf-ld$/;"	m
LD32	Makefile	/^LD32 = ld$/;"	m
LITUSE_ALPHA_ADDR	elfdef.h	1771;"	d
LITUSE_ALPHA_BASE	elfdef.h	1772;"	d
LITUSE_ALPHA_BYTOFF	elfdef.h	1773;"	d
LITUSE_ALPHA_JSR	elfdef.h	1774;"	d
LITUSE_ALPHA_TLS_GD	elfdef.h	1775;"	d
LITUSE_ALPHA_TLS_LDM	elfdef.h	1776;"	d
LL_DELAY_LOAD	elfdef.h	1512;"	d
LL_DELTA	elfdef.h	1513;"	d
LL_EXACT_MATCH	elfdef.h	1508;"	d
LL_EXPORTS	elfdef.h	1511;"	d
LL_IGNORE_INT_VER	elfdef.h	1509;"	d
LL_NONE	elfdef.h	1507;"	d
LL_REQUIRE_MINOR	elfdef.h	1510;"	d
LOADBASE	loader32.s	/^LOADBASE            equ 0x100000$/;"	d
MAGIC_BREAK	common.h	6;"	d
MAGIC_BREAK	util.h	6;"	d
MAP_ADDR_P_TO_V	kmm.c	25;"	d	file:
MAP_ADDR_V_TO_P	kmm.c	26;"	d	file:
MAX	common.h	9;"	d
MAX	util.h	10;"	d
MAX_CODE_SIZE	sysdef.h	14;"	d
MAX_FLI	tlsf.h	26;"	d
MAX_MMAP_LENGTH	task2.h	23;"	d
MAX_NAME_LEN	common.h	14;"	d
MAX_NAME_LEN	sysdef.h	16;"	d
MAX_PATH_LEN	common.h	15;"	d
MAX_SLI	tlsf.h	25;"	d
MAX_SLI_LOG2	tlsf.h	24;"	d
MAX_SYMBOLS	module.h	13;"	d
MAX_TASK_FDS	task2.h	22;"	d
MBOOT_AOUT_KLUDGE	loader32.s	/^MBOOT_AOUT_KLUDGE   equ 1<<16$/;"	d
MBOOT_CHECKSUM	loader32.s	/^MBOOT_CHECKSUM      equ -(MBOOT_HEADER_MAGIC + MBOOT_HEADER_FLAGS)$/;"	d
MBOOT_HEADER_FLAGS	loader32.s	/^MBOOT_HEADER_FLAGS  equ (MBOOT_PAGE_ALIGN | MBOOT_MEM_INFO | MBOOT_AOUT_KLUDGE)$/;"	d
MBOOT_HEADER_MAGIC	loader32.s	/^MBOOT_HEADER_MAGIC  equ 0x1BADB002 ; Multiboot Magic value$/;"	d
MBOOT_MEM_INFO	loader32.s	/^MBOOT_MEM_INFO      equ 1<<1    ; Provide your kernel with memory info$/;"	d
MBOOT_PAGE_ALIGN	loader32.s	/^MBOOT_PAGE_ALIGN    equ 1<<0    ; Load kernel and modules on a page boundary$/;"	d
MEXPORT	module.h	5;"	d
MIN	common.h	8;"	d
MIN	util.h	9;"	d
MIN_BLOCK_SIZE	tlsf.h	29;"	d
MLFQ_LEVELS	task.c	8;"	d	file:
MLFQ_MAX_LEVEL	task.c	9;"	d	file:
MODULE_CLEANUP	module.h	11;"	d
MODULE_H	module.h	2;"	d
MODULE_INIT	module.h	10;"	d
MOD_SOURCES	Makefile	/^MOD_SOURCES = testmod.o            \\$/;"	m
MULTIBOOT_H	multiboot.h	2;"	d
MountPoint	vfs.c	/^struct MountPoint {$/;"	s	file:
NM	Makefile	/^NM = x86_64-pc-elf-nm$/;"	m
NT_386_IOPERM	elfdef.h	515;"	d
NT_386_TLS	elfdef.h	514;"	d
NT_ASRS	elfdef.h	502;"	d
NT_AUXV	elfdef.h	500;"	d
NT_FPREGSET	elfdef.h	495;"	d
NT_GNU_ABI_TAG	elfdef.h	867;"	d
NT_GNU_BUILD_ID	elfdef.h	887;"	d
NT_GNU_GOLD_VERSION	elfdef.h	890;"	d
NT_GNU_HWCAP	elfdef.h	883;"	d
NT_GWINDOWS	elfdef.h	501;"	d
NT_LWPSINFO	elfdef.h	508;"	d
NT_LWPSTATUS	elfdef.h	507;"	d
NT_PLATFORM	elfdef.h	499;"	d
NT_PPC_SPE	elfdef.h	512;"	d
NT_PPC_VMX	elfdef.h	511;"	d
NT_PPC_VSX	elfdef.h	513;"	d
NT_PRCRED	elfdef.h	505;"	d
NT_PRFPXREG	elfdef.h	509;"	d
NT_PRPSINFO	elfdef.h	496;"	d
NT_PRSTATUS	elfdef.h	494;"	d
NT_PRXFPREG	elfdef.h	510;"	d
NT_PRXREG	elfdef.h	497;"	d
NT_PSINFO	elfdef.h	504;"	d
NT_PSTATUS	elfdef.h	503;"	d
NT_TASKSTRUCT	elfdef.h	498;"	d
NT_UTSNAME	elfdef.h	506;"	d
NT_VERSION	elfdef.h	520;"	d
NT_X86_XSTATE	elfdef.h	516;"	d
N_SYSCALLS	syscalls.c	9;"	d	file:
ODK_EXCEPTIONS	elfdef.h	1297;"	d
ODK_FILL	elfdef.h	1300;"	d
ODK_HWAND	elfdef.h	1302;"	d
ODK_HWOR	elfdef.h	1303;"	d
ODK_HWPATCH	elfdef.h	1299;"	d
ODK_NULL	elfdef.h	1295;"	d
ODK_PAD	elfdef.h	1298;"	d
ODK_REGINFO	elfdef.h	1296;"	d
ODK_TAGS	elfdef.h	1301;"	d
OEX_DISMISS	elfdef.h	1313;"	d
OEX_FPDBUG	elfdef.h	1311;"	d
OEX_FPU_DIV0	elfdef.h	1316;"	d
OEX_FPU_INEX	elfdef.h	1319;"	d
OEX_FPU_INVAL	elfdef.h	1315;"	d
OEX_FPU_MAX	elfdef.h	1308;"	d
OEX_FPU_MIN	elfdef.h	1307;"	d
OEX_FPU_OFLO	elfdef.h	1317;"	d
OEX_FPU_UFLO	elfdef.h	1318;"	d
OEX_PAGE0	elfdef.h	1309;"	d
OEX_PRECISEFP	elfdef.h	1312;"	d
OEX_SMM	elfdef.h	1310;"	d
OFF_FROM_BITS	paging.c	8;"	d	file:
OHWA0_R4KEOP_CHECKED	elfdef.h	1342;"	d
OHWA1_R4KEOP_CLEAN	elfdef.h	1343;"	d
OHW_R4KEOP	elfdef.h	1323;"	d
OHW_R5KCVTL	elfdef.h	1326;"	d
OHW_R5KEOP	elfdef.h	1325;"	d
OHW_R8KPFETCH	elfdef.h	1324;"	d
OPAD_POSTFIX	elfdef.h	1329;"	d
OPAD_PREFIX	elfdef.h	1328;"	d
OPAD_SYMBOL	elfdef.h	1330;"	d
ORDER_ARRAY_H	order_array.h	2;"	d
O_EXEC	file.h	11;"	d
O_RDONLY	file.h	8;"	d
O_RDWR	file.h	10;"	d
O_WRONLY	file.h	9;"	d
PADDR_TO_VADDR	kmm.h	29;"	d
PAGE_LOG2_SIZE	sysdef.h	5;"	d
PAGE_MASK	paging.h	7;"	d
PAGE_MASK	sysdef.h	6;"	d
PAGE_SIZE	paging.h	6;"	d
PAGE_SIZE	sysdef.h	4;"	d
PAGING_H	paging.h	2;"	d
PANIC	common.h	11;"	d
PCI_BAR0_OFFSET	pci.h	6;"	d
PCI_BAR1_OFFSET	pci.h	7;"	d
PCI_BAR2_OFFSET	pci.h	8;"	d
PCI_BAR3_OFFSET	pci.h	9;"	d
PCI_BAR4_OFFSET	pci.h	10;"	d
PCI_BAR5_OFFSET	pci.h	11;"	d
PCI_CONFIG_ADDRESS	pci.c	6;"	d	file:
PCI_CONFIG_DATA	pci.c	7;"	d	file:
PCI_H	pci.h	2;"	d
PFAULT_EACCESS	paging.h	10;"	d
PFAULT_ERDONLY	paging.h	11;"	d
PFAULT_HANDLED	paging.h	9;"	d
PF_ARM_ABS	elfdef.h	2081;"	d
PF_ARM_PI	elfdef.h	2080;"	d
PF_ARM_SB	elfdef.h	2078;"	d
PF_HP_CODE	elfdef.h	1705;"	d
PF_HP_FAR_SHARED	elfdef.h	1703;"	d
PF_HP_LAZYSWAP	elfdef.h	1707;"	d
PF_HP_MODIFY	elfdef.h	1706;"	d
PF_HP_NEAR_SHARED	elfdef.h	1704;"	d
PF_HP_PAGE_SIZE	elfdef.h	1702;"	d
PF_HP_SBP	elfdef.h	1708;"	d
PF_IA_64_NORECOV	elfdef.h	2167;"	d
PF_MASKOS	elfdef.h	489;"	d
PF_MASKPROC	elfdef.h	490;"	d
PF_MIPS_LOCAL	elfdef.h	1410;"	d
PF_PARISC_SBP	elfdef.h	1700;"	d
PF_R	elfdef.h	488;"	d
PF_W	elfdef.h	487;"	d
PF_X	elfdef.h	486;"	d
PML4E	kmm.h	/^struct PML4E {$/;"	s
PN_XNUM	elfdef.h	459;"	d
PROG_LDFLAGS	Makefile	/^PROG_LDFLAGS=-Tprog.ld$/;"	m
PROG_SOURCES	Makefile	/^PROG_SOURCES = prog\/init.o         \\$/;"	m
PTR_SIZE	sysdef.h	7;"	d
PT_ARM_EXIDX	elfdef.h	2084;"	d
PT_DYNAMIC	elfdef.h	465;"	d
PT_GNU_EH_FRAME	elfdef.h	473;"	d
PT_GNU_RELRO	elfdef.h	475;"	d
PT_GNU_STACK	elfdef.h	474;"	d
PT_HIOS	elfdef.h	480;"	d
PT_HIPROC	elfdef.h	482;"	d
PT_HISUNW	elfdef.h	479;"	d
PT_HP_CORE_COMM	elfdef.h	1683;"	d
PT_HP_CORE_KERNEL	elfdef.h	1682;"	d
PT_HP_CORE_LOADABLE	elfdef.h	1685;"	d
PT_HP_CORE_MMF	elfdef.h	1688;"	d
PT_HP_CORE_NONE	elfdef.h	1680;"	d
PT_HP_CORE_PROC	elfdef.h	1684;"	d
PT_HP_CORE_SHM	elfdef.h	1687;"	d
PT_HP_CORE_STACK	elfdef.h	1686;"	d
PT_HP_CORE_VERSION	elfdef.h	1681;"	d
PT_HP_FASTBIND	elfdef.h	1690;"	d
PT_HP_HSL_ANNOT	elfdef.h	1692;"	d
PT_HP_OPT_ANNOT	elfdef.h	1691;"	d
PT_HP_PARALLEL	elfdef.h	1689;"	d
PT_HP_STACK	elfdef.h	1693;"	d
PT_HP_TLS	elfdef.h	1679;"	d
PT_IA_64_ARCHEXT	elfdef.h	2160;"	d
PT_IA_64_HP_HSL_ANOT	elfdef.h	2163;"	d
PT_IA_64_HP_OPT_ANOT	elfdef.h	2162;"	d
PT_IA_64_HP_STACK	elfdef.h	2164;"	d
PT_IA_64_UNWIND	elfdef.h	2161;"	d
PT_INTERP	elfdef.h	466;"	d
PT_LOAD	elfdef.h	464;"	d
PT_LOOS	elfdef.h	472;"	d
PT_LOPROC	elfdef.h	481;"	d
PT_LOSUNW	elfdef.h	476;"	d
PT_MIPS_OPTIONS	elfdef.h	1406;"	d
PT_MIPS_REGINFO	elfdef.h	1404;"	d
PT_MIPS_RTPROC	elfdef.h	1405;"	d
PT_NOTE	elfdef.h	467;"	d
PT_NULL	elfdef.h	463;"	d
PT_NUM	elfdef.h	471;"	d
PT_PARISC_ARCHEXT	elfdef.h	1695;"	d
PT_PARISC_UNWIND	elfdef.h	1696;"	d
PT_PHDR	elfdef.h	469;"	d
PT_SHLIB	elfdef.h	468;"	d
PT_SUNWBSS	elfdef.h	477;"	d
PT_SUNWSTACK	elfdef.h	478;"	d
PT_TLS	elfdef.h	470;"	d
PageDirectory	kmm.h	/^struct PageDirectory {$/;"	s
PageDirectoryPointer	kmm.h	/^struct PageDirectoryPointer {$/;"	s
PageTable	kmm.h	/^struct PageTable {$/;"	s
RAMFS_H	fs/ramfs.h	2;"	d
REAL_FLI	tlsf.h	30;"	d
RHF_CORD	elfdef.h	1489;"	d
RHF_DEFAULT_DELAY_LOAD	elfdef.h	1486;"	d
RHF_DELTA_C_PLUS_PLUS	elfdef.h	1483;"	d
RHF_GUARANTEE_INIT	elfdef.h	1482;"	d
RHF_GUARANTEE_START_INIT	elfdef.h	1484;"	d
RHF_NONE	elfdef.h	1476;"	d
RHF_NOTPOT	elfdef.h	1478;"	d
RHF_NO_LIBRARY_REPLACEMENT	elfdef.h	1479;"	d
RHF_NO_MOVE	elfdef.h	1480;"	d
RHF_NO_UNRES_UNDEF	elfdef.h	1490;"	d
RHF_PIXIE	elfdef.h	1485;"	d
RHF_QUICKSTART	elfdef.h	1477;"	d
RHF_REQUICKSTART	elfdef.h	1487;"	d
RHF_REQUICKSTARTED	elfdef.h	1488;"	d
RHF_RLD_ORDER_SAFE	elfdef.h	1491;"	d
RHF_SGI_ONLY	elfdef.h	1481;"	d
ROUND_MEM_ALIGN	kmm.h	26;"	d
ROUND_PAGE_ALIGN	kmm.h	24;"	d
R_386_16	elfdef.h	975;"	d
R_386_32	elfdef.h	952;"	d
R_386_32PLT	elfdef.h	962;"	d
R_386_8	elfdef.h	977;"	d
R_386_COPY	elfdef.h	956;"	d
R_386_GLOB_DAT	elfdef.h	957;"	d
R_386_GOT32	elfdef.h	954;"	d
R_386_GOTOFF	elfdef.h	960;"	d
R_386_GOTPC	elfdef.h	961;"	d
R_386_IRELATIVE	elfdef.h	1008;"	d
R_386_JMP_SLOT	elfdef.h	958;"	d
R_386_NONE	elfdef.h	951;"	d
R_386_NUM	elfdef.h	1010;"	d
R_386_PC16	elfdef.h	976;"	d
R_386_PC32	elfdef.h	953;"	d
R_386_PC8	elfdef.h	978;"	d
R_386_PLT32	elfdef.h	955;"	d
R_386_RELATIVE	elfdef.h	959;"	d
R_386_TLS_DESC	elfdef.h	1004;"	d
R_386_TLS_DESC_CALL	elfdef.h	1001;"	d
R_386_TLS_DTPMOD32	elfdef.h	996;"	d
R_386_TLS_DTPOFF32	elfdef.h	997;"	d
R_386_TLS_GD	elfdef.h	970;"	d
R_386_TLS_GD_32	elfdef.h	979;"	d
R_386_TLS_GD_CALL	elfdef.h	982;"	d
R_386_TLS_GD_POP	elfdef.h	984;"	d
R_386_TLS_GD_PUSH	elfdef.h	981;"	d
R_386_TLS_GOTDESC	elfdef.h	1000;"	d
R_386_TLS_GOTIE	elfdef.h	966;"	d
R_386_TLS_IE	elfdef.h	964;"	d
R_386_TLS_IE_32	elfdef.h	992;"	d
R_386_TLS_LDM	elfdef.h	972;"	d
R_386_TLS_LDM_32	elfdef.h	985;"	d
R_386_TLS_LDM_CALL	elfdef.h	988;"	d
R_386_TLS_LDM_POP	elfdef.h	990;"	d
R_386_TLS_LDM_PUSH	elfdef.h	987;"	d
R_386_TLS_LDO_32	elfdef.h	991;"	d
R_386_TLS_LE	elfdef.h	968;"	d
R_386_TLS_LE_32	elfdef.h	994;"	d
R_386_TLS_TPOFF	elfdef.h	963;"	d
R_386_TLS_TPOFF32	elfdef.h	998;"	d
R_390_12	elfdef.h	2341;"	d
R_390_16	elfdef.h	2342;"	d
R_390_20	elfdef.h	2413;"	d
R_390_32	elfdef.h	2343;"	d
R_390_64	elfdef.h	2361;"	d
R_390_8	elfdef.h	2340;"	d
R_390_COPY	elfdef.h	2348;"	d
R_390_GLOB_DAT	elfdef.h	2349;"	d
R_390_GOT12	elfdef.h	2345;"	d
R_390_GOT16	elfdef.h	2354;"	d
R_390_GOT20	elfdef.h	2414;"	d
R_390_GOT32	elfdef.h	2346;"	d
R_390_GOT64	elfdef.h	2363;"	d
R_390_GOTENT	elfdef.h	2365;"	d
R_390_GOTOFF16	elfdef.h	2366;"	d
R_390_GOTOFF32	elfdef.h	2352;"	d
R_390_GOTOFF64	elfdef.h	2367;"	d
R_390_GOTPC	elfdef.h	2353;"	d
R_390_GOTPCDBL	elfdef.h	2360;"	d
R_390_GOTPLT12	elfdef.h	2368;"	d
R_390_GOTPLT16	elfdef.h	2369;"	d
R_390_GOTPLT20	elfdef.h	2415;"	d
R_390_GOTPLT32	elfdef.h	2370;"	d
R_390_GOTPLT64	elfdef.h	2371;"	d
R_390_GOTPLTENT	elfdef.h	2372;"	d
R_390_JMP_SLOT	elfdef.h	2350;"	d
R_390_NONE	elfdef.h	2339;"	d
R_390_NUM	elfdef.h	2419;"	d
R_390_PC16	elfdef.h	2355;"	d
R_390_PC16DBL	elfdef.h	2356;"	d
R_390_PC32	elfdef.h	2344;"	d
R_390_PC32DBL	elfdef.h	2358;"	d
R_390_PC64	elfdef.h	2362;"	d
R_390_PLT16DBL	elfdef.h	2357;"	d
R_390_PLT32	elfdef.h	2347;"	d
R_390_PLT32DBL	elfdef.h	2359;"	d
R_390_PLT64	elfdef.h	2364;"	d
R_390_PLTOFF16	elfdef.h	2373;"	d
R_390_PLTOFF32	elfdef.h	2374;"	d
R_390_PLTOFF64	elfdef.h	2375;"	d
R_390_RELATIVE	elfdef.h	2351;"	d
R_390_TLS_DTPMOD	elfdef.h	2409;"	d
R_390_TLS_DTPOFF	elfdef.h	2410;"	d
R_390_TLS_GD32	elfdef.h	2381;"	d
R_390_TLS_GD64	elfdef.h	2383;"	d
R_390_TLS_GDCALL	elfdef.h	2377;"	d
R_390_TLS_GOTIE12	elfdef.h	2385;"	d
R_390_TLS_GOTIE20	elfdef.h	2416;"	d
R_390_TLS_GOTIE32	elfdef.h	2387;"	d
R_390_TLS_GOTIE64	elfdef.h	2389;"	d
R_390_TLS_IE32	elfdef.h	2395;"	d
R_390_TLS_IE64	elfdef.h	2397;"	d
R_390_TLS_IEENT	elfdef.h	2399;"	d
R_390_TLS_LDCALL	elfdef.h	2379;"	d
R_390_TLS_LDM32	elfdef.h	2391;"	d
R_390_TLS_LDM64	elfdef.h	2393;"	d
R_390_TLS_LDO32	elfdef.h	2405;"	d
R_390_TLS_LDO64	elfdef.h	2407;"	d
R_390_TLS_LE32	elfdef.h	2401;"	d
R_390_TLS_LE64	elfdef.h	2403;"	d
R_390_TLS_LOAD	elfdef.h	2376;"	d
R_390_TLS_TPOFF	elfdef.h	2411;"	d
R_68K_16	elfdef.h	902;"	d
R_68K_32	elfdef.h	901;"	d
R_68K_8	elfdef.h	903;"	d
R_68K_COPY	elfdef.h	919;"	d
R_68K_GLOB_DAT	elfdef.h	920;"	d
R_68K_GOT16	elfdef.h	908;"	d
R_68K_GOT16O	elfdef.h	911;"	d
R_68K_GOT32	elfdef.h	907;"	d
R_68K_GOT32O	elfdef.h	910;"	d
R_68K_GOT8	elfdef.h	909;"	d
R_68K_GOT8O	elfdef.h	912;"	d
R_68K_JMP_SLOT	elfdef.h	921;"	d
R_68K_NONE	elfdef.h	900;"	d
R_68K_NUM	elfdef.h	945;"	d
R_68K_PC16	elfdef.h	905;"	d
R_68K_PC32	elfdef.h	904;"	d
R_68K_PC8	elfdef.h	906;"	d
R_68K_PLT16	elfdef.h	914;"	d
R_68K_PLT16O	elfdef.h	917;"	d
R_68K_PLT32	elfdef.h	913;"	d
R_68K_PLT32O	elfdef.h	916;"	d
R_68K_PLT8	elfdef.h	915;"	d
R_68K_PLT8O	elfdef.h	918;"	d
R_68K_RELATIVE	elfdef.h	922;"	d
R_68K_TLS_DTPMOD32	elfdef.h	941;"	d
R_68K_TLS_DTPREL32	elfdef.h	942;"	d
R_68K_TLS_GD16	elfdef.h	924;"	d
R_68K_TLS_GD32	elfdef.h	923;"	d
R_68K_TLS_GD8	elfdef.h	925;"	d
R_68K_TLS_IE16	elfdef.h	933;"	d
R_68K_TLS_IE32	elfdef.h	932;"	d
R_68K_TLS_IE8	elfdef.h	934;"	d
R_68K_TLS_LDM16	elfdef.h	927;"	d
R_68K_TLS_LDM32	elfdef.h	926;"	d
R_68K_TLS_LDM8	elfdef.h	928;"	d
R_68K_TLS_LDO16	elfdef.h	930;"	d
R_68K_TLS_LDO32	elfdef.h	929;"	d
R_68K_TLS_LDO8	elfdef.h	931;"	d
R_68K_TLS_LE16	elfdef.h	937;"	d
R_68K_TLS_LE32	elfdef.h	935;"	d
R_68K_TLS_LE8	elfdef.h	939;"	d
R_68K_TLS_TPREL32	elfdef.h	943;"	d
R_ALPHA_BRADDR	elfdef.h	1741;"	d
R_ALPHA_COPY	elfdef.h	1749;"	d
R_ALPHA_DTPMOD64	elfdef.h	1756;"	d
R_ALPHA_DTPREL16	elfdef.h	1761;"	d
R_ALPHA_DTPREL64	elfdef.h	1758;"	d
R_ALPHA_DTPRELHI	elfdef.h	1759;"	d
R_ALPHA_DTPRELLO	elfdef.h	1760;"	d
R_ALPHA_GLOB_DAT	elfdef.h	1750;"	d
R_ALPHA_GOTDTPREL	elfdef.h	1757;"	d
R_ALPHA_GOTTPREL	elfdef.h	1762;"	d
R_ALPHA_GPDISP	elfdef.h	1740;"	d
R_ALPHA_GPREL16	elfdef.h	1748;"	d
R_ALPHA_GPREL32	elfdef.h	1737;"	d
R_ALPHA_GPRELHIGH	elfdef.h	1746;"	d
R_ALPHA_GPRELLOW	elfdef.h	1747;"	d
R_ALPHA_HINT	elfdef.h	1742;"	d
R_ALPHA_JMP_SLOT	elfdef.h	1751;"	d
R_ALPHA_LITERAL	elfdef.h	1738;"	d
R_ALPHA_LITUSE	elfdef.h	1739;"	d
R_ALPHA_NONE	elfdef.h	1734;"	d
R_ALPHA_NUM	elfdef.h	1768;"	d
R_ALPHA_REFLONG	elfdef.h	1735;"	d
R_ALPHA_REFQUAD	elfdef.h	1736;"	d
R_ALPHA_RELATIVE	elfdef.h	1752;"	d
R_ALPHA_SREL16	elfdef.h	1743;"	d
R_ALPHA_SREL32	elfdef.h	1744;"	d
R_ALPHA_SREL64	elfdef.h	1745;"	d
R_ALPHA_TLSGD	elfdef.h	1754;"	d
R_ALPHA_TLS_GD_HI	elfdef.h	1753;"	d
R_ALPHA_TLS_LDM	elfdef.h	1755;"	d
R_ALPHA_TPREL16	elfdef.h	1766;"	d
R_ALPHA_TPREL64	elfdef.h	1763;"	d
R_ALPHA_TPRELHI	elfdef.h	1764;"	d
R_ALPHA_TPRELLO	elfdef.h	1765;"	d
R_ARM_ABS12	elfdef.h	2100;"	d
R_ARM_ABS16	elfdef.h	2099;"	d
R_ARM_ABS32	elfdef.h	2096;"	d
R_ARM_ABS8	elfdef.h	2102;"	d
R_ARM_ALU_PCREL_15_8	elfdef.h	2123;"	d
R_ARM_ALU_PCREL_23_15	elfdef.h	2124;"	d
R_ARM_ALU_PCREL_7_0	elfdef.h	2122;"	d
R_ARM_ALU_SBREL_19_12	elfdef.h	2126;"	d
R_ARM_ALU_SBREL_27_20	elfdef.h	2127;"	d
R_ARM_AMP_VCALL9	elfdef.h	2106;"	d
R_ARM_COPY	elfdef.h	2114;"	d
R_ARM_GLOB_DAT	elfdef.h	2115;"	d
R_ARM_GNU_VTENTRY	elfdef.h	2128;"	d
R_ARM_GNU_VTINHERIT	elfdef.h	2129;"	d
R_ARM_GOT32	elfdef.h	2120;"	d
R_ARM_GOTOFF	elfdef.h	2118;"	d
R_ARM_GOTPC	elfdef.h	2119;"	d
R_ARM_JUMP_SLOT	elfdef.h	2116;"	d
R_ARM_LDR_SBREL_11_0	elfdef.h	2125;"	d
R_ARM_NONE	elfdef.h	2094;"	d
R_ARM_NUM	elfdef.h	2150;"	d
R_ARM_PC13	elfdef.h	2098;"	d
R_ARM_PC24	elfdef.h	2095;"	d
R_ARM_PLT32	elfdef.h	2121;"	d
R_ARM_RABS22	elfdef.h	2146;"	d
R_ARM_RBASE	elfdef.h	2148;"	d
R_ARM_REL32	elfdef.h	2097;"	d
R_ARM_RELATIVE	elfdef.h	2117;"	d
R_ARM_RPC24	elfdef.h	2147;"	d
R_ARM_RREL32	elfdef.h	2145;"	d
R_ARM_RSBREL32	elfdef.h	2143;"	d
R_ARM_RXPC25	elfdef.h	2142;"	d
R_ARM_SBREL32	elfdef.h	2103;"	d
R_ARM_SWI24	elfdef.h	2107;"	d
R_ARM_THM_ABS5	elfdef.h	2101;"	d
R_ARM_THM_PC11	elfdef.h	2130;"	d
R_ARM_THM_PC22	elfdef.h	2104;"	d
R_ARM_THM_PC8	elfdef.h	2105;"	d
R_ARM_THM_PC9	elfdef.h	2131;"	d
R_ARM_THM_RPC22	elfdef.h	2144;"	d
R_ARM_THM_SWI8	elfdef.h	2108;"	d
R_ARM_THM_XPC22	elfdef.h	2110;"	d
R_ARM_TLS_DTPMOD32	elfdef.h	2111;"	d
R_ARM_TLS_DTPOFF32	elfdef.h	2112;"	d
R_ARM_TLS_GD32	elfdef.h	2132;"	d
R_ARM_TLS_IE32	elfdef.h	2138;"	d
R_ARM_TLS_LDM32	elfdef.h	2134;"	d
R_ARM_TLS_LDO32	elfdef.h	2136;"	d
R_ARM_TLS_LE32	elfdef.h	2140;"	d
R_ARM_TLS_TPOFF32	elfdef.h	2113;"	d
R_ARM_XPC25	elfdef.h	2109;"	d
R_CRIS_16	elfdef.h	2425;"	d
R_CRIS_16_GOT	elfdef.h	2436;"	d
R_CRIS_16_GOTPLT	elfdef.h	2438;"	d
R_CRIS_16_PCREL	elfdef.h	2428;"	d
R_CRIS_32	elfdef.h	2426;"	d
R_CRIS_32_GOT	elfdef.h	2437;"	d
R_CRIS_32_GOTPLT	elfdef.h	2439;"	d
R_CRIS_32_GOTREL	elfdef.h	2440;"	d
R_CRIS_32_PCREL	elfdef.h	2429;"	d
R_CRIS_32_PLT_GOTREL	elfdef.h	2441;"	d
R_CRIS_32_PLT_PCREL	elfdef.h	2442;"	d
R_CRIS_8	elfdef.h	2424;"	d
R_CRIS_8_PCREL	elfdef.h	2427;"	d
R_CRIS_COPY	elfdef.h	2432;"	d
R_CRIS_GLOB_DAT	elfdef.h	2433;"	d
R_CRIS_GNU_VTENTRY	elfdef.h	2431;"	d
R_CRIS_GNU_VTINHERIT	elfdef.h	2430;"	d
R_CRIS_JUMP_SLOT	elfdef.h	2434;"	d
R_CRIS_NONE	elfdef.h	2423;"	d
R_CRIS_NUM	elfdef.h	2444;"	d
R_CRIS_RELATIVE	elfdef.h	2435;"	d
R_IA64_COPY	elfdef.h	2242;"	d
R_IA64_DIR32LSB	elfdef.h	2187;"	d
R_IA64_DIR32MSB	elfdef.h	2186;"	d
R_IA64_DIR64LSB	elfdef.h	2189;"	d
R_IA64_DIR64MSB	elfdef.h	2188;"	d
R_IA64_DTPMOD64LSB	elfdef.h	2253;"	d
R_IA64_DTPMOD64MSB	elfdef.h	2252;"	d
R_IA64_DTPREL14	elfdef.h	2255;"	d
R_IA64_DTPREL22	elfdef.h	2256;"	d
R_IA64_DTPREL32LSB	elfdef.h	2259;"	d
R_IA64_DTPREL32MSB	elfdef.h	2258;"	d
R_IA64_DTPREL64I	elfdef.h	2257;"	d
R_IA64_DTPREL64LSB	elfdef.h	2261;"	d
R_IA64_DTPREL64MSB	elfdef.h	2260;"	d
R_IA64_FPTR32LSB	elfdef.h	2204;"	d
R_IA64_FPTR32MSB	elfdef.h	2203;"	d
R_IA64_FPTR64I	elfdef.h	2202;"	d
R_IA64_FPTR64LSB	elfdef.h	2206;"	d
R_IA64_FPTR64MSB	elfdef.h	2205;"	d
R_IA64_GPREL22	elfdef.h	2190;"	d
R_IA64_GPREL32LSB	elfdef.h	2193;"	d
R_IA64_GPREL32MSB	elfdef.h	2192;"	d
R_IA64_GPREL64I	elfdef.h	2191;"	d
R_IA64_GPREL64LSB	elfdef.h	2195;"	d
R_IA64_GPREL64MSB	elfdef.h	2194;"	d
R_IA64_IMM14	elfdef.h	2183;"	d
R_IA64_IMM22	elfdef.h	2184;"	d
R_IA64_IMM64	elfdef.h	2185;"	d
R_IA64_IPLTLSB	elfdef.h	2241;"	d
R_IA64_IPLTMSB	elfdef.h	2240;"	d
R_IA64_LDXMOV	elfdef.h	2245;"	d
R_IA64_LTOFF22	elfdef.h	2196;"	d
R_IA64_LTOFF22X	elfdef.h	2244;"	d
R_IA64_LTOFF64I	elfdef.h	2197;"	d
R_IA64_LTOFF_DTPMOD22	elfdef.h	2254;"	d
R_IA64_LTOFF_DTPREL22	elfdef.h	2262;"	d
R_IA64_LTOFF_FPTR22	elfdef.h	2215;"	d
R_IA64_LTOFF_FPTR32LSB	elfdef.h	2218;"	d
R_IA64_LTOFF_FPTR32MSB	elfdef.h	2217;"	d
R_IA64_LTOFF_FPTR64I	elfdef.h	2216;"	d
R_IA64_LTOFF_FPTR64LSB	elfdef.h	2220;"	d
R_IA64_LTOFF_FPTR64MSB	elfdef.h	2219;"	d
R_IA64_LTOFF_TPREL22	elfdef.h	2251;"	d
R_IA64_LTV32LSB	elfdef.h	2234;"	d
R_IA64_LTV32MSB	elfdef.h	2233;"	d
R_IA64_LTV64LSB	elfdef.h	2236;"	d
R_IA64_LTV64MSB	elfdef.h	2235;"	d
R_IA64_NONE	elfdef.h	2182;"	d
R_IA64_PCREL21B	elfdef.h	2208;"	d
R_IA64_PCREL21BI	elfdef.h	2237;"	d
R_IA64_PCREL21F	elfdef.h	2210;"	d
R_IA64_PCREL21M	elfdef.h	2209;"	d
R_IA64_PCREL22	elfdef.h	2238;"	d
R_IA64_PCREL32LSB	elfdef.h	2212;"	d
R_IA64_PCREL32MSB	elfdef.h	2211;"	d
R_IA64_PCREL60B	elfdef.h	2207;"	d
R_IA64_PCREL64I	elfdef.h	2239;"	d
R_IA64_PCREL64LSB	elfdef.h	2214;"	d
R_IA64_PCREL64MSB	elfdef.h	2213;"	d
R_IA64_PLTOFF22	elfdef.h	2198;"	d
R_IA64_PLTOFF64I	elfdef.h	2199;"	d
R_IA64_PLTOFF64LSB	elfdef.h	2201;"	d
R_IA64_PLTOFF64MSB	elfdef.h	2200;"	d
R_IA64_REL32LSB	elfdef.h	2230;"	d
R_IA64_REL32MSB	elfdef.h	2229;"	d
R_IA64_REL64LSB	elfdef.h	2232;"	d
R_IA64_REL64MSB	elfdef.h	2231;"	d
R_IA64_SECREL32LSB	elfdef.h	2226;"	d
R_IA64_SECREL32MSB	elfdef.h	2225;"	d
R_IA64_SECREL64LSB	elfdef.h	2228;"	d
R_IA64_SECREL64MSB	elfdef.h	2227;"	d
R_IA64_SEGREL32LSB	elfdef.h	2222;"	d
R_IA64_SEGREL32MSB	elfdef.h	2221;"	d
R_IA64_SEGREL64LSB	elfdef.h	2224;"	d
R_IA64_SEGREL64MSB	elfdef.h	2223;"	d
R_IA64_SUB	elfdef.h	2243;"	d
R_IA64_TPREL14	elfdef.h	2246;"	d
R_IA64_TPREL22	elfdef.h	2247;"	d
R_IA64_TPREL64I	elfdef.h	2248;"	d
R_IA64_TPREL64LSB	elfdef.h	2250;"	d
R_IA64_TPREL64MSB	elfdef.h	2249;"	d
R_M32R_10_PCREL	elfdef.h	2532;"	d
R_M32R_10_PCREL_RELA	elfdef.h	2545;"	d
R_M32R_16	elfdef.h	2529;"	d
R_M32R_16_RELA	elfdef.h	2542;"	d
R_M32R_18_PCREL	elfdef.h	2533;"	d
R_M32R_18_PCREL_RELA	elfdef.h	2546;"	d
R_M32R_24	elfdef.h	2531;"	d
R_M32R_24_RELA	elfdef.h	2544;"	d
R_M32R_26_PCREL	elfdef.h	2534;"	d
R_M32R_26_PCREL_RELA	elfdef.h	2547;"	d
R_M32R_26_PLTREL	elfdef.h	2557;"	d
R_M32R_32	elfdef.h	2530;"	d
R_M32R_32_RELA	elfdef.h	2543;"	d
R_M32R_COPY	elfdef.h	2558;"	d
R_M32R_GLOB_DAT	elfdef.h	2559;"	d
R_M32R_GNU_VTENTRY	elfdef.h	2540;"	d
R_M32R_GNU_VTINHERIT	elfdef.h	2539;"	d
R_M32R_GOT16_HI_SLO	elfdef.h	2566;"	d
R_M32R_GOT16_HI_ULO	elfdef.h	2564;"	d
R_M32R_GOT16_LO	elfdef.h	2568;"	d
R_M32R_GOT24	elfdef.h	2556;"	d
R_M32R_GOTOFF	elfdef.h	2562;"	d
R_M32R_GOTOFF_HI_SLO	elfdef.h	2577;"	d
R_M32R_GOTOFF_HI_ULO	elfdef.h	2575;"	d
R_M32R_GOTOFF_LO	elfdef.h	2579;"	d
R_M32R_GOTPC24	elfdef.h	2563;"	d
R_M32R_GOTPC_HI_SLO	elfdef.h	2571;"	d
R_M32R_GOTPC_HI_ULO	elfdef.h	2569;"	d
R_M32R_GOTPC_LO	elfdef.h	2573;"	d
R_M32R_HI16_SLO	elfdef.h	2536;"	d
R_M32R_HI16_SLO_RELA	elfdef.h	2549;"	d
R_M32R_HI16_ULO	elfdef.h	2535;"	d
R_M32R_HI16_ULO_RELA	elfdef.h	2548;"	d
R_M32R_JMP_SLOT	elfdef.h	2560;"	d
R_M32R_LO16	elfdef.h	2537;"	d
R_M32R_LO16_RELA	elfdef.h	2550;"	d
R_M32R_NONE	elfdef.h	2528;"	d
R_M32R_NUM	elfdef.h	2580;"	d
R_M32R_REL32	elfdef.h	2554;"	d
R_M32R_RELATIVE	elfdef.h	2561;"	d
R_M32R_RELA_GNU_VTENTRY	elfdef.h	2553;"	d
R_M32R_RELA_GNU_VTINHERIT	elfdef.h	2552;"	d
R_M32R_SDA16	elfdef.h	2538;"	d
R_M32R_SDA16_RELA	elfdef.h	2551;"	d
R_MIPS_16	elfdef.h	1348;"	d
R_MIPS_26	elfdef.h	1351;"	d
R_MIPS_32	elfdef.h	1349;"	d
R_MIPS_64	elfdef.h	1363;"	d
R_MIPS_ADD_IMMEDIATE	elfdef.h	1379;"	d
R_MIPS_CALL16	elfdef.h	1358;"	d
R_MIPS_CALL_HI16	elfdef.h	1375;"	d
R_MIPS_CALL_LO16	elfdef.h	1376;"	d
R_MIPS_COPY	elfdef.h	1397;"	d
R_MIPS_DELETE	elfdef.h	1372;"	d
R_MIPS_GLOB_DAT	elfdef.h	1396;"	d
R_MIPS_GOT16	elfdef.h	1356;"	d
R_MIPS_GOT_DISP	elfdef.h	1364;"	d
R_MIPS_GOT_HI16	elfdef.h	1367;"	d
R_MIPS_GOT_LO16	elfdef.h	1368;"	d
R_MIPS_GOT_OFST	elfdef.h	1366;"	d
R_MIPS_GOT_PAGE	elfdef.h	1365;"	d
R_MIPS_GPREL16	elfdef.h	1354;"	d
R_MIPS_GPREL32	elfdef.h	1359;"	d
R_MIPS_HI16	elfdef.h	1352;"	d
R_MIPS_HIGHER	elfdef.h	1373;"	d
R_MIPS_HIGHEST	elfdef.h	1374;"	d
R_MIPS_INSERT_A	elfdef.h	1370;"	d
R_MIPS_INSERT_B	elfdef.h	1371;"	d
R_MIPS_JALR	elfdef.h	1382;"	d
R_MIPS_JUMP_SLOT	elfdef.h	1398;"	d
R_MIPS_LITERAL	elfdef.h	1355;"	d
R_MIPS_LO16	elfdef.h	1353;"	d
R_MIPS_NONE	elfdef.h	1347;"	d
R_MIPS_NUM	elfdef.h	1400;"	d
R_MIPS_PC16	elfdef.h	1357;"	d
R_MIPS_PJUMP	elfdef.h	1380;"	d
R_MIPS_REL16	elfdef.h	1378;"	d
R_MIPS_REL32	elfdef.h	1350;"	d
R_MIPS_RELGOT	elfdef.h	1381;"	d
R_MIPS_SCN_DISP	elfdef.h	1377;"	d
R_MIPS_SHIFT5	elfdef.h	1361;"	d
R_MIPS_SHIFT6	elfdef.h	1362;"	d
R_MIPS_SUB	elfdef.h	1369;"	d
R_MIPS_TLS_DTPMOD32	elfdef.h	1383;"	d
R_MIPS_TLS_DTPMOD64	elfdef.h	1385;"	d
R_MIPS_TLS_DTPREL32	elfdef.h	1384;"	d
R_MIPS_TLS_DTPREL64	elfdef.h	1386;"	d
R_MIPS_TLS_DTPREL_HI16	elfdef.h	1389;"	d
R_MIPS_TLS_DTPREL_LO16	elfdef.h	1390;"	d
R_MIPS_TLS_GD	elfdef.h	1387;"	d
R_MIPS_TLS_GOTTPREL	elfdef.h	1391;"	d
R_MIPS_TLS_LDM	elfdef.h	1388;"	d
R_MIPS_TLS_TPREL32	elfdef.h	1392;"	d
R_MIPS_TLS_TPREL64	elfdef.h	1393;"	d
R_MIPS_TLS_TPREL_HI16	elfdef.h	1394;"	d
R_MIPS_TLS_TPREL_LO16	elfdef.h	1395;"	d
R_MN10300_16	elfdef.h	2501;"	d
R_MN10300_24	elfdef.h	2508;"	d
R_MN10300_32	elfdef.h	2500;"	d
R_MN10300_8	elfdef.h	2502;"	d
R_MN10300_COPY	elfdef.h	2519;"	d
R_MN10300_GLOB_DAT	elfdef.h	2520;"	d
R_MN10300_GNU_VTENTRY	elfdef.h	2507;"	d
R_MN10300_GNU_VTINHERIT	elfdef.h	2506;"	d
R_MN10300_GOT16	elfdef.h	2518;"	d
R_MN10300_GOT24	elfdef.h	2517;"	d
R_MN10300_GOT32	elfdef.h	2516;"	d
R_MN10300_GOTOFF16	elfdef.h	2513;"	d
R_MN10300_GOTOFF24	elfdef.h	2512;"	d
R_MN10300_GOTOFF32	elfdef.h	2511;"	d
R_MN10300_GOTPC16	elfdef.h	2510;"	d
R_MN10300_GOTPC32	elfdef.h	2509;"	d
R_MN10300_JMP_SLOT	elfdef.h	2521;"	d
R_MN10300_NONE	elfdef.h	2499;"	d
R_MN10300_NUM	elfdef.h	2524;"	d
R_MN10300_PCREL16	elfdef.h	2504;"	d
R_MN10300_PCREL32	elfdef.h	2503;"	d
R_MN10300_PCREL8	elfdef.h	2505;"	d
R_MN10300_PLT16	elfdef.h	2515;"	d
R_MN10300_PLT32	elfdef.h	2514;"	d
R_MN10300_RELATIVE	elfdef.h	2522;"	d
R_PARISC_COPY	elfdef.h	1634;"	d
R_PARISC_DIR14DR	elfdef.h	1604;"	d
R_PARISC_DIR14R	elfdef.h	1571;"	d
R_PARISC_DIR14WR	elfdef.h	1603;"	d
R_PARISC_DIR16DF	elfdef.h	1607;"	d
R_PARISC_DIR16F	elfdef.h	1605;"	d
R_PARISC_DIR16WF	elfdef.h	1606;"	d
R_PARISC_DIR17F	elfdef.h	1570;"	d
R_PARISC_DIR17R	elfdef.h	1569;"	d
R_PARISC_DIR21L	elfdef.h	1568;"	d
R_PARISC_DIR32	elfdef.h	1567;"	d
R_PARISC_DIR64	elfdef.h	1602;"	d
R_PARISC_DPREL14R	elfdef.h	1578;"	d
R_PARISC_DPREL21L	elfdef.h	1577;"	d
R_PARISC_EPLT	elfdef.h	1636;"	d
R_PARISC_FPTR64	elfdef.h	1591;"	d
R_PARISC_GNU_VTENTRY	elfdef.h	1655;"	d
R_PARISC_GNU_VTINHERIT	elfdef.h	1656;"	d
R_PARISC_GPREL14DR	elfdef.h	1610;"	d
R_PARISC_GPREL14R	elfdef.h	1580;"	d
R_PARISC_GPREL14WR	elfdef.h	1609;"	d
R_PARISC_GPREL16DF	elfdef.h	1613;"	d
R_PARISC_GPREL16F	elfdef.h	1611;"	d
R_PARISC_GPREL16WF	elfdef.h	1612;"	d
R_PARISC_GPREL21L	elfdef.h	1579;"	d
R_PARISC_GPREL64	elfdef.h	1608;"	d
R_PARISC_HIRESERVE	elfdef.h	1675;"	d
R_PARISC_IPLT	elfdef.h	1635;"	d
R_PARISC_LORESERVE	elfdef.h	1633;"	d
R_PARISC_LTOFF14DR	elfdef.h	1616;"	d
R_PARISC_LTOFF14R	elfdef.h	1582;"	d
R_PARISC_LTOFF14WR	elfdef.h	1615;"	d
R_PARISC_LTOFF16DF	elfdef.h	1619;"	d
R_PARISC_LTOFF16F	elfdef.h	1617;"	d
R_PARISC_LTOFF16WF	elfdef.h	1618;"	d
R_PARISC_LTOFF21L	elfdef.h	1581;"	d
R_PARISC_LTOFF64	elfdef.h	1614;"	d
R_PARISC_LTOFF_FPTR14DR	elfdef.h	1629;"	d
R_PARISC_LTOFF_FPTR14R	elfdef.h	1590;"	d
R_PARISC_LTOFF_FPTR14WR	elfdef.h	1628;"	d
R_PARISC_LTOFF_FPTR16DF	elfdef.h	1632;"	d
R_PARISC_LTOFF_FPTR16F	elfdef.h	1630;"	d
R_PARISC_LTOFF_FPTR16WF	elfdef.h	1631;"	d
R_PARISC_LTOFF_FPTR21L	elfdef.h	1589;"	d
R_PARISC_LTOFF_FPTR32	elfdef.h	1588;"	d
R_PARISC_LTOFF_FPTR64	elfdef.h	1627;"	d
R_PARISC_LTOFF_TP14DR	elfdef.h	1651;"	d
R_PARISC_LTOFF_TP14F	elfdef.h	1642;"	d
R_PARISC_LTOFF_TP14R	elfdef.h	1641;"	d
R_PARISC_LTOFF_TP14WR	elfdef.h	1650;"	d
R_PARISC_LTOFF_TP16DF	elfdef.h	1654;"	d
R_PARISC_LTOFF_TP16F	elfdef.h	1652;"	d
R_PARISC_LTOFF_TP16WF	elfdef.h	1653;"	d
R_PARISC_LTOFF_TP21L	elfdef.h	1640;"	d
R_PARISC_LTOFF_TP64	elfdef.h	1649;"	d
R_PARISC_NONE	elfdef.h	1566;"	d
R_PARISC_PCREL14DR	elfdef.h	1598;"	d
R_PARISC_PCREL14R	elfdef.h	1576;"	d
R_PARISC_PCREL14WR	elfdef.h	1597;"	d
R_PARISC_PCREL16DF	elfdef.h	1601;"	d
R_PARISC_PCREL16F	elfdef.h	1599;"	d
R_PARISC_PCREL16WF	elfdef.h	1600;"	d
R_PARISC_PCREL17F	elfdef.h	1575;"	d
R_PARISC_PCREL17R	elfdef.h	1574;"	d
R_PARISC_PCREL21L	elfdef.h	1573;"	d
R_PARISC_PCREL22F	elfdef.h	1596;"	d
R_PARISC_PCREL32	elfdef.h	1572;"	d
R_PARISC_PCREL64	elfdef.h	1595;"	d
R_PARISC_PLABEL14R	elfdef.h	1594;"	d
R_PARISC_PLABEL21L	elfdef.h	1593;"	d
R_PARISC_PLABEL32	elfdef.h	1592;"	d
R_PARISC_PLTOFF14DR	elfdef.h	1623;"	d
R_PARISC_PLTOFF14R	elfdef.h	1587;"	d
R_PARISC_PLTOFF14WR	elfdef.h	1622;"	d
R_PARISC_PLTOFF16DF	elfdef.h	1626;"	d
R_PARISC_PLTOFF16F	elfdef.h	1624;"	d
R_PARISC_PLTOFF16WF	elfdef.h	1625;"	d
R_PARISC_PLTOFF21L	elfdef.h	1586;"	d
R_PARISC_SECREL32	elfdef.h	1583;"	d
R_PARISC_SECREL64	elfdef.h	1620;"	d
R_PARISC_SEGBASE	elfdef.h	1584;"	d
R_PARISC_SEGREL32	elfdef.h	1585;"	d
R_PARISC_SEGREL64	elfdef.h	1621;"	d
R_PARISC_TLS_DTPMOD32	elfdef.h	1665;"	d
R_PARISC_TLS_DTPMOD64	elfdef.h	1666;"	d
R_PARISC_TLS_DTPOFF32	elfdef.h	1667;"	d
R_PARISC_TLS_DTPOFF64	elfdef.h	1668;"	d
R_PARISC_TLS_GD14R	elfdef.h	1658;"	d
R_PARISC_TLS_GD21L	elfdef.h	1657;"	d
R_PARISC_TLS_GDCALL	elfdef.h	1659;"	d
R_PARISC_TLS_IE14R	elfdef.h	1672;"	d
R_PARISC_TLS_IE21L	elfdef.h	1671;"	d
R_PARISC_TLS_LDM14R	elfdef.h	1661;"	d
R_PARISC_TLS_LDM21L	elfdef.h	1660;"	d
R_PARISC_TLS_LDMCALL	elfdef.h	1662;"	d
R_PARISC_TLS_LDO14R	elfdef.h	1664;"	d
R_PARISC_TLS_LDO21L	elfdef.h	1663;"	d
R_PARISC_TLS_LE14R	elfdef.h	1670;"	d
R_PARISC_TLS_LE21L	elfdef.h	1669;"	d
R_PARISC_TLS_TPREL32	elfdef.h	1673;"	d
R_PARISC_TLS_TPREL64	elfdef.h	1674;"	d
R_PARISC_TPREL14DR	elfdef.h	1645;"	d
R_PARISC_TPREL14R	elfdef.h	1639;"	d
R_PARISC_TPREL14WR	elfdef.h	1644;"	d
R_PARISC_TPREL16DF	elfdef.h	1648;"	d
R_PARISC_TPREL16F	elfdef.h	1646;"	d
R_PARISC_TPREL16WF	elfdef.h	1647;"	d
R_PARISC_TPREL21L	elfdef.h	1638;"	d
R_PARISC_TPREL32	elfdef.h	1637;"	d
R_PARISC_TPREL64	elfdef.h	1643;"	d
R_PPC64_ADDR14	elfdef.h	1913;"	d
R_PPC64_ADDR14_BRNTAKEN	elfdef.h	1915;"	d
R_PPC64_ADDR14_BRTAKEN	elfdef.h	1914;"	d
R_PPC64_ADDR16	elfdef.h	1909;"	d
R_PPC64_ADDR16_DS	elfdef.h	1963;"	d
R_PPC64_ADDR16_HA	elfdef.h	1912;"	d
R_PPC64_ADDR16_HI	elfdef.h	1911;"	d
R_PPC64_ADDR16_HIGHER	elfdef.h	1945;"	d
R_PPC64_ADDR16_HIGHERA	elfdef.h	1946;"	d
R_PPC64_ADDR16_HIGHEST	elfdef.h	1947;"	d
R_PPC64_ADDR16_HIGHESTA	elfdef.h	1948;"	d
R_PPC64_ADDR16_LO	elfdef.h	1910;"	d
R_PPC64_ADDR16_LO_DS	elfdef.h	1964;"	d
R_PPC64_ADDR24	elfdef.h	1908;"	d
R_PPC64_ADDR30	elfdef.h	1943;"	d
R_PPC64_ADDR32	elfdef.h	1907;"	d
R_PPC64_ADDR64	elfdef.h	1944;"	d
R_PPC64_COPY	elfdef.h	1925;"	d
R_PPC64_DTPMOD64	elfdef.h	1977;"	d
R_PPC64_DTPREL16	elfdef.h	1983;"	d
R_PPC64_DTPREL16_DS	elfdef.h	2010;"	d
R_PPC64_DTPREL16_HA	elfdef.h	1986;"	d
R_PPC64_DTPREL16_HI	elfdef.h	1985;"	d
R_PPC64_DTPREL16_HIGHER	elfdef.h	2012;"	d
R_PPC64_DTPREL16_HIGHERA	elfdef.h	2013;"	d
R_PPC64_DTPREL16_HIGHEST	elfdef.h	2014;"	d
R_PPC64_DTPREL16_HIGHESTA	elfdef.h	2015;"	d
R_PPC64_DTPREL16_LO	elfdef.h	1984;"	d
R_PPC64_DTPREL16_LO_DS	elfdef.h	2011;"	d
R_PPC64_DTPREL64	elfdef.h	1987;"	d
R_PPC64_GLOB_DAT	elfdef.h	1926;"	d
R_PPC64_GOT16	elfdef.h	1920;"	d
R_PPC64_GOT16_DS	elfdef.h	1965;"	d
R_PPC64_GOT16_HA	elfdef.h	1923;"	d
R_PPC64_GOT16_HI	elfdef.h	1922;"	d
R_PPC64_GOT16_LO	elfdef.h	1921;"	d
R_PPC64_GOT16_LO_DS	elfdef.h	1966;"	d
R_PPC64_GOT_DTPREL16_DS	elfdef.h	2000;"	d
R_PPC64_GOT_DTPREL16_HA	elfdef.h	2003;"	d
R_PPC64_GOT_DTPREL16_HI	elfdef.h	2002;"	d
R_PPC64_GOT_DTPREL16_LO_DS	elfdef.h	2001;"	d
R_PPC64_GOT_TLSGD16	elfdef.h	1988;"	d
R_PPC64_GOT_TLSGD16_HA	elfdef.h	1991;"	d
R_PPC64_GOT_TLSGD16_HI	elfdef.h	1990;"	d
R_PPC64_GOT_TLSGD16_LO	elfdef.h	1989;"	d
R_PPC64_GOT_TLSLD16	elfdef.h	1992;"	d
R_PPC64_GOT_TLSLD16_HA	elfdef.h	1995;"	d
R_PPC64_GOT_TLSLD16_HI	elfdef.h	1994;"	d
R_PPC64_GOT_TLSLD16_LO	elfdef.h	1993;"	d
R_PPC64_GOT_TPREL16_DS	elfdef.h	1996;"	d
R_PPC64_GOT_TPREL16_HA	elfdef.h	1999;"	d
R_PPC64_GOT_TPREL16_HI	elfdef.h	1998;"	d
R_PPC64_GOT_TPREL16_LO_DS	elfdef.h	1997;"	d
R_PPC64_IRELATIVE	elfdef.h	2019;"	d
R_PPC64_JMP_IREL	elfdef.h	2018;"	d
R_PPC64_JMP_SLOT	elfdef.h	1927;"	d
R_PPC64_NONE	elfdef.h	1906;"	d
R_PPC64_PLT16_HA	elfdef.h	1937;"	d
R_PPC64_PLT16_HI	elfdef.h	1936;"	d
R_PPC64_PLT16_LO	elfdef.h	1935;"	d
R_PPC64_PLT16_LO_DS	elfdef.h	1967;"	d
R_PPC64_PLT32	elfdef.h	1933;"	d
R_PPC64_PLT64	elfdef.h	1951;"	d
R_PPC64_PLTGOT16	elfdef.h	1958;"	d
R_PPC64_PLTGOT16_DS	elfdef.h	1972;"	d
R_PPC64_PLTGOT16_HA	elfdef.h	1961;"	d
R_PPC64_PLTGOT16_HI	elfdef.h	1960;"	d
R_PPC64_PLTGOT16_LO	elfdef.h	1959;"	d
R_PPC64_PLTGOT16_LO_DS	elfdef.h	1973;"	d
R_PPC64_PLTREL32	elfdef.h	1934;"	d
R_PPC64_PLTREL64	elfdef.h	1952;"	d
R_PPC64_REL14	elfdef.h	1917;"	d
R_PPC64_REL14_BRNTAKEN	elfdef.h	1919;"	d
R_PPC64_REL14_BRTAKEN	elfdef.h	1918;"	d
R_PPC64_REL16	elfdef.h	2020;"	d
R_PPC64_REL16_HA	elfdef.h	2023;"	d
R_PPC64_REL16_HI	elfdef.h	2022;"	d
R_PPC64_REL16_LO	elfdef.h	2021;"	d
R_PPC64_REL24	elfdef.h	1916;"	d
R_PPC64_REL32	elfdef.h	1932;"	d
R_PPC64_REL64	elfdef.h	1950;"	d
R_PPC64_RELATIVE	elfdef.h	1928;"	d
R_PPC64_SECTOFF	elfdef.h	1939;"	d
R_PPC64_SECTOFF_DS	elfdef.h	1968;"	d
R_PPC64_SECTOFF_HA	elfdef.h	1942;"	d
R_PPC64_SECTOFF_HI	elfdef.h	1941;"	d
R_PPC64_SECTOFF_LO	elfdef.h	1940;"	d
R_PPC64_SECTOFF_LO_DS	elfdef.h	1969;"	d
R_PPC64_TLS	elfdef.h	1976;"	d
R_PPC64_TOC	elfdef.h	1957;"	d
R_PPC64_TOC16	elfdef.h	1953;"	d
R_PPC64_TOC16_DS	elfdef.h	1970;"	d
R_PPC64_TOC16_HA	elfdef.h	1956;"	d
R_PPC64_TOC16_HI	elfdef.h	1955;"	d
R_PPC64_TOC16_LO	elfdef.h	1954;"	d
R_PPC64_TOC16_LO_DS	elfdef.h	1971;"	d
R_PPC64_TPREL16	elfdef.h	1978;"	d
R_PPC64_TPREL16_DS	elfdef.h	2004;"	d
R_PPC64_TPREL16_HA	elfdef.h	1981;"	d
R_PPC64_TPREL16_HI	elfdef.h	1980;"	d
R_PPC64_TPREL16_HIGHER	elfdef.h	2006;"	d
R_PPC64_TPREL16_HIGHERA	elfdef.h	2007;"	d
R_PPC64_TPREL16_HIGHEST	elfdef.h	2008;"	d
R_PPC64_TPREL16_HIGHESTA	elfdef.h	2009;"	d
R_PPC64_TPREL16_LO	elfdef.h	1979;"	d
R_PPC64_TPREL16_LO_DS	elfdef.h	2005;"	d
R_PPC64_TPREL64	elfdef.h	1982;"	d
R_PPC64_UADDR16	elfdef.h	1931;"	d
R_PPC64_UADDR32	elfdef.h	1930;"	d
R_PPC64_UADDR64	elfdef.h	1949;"	d
R_PPC_ADDR14	elfdef.h	1800;"	d
R_PPC_ADDR14_BRNTAKEN	elfdef.h	1802;"	d
R_PPC_ADDR14_BRTAKEN	elfdef.h	1801;"	d
R_PPC_ADDR16	elfdef.h	1796;"	d
R_PPC_ADDR16_HA	elfdef.h	1799;"	d
R_PPC_ADDR16_HI	elfdef.h	1798;"	d
R_PPC_ADDR16_LO	elfdef.h	1797;"	d
R_PPC_ADDR24	elfdef.h	1795;"	d
R_PPC_ADDR32	elfdef.h	1794;"	d
R_PPC_COPY	elfdef.h	1812;"	d
R_PPC_DIAB_RELSDA_HA	elfdef.h	1886;"	d
R_PPC_DIAB_RELSDA_HI	elfdef.h	1885;"	d
R_PPC_DIAB_RELSDA_LO	elfdef.h	1884;"	d
R_PPC_DIAB_SDA21_HA	elfdef.h	1883;"	d
R_PPC_DIAB_SDA21_HI	elfdef.h	1882;"	d
R_PPC_DIAB_SDA21_LO	elfdef.h	1881;"	d
R_PPC_DTPMOD32	elfdef.h	1833;"	d
R_PPC_DTPREL16	elfdef.h	1839;"	d
R_PPC_DTPREL16_HA	elfdef.h	1842;"	d
R_PPC_DTPREL16_HI	elfdef.h	1841;"	d
R_PPC_DTPREL16_LO	elfdef.h	1840;"	d
R_PPC_DTPREL32	elfdef.h	1843;"	d
R_PPC_EMB_BIT_FLD	elfdef.h	1877;"	d
R_PPC_EMB_MRKREF	elfdef.h	1872;"	d
R_PPC_EMB_NADDR16	elfdef.h	1864;"	d
R_PPC_EMB_NADDR16_HA	elfdef.h	1867;"	d
R_PPC_EMB_NADDR16_HI	elfdef.h	1866;"	d
R_PPC_EMB_NADDR16_LO	elfdef.h	1865;"	d
R_PPC_EMB_NADDR32	elfdef.h	1863;"	d
R_PPC_EMB_RELSDA	elfdef.h	1878;"	d
R_PPC_EMB_RELSEC16	elfdef.h	1873;"	d
R_PPC_EMB_RELST_HA	elfdef.h	1876;"	d
R_PPC_EMB_RELST_HI	elfdef.h	1875;"	d
R_PPC_EMB_RELST_LO	elfdef.h	1874;"	d
R_PPC_EMB_SDA21	elfdef.h	1871;"	d
R_PPC_EMB_SDA2I16	elfdef.h	1869;"	d
R_PPC_EMB_SDA2REL	elfdef.h	1870;"	d
R_PPC_EMB_SDAI16	elfdef.h	1868;"	d
R_PPC_GLOB_DAT	elfdef.h	1813;"	d
R_PPC_GOT16	elfdef.h	1807;"	d
R_PPC_GOT16_HA	elfdef.h	1810;"	d
R_PPC_GOT16_HI	elfdef.h	1809;"	d
R_PPC_GOT16_LO	elfdef.h	1808;"	d
R_PPC_GOT_DTPREL16	elfdef.h	1856;"	d
R_PPC_GOT_DTPREL16_HA	elfdef.h	1859;"	d
R_PPC_GOT_DTPREL16_HI	elfdef.h	1858;"	d
R_PPC_GOT_DTPREL16_LO	elfdef.h	1857;"	d
R_PPC_GOT_TLSGD16	elfdef.h	1844;"	d
R_PPC_GOT_TLSGD16_HA	elfdef.h	1847;"	d
R_PPC_GOT_TLSGD16_HI	elfdef.h	1846;"	d
R_PPC_GOT_TLSGD16_LO	elfdef.h	1845;"	d
R_PPC_GOT_TLSLD16	elfdef.h	1848;"	d
R_PPC_GOT_TLSLD16_HA	elfdef.h	1851;"	d
R_PPC_GOT_TLSLD16_HI	elfdef.h	1850;"	d
R_PPC_GOT_TLSLD16_LO	elfdef.h	1849;"	d
R_PPC_GOT_TPREL16	elfdef.h	1852;"	d
R_PPC_GOT_TPREL16_HA	elfdef.h	1855;"	d
R_PPC_GOT_TPREL16_HI	elfdef.h	1854;"	d
R_PPC_GOT_TPREL16_LO	elfdef.h	1853;"	d
R_PPC_IRELATIVE	elfdef.h	1889;"	d
R_PPC_JMP_SLOT	elfdef.h	1814;"	d
R_PPC_LOCAL24PC	elfdef.h	1816;"	d
R_PPC_NONE	elfdef.h	1793;"	d
R_PPC_PLT16_HA	elfdef.h	1824;"	d
R_PPC_PLT16_HI	elfdef.h	1823;"	d
R_PPC_PLT16_LO	elfdef.h	1822;"	d
R_PPC_PLT32	elfdef.h	1820;"	d
R_PPC_PLTREL24	elfdef.h	1811;"	d
R_PPC_PLTREL32	elfdef.h	1821;"	d
R_PPC_REL14	elfdef.h	1804;"	d
R_PPC_REL14_BRNTAKEN	elfdef.h	1806;"	d
R_PPC_REL14_BRTAKEN	elfdef.h	1805;"	d
R_PPC_REL16	elfdef.h	1892;"	d
R_PPC_REL16_HA	elfdef.h	1895;"	d
R_PPC_REL16_HI	elfdef.h	1894;"	d
R_PPC_REL16_LO	elfdef.h	1893;"	d
R_PPC_REL24	elfdef.h	1803;"	d
R_PPC_REL32	elfdef.h	1819;"	d
R_PPC_RELATIVE	elfdef.h	1815;"	d
R_PPC_SDAREL16	elfdef.h	1825;"	d
R_PPC_SECTOFF	elfdef.h	1826;"	d
R_PPC_SECTOFF_HA	elfdef.h	1829;"	d
R_PPC_SECTOFF_HI	elfdef.h	1828;"	d
R_PPC_SECTOFF_LO	elfdef.h	1827;"	d
R_PPC_TLS	elfdef.h	1832;"	d
R_PPC_TOC16	elfdef.h	1899;"	d
R_PPC_TPREL16	elfdef.h	1834;"	d
R_PPC_TPREL16_HA	elfdef.h	1837;"	d
R_PPC_TPREL16_HI	elfdef.h	1836;"	d
R_PPC_TPREL16_LO	elfdef.h	1835;"	d
R_PPC_TPREL32	elfdef.h	1838;"	d
R_PPC_UADDR16	elfdef.h	1818;"	d
R_PPC_UADDR32	elfdef.h	1817;"	d
R_SH_ALIGN	elfdef.h	2305;"	d
R_SH_CODE	elfdef.h	2306;"	d
R_SH_COPY	elfdef.h	2322;"	d
R_SH_COUNT	elfdef.h	2304;"	d
R_SH_DATA	elfdef.h	2307;"	d
R_SH_DIR32	elfdef.h	2292;"	d
R_SH_DIR8BP	elfdef.h	2298;"	d
R_SH_DIR8L	elfdef.h	2300;"	d
R_SH_DIR8W	elfdef.h	2299;"	d
R_SH_DIR8WPL	elfdef.h	2296;"	d
R_SH_DIR8WPN	elfdef.h	2294;"	d
R_SH_DIR8WPZ	elfdef.h	2297;"	d
R_SH_GLOB_DAT	elfdef.h	2323;"	d
R_SH_GNU_VTENTRY	elfdef.h	2311;"	d
R_SH_GNU_VTINHERIT	elfdef.h	2310;"	d
R_SH_GOT32	elfdef.h	2320;"	d
R_SH_GOTOFF	elfdef.h	2326;"	d
R_SH_GOTPC	elfdef.h	2327;"	d
R_SH_IND12W	elfdef.h	2295;"	d
R_SH_JMP_SLOT	elfdef.h	2324;"	d
R_SH_LABEL	elfdef.h	2308;"	d
R_SH_NONE	elfdef.h	2291;"	d
R_SH_NUM	elfdef.h	2329;"	d
R_SH_PLT32	elfdef.h	2321;"	d
R_SH_REL32	elfdef.h	2293;"	d
R_SH_RELATIVE	elfdef.h	2325;"	d
R_SH_SWITCH16	elfdef.h	2301;"	d
R_SH_SWITCH32	elfdef.h	2302;"	d
R_SH_SWITCH8	elfdef.h	2309;"	d
R_SH_TLS_DTPMOD32	elfdef.h	2317;"	d
R_SH_TLS_DTPOFF32	elfdef.h	2318;"	d
R_SH_TLS_GD_32	elfdef.h	2312;"	d
R_SH_TLS_IE_32	elfdef.h	2315;"	d
R_SH_TLS_LDO_32	elfdef.h	2314;"	d
R_SH_TLS_LD_32	elfdef.h	2313;"	d
R_SH_TLS_LE_32	elfdef.h	2316;"	d
R_SH_TLS_TPOFF32	elfdef.h	2319;"	d
R_SH_USES	elfdef.h	2303;"	d
R_SPARC_10	elfdef.h	1066;"	d
R_SPARC_11	elfdef.h	1067;"	d
R_SPARC_13	elfdef.h	1044;"	d
R_SPARC_16	elfdef.h	1035;"	d
R_SPARC_22	elfdef.h	1043;"	d
R_SPARC_32	elfdef.h	1036;"	d
R_SPARC_5	elfdef.h	1080;"	d
R_SPARC_6	elfdef.h	1081;"	d
R_SPARC_64	elfdef.h	1068;"	d
R_SPARC_7	elfdef.h	1079;"	d
R_SPARC_8	elfdef.h	1034;"	d
R_SPARC_COPY	elfdef.h	1052;"	d
R_SPARC_DISP16	elfdef.h	1038;"	d
R_SPARC_DISP32	elfdef.h	1039;"	d
R_SPARC_DISP64	elfdef.h	1082;"	d
R_SPARC_DISP8	elfdef.h	1037;"	d
R_SPARC_GLOB_DAT	elfdef.h	1053;"	d
R_SPARC_GLOB_JMP	elfdef.h	1078;"	d
R_SPARC_GNU_VTENTRY	elfdef.h	1127;"	d
R_SPARC_GNU_VTINHERIT	elfdef.h	1126;"	d
R_SPARC_GOT10	elfdef.h	1046;"	d
R_SPARC_GOT13	elfdef.h	1047;"	d
R_SPARC_GOT22	elfdef.h	1048;"	d
R_SPARC_GOTDATA_HIX22	elfdef.h	1116;"	d
R_SPARC_GOTDATA_LOX10	elfdef.h	1117;"	d
R_SPARC_GOTDATA_OP	elfdef.h	1120;"	d
R_SPARC_GOTDATA_OP_HIX22	elfdef.h	1118;"	d
R_SPARC_GOTDATA_OP_LOX10	elfdef.h	1119;"	d
R_SPARC_H34	elfdef.h	1121;"	d
R_SPARC_H44	elfdef.h	1086;"	d
R_SPARC_HH22	elfdef.h	1070;"	d
R_SPARC_HI22	elfdef.h	1042;"	d
R_SPARC_HIPLT22	elfdef.h	1061;"	d
R_SPARC_HIX22	elfdef.h	1084;"	d
R_SPARC_HM10	elfdef.h	1071;"	d
R_SPARC_IRELATIVE	elfdef.h	1125;"	d
R_SPARC_JMP_IREL	elfdef.h	1124;"	d
R_SPARC_JMP_SLOT	elfdef.h	1054;"	d
R_SPARC_L44	elfdef.h	1088;"	d
R_SPARC_LM22	elfdef.h	1072;"	d
R_SPARC_LO10	elfdef.h	1045;"	d
R_SPARC_LOPLT10	elfdef.h	1062;"	d
R_SPARC_LOX10	elfdef.h	1085;"	d
R_SPARC_M44	elfdef.h	1087;"	d
R_SPARC_NONE	elfdef.h	1033;"	d
R_SPARC_NUM	elfdef.h	1130;"	d
R_SPARC_OLO10	elfdef.h	1069;"	d
R_SPARC_PC10	elfdef.h	1049;"	d
R_SPARC_PC22	elfdef.h	1050;"	d
R_SPARC_PCPLT10	elfdef.h	1065;"	d
R_SPARC_PCPLT22	elfdef.h	1064;"	d
R_SPARC_PCPLT32	elfdef.h	1063;"	d
R_SPARC_PC_HH22	elfdef.h	1073;"	d
R_SPARC_PC_HM10	elfdef.h	1074;"	d
R_SPARC_PC_LM22	elfdef.h	1075;"	d
R_SPARC_PLT32	elfdef.h	1060;"	d
R_SPARC_PLT64	elfdef.h	1083;"	d
R_SPARC_REGISTER	elfdef.h	1089;"	d
R_SPARC_RELATIVE	elfdef.h	1055;"	d
R_SPARC_REV32	elfdef.h	1128;"	d
R_SPARC_SIZE32	elfdef.h	1122;"	d
R_SPARC_SIZE64	elfdef.h	1123;"	d
R_SPARC_TLS_DTPMOD32	elfdef.h	1110;"	d
R_SPARC_TLS_DTPMOD64	elfdef.h	1111;"	d
R_SPARC_TLS_DTPOFF32	elfdef.h	1112;"	d
R_SPARC_TLS_DTPOFF64	elfdef.h	1113;"	d
R_SPARC_TLS_GD_ADD	elfdef.h	1094;"	d
R_SPARC_TLS_GD_CALL	elfdef.h	1095;"	d
R_SPARC_TLS_GD_HI22	elfdef.h	1092;"	d
R_SPARC_TLS_GD_LO10	elfdef.h	1093;"	d
R_SPARC_TLS_IE_ADD	elfdef.h	1107;"	d
R_SPARC_TLS_IE_HI22	elfdef.h	1103;"	d
R_SPARC_TLS_IE_LD	elfdef.h	1105;"	d
R_SPARC_TLS_IE_LDX	elfdef.h	1106;"	d
R_SPARC_TLS_IE_LO10	elfdef.h	1104;"	d
R_SPARC_TLS_LDM_ADD	elfdef.h	1098;"	d
R_SPARC_TLS_LDM_CALL	elfdef.h	1099;"	d
R_SPARC_TLS_LDM_HI22	elfdef.h	1096;"	d
R_SPARC_TLS_LDM_LO10	elfdef.h	1097;"	d
R_SPARC_TLS_LDO_ADD	elfdef.h	1102;"	d
R_SPARC_TLS_LDO_HIX22	elfdef.h	1100;"	d
R_SPARC_TLS_LDO_LOX10	elfdef.h	1101;"	d
R_SPARC_TLS_LE_HIX22	elfdef.h	1108;"	d
R_SPARC_TLS_LE_LOX10	elfdef.h	1109;"	d
R_SPARC_TLS_TPOFF32	elfdef.h	1114;"	d
R_SPARC_TLS_TPOFF64	elfdef.h	1115;"	d
R_SPARC_UA16	elfdef.h	1091;"	d
R_SPARC_UA32	elfdef.h	1056;"	d
R_SPARC_UA64	elfdef.h	1090;"	d
R_SPARC_WDISP16	elfdef.h	1076;"	d
R_SPARC_WDISP19	elfdef.h	1077;"	d
R_SPARC_WDISP22	elfdef.h	1041;"	d
R_SPARC_WDISP30	elfdef.h	1040;"	d
R_SPARC_WPLT30	elfdef.h	1051;"	d
R_X86_64_16	elfdef.h	2461;"	d
R_X86_64_32	elfdef.h	2459;"	d
R_X86_64_32S	elfdef.h	2460;"	d
R_X86_64_64	elfdef.h	2449;"	d
R_X86_64_8	elfdef.h	2463;"	d
R_X86_64_COPY	elfdef.h	2453;"	d
R_X86_64_DTPMOD64	elfdef.h	2465;"	d
R_X86_64_DTPOFF32	elfdef.h	2472;"	d
R_X86_64_DTPOFF64	elfdef.h	2466;"	d
R_X86_64_GLOB_DAT	elfdef.h	2454;"	d
R_X86_64_GOT32	elfdef.h	2451;"	d
R_X86_64_GOT64	elfdef.h	2480;"	d
R_X86_64_GOTOFF64	elfdef.h	2477;"	d
R_X86_64_GOTPC32	elfdef.h	2478;"	d
R_X86_64_GOTPC32_TLSDESC	elfdef.h	2489;"	d
R_X86_64_GOTPC64	elfdef.h	2483;"	d
R_X86_64_GOTPCREL	elfdef.h	2457;"	d
R_X86_64_GOTPCREL64	elfdef.h	2481;"	d
R_X86_64_GOTPLT64	elfdef.h	2484;"	d
R_X86_64_GOTTPOFF	elfdef.h	2473;"	d
R_X86_64_IRELATIVE	elfdef.h	2493;"	d
R_X86_64_JUMP_SLOT	elfdef.h	2455;"	d
R_X86_64_NONE	elfdef.h	2448;"	d
R_X86_64_NUM	elfdef.h	2495;"	d
R_X86_64_PC16	elfdef.h	2462;"	d
R_X86_64_PC32	elfdef.h	2450;"	d
R_X86_64_PC64	elfdef.h	2476;"	d
R_X86_64_PC8	elfdef.h	2464;"	d
R_X86_64_PLT32	elfdef.h	2452;"	d
R_X86_64_PLTOFF64	elfdef.h	2485;"	d
R_X86_64_RELATIVE	elfdef.h	2456;"	d
R_X86_64_SIZE32	elfdef.h	2487;"	d
R_X86_64_SIZE64	elfdef.h	2488;"	d
R_X86_64_TLSDESC	elfdef.h	2492;"	d
R_X86_64_TLSDESC_CALL	elfdef.h	2490;"	d
R_X86_64_TLSGD	elfdef.h	2468;"	d
R_X86_64_TLSLD	elfdef.h	2470;"	d
R_X86_64_TPOFF32	elfdef.h	2475;"	d
R_X86_64_TPOFF64	elfdef.h	2467;"	d
RegisterState	interrupt.h	/^struct RegisterState {$/;"	s
RootObject	kobject.c	/^struct KObject *RootObject = 0;$/;"	v	typeref:struct:KObject
SCREEN_H	screen.h	2;"	d
SEEK_CUR	file.h	14;"	d
SEEK_END	file.h	15;"	d
SEEK_SET	file.h	13;"	d
SELFMAG	elfdef.h	88;"	d
SHF_ALLOC	elfdef.h	307;"	d
SHF_ALPHA_GPREL	elfdef.h	1726;"	d
SHF_ARM_COMDEF	elfdef.h	2074;"	d
SHF_ARM_ENTRYSECT	elfdef.h	2073;"	d
SHF_EXCLUDE	elfdef.h	321;"	d
SHF_EXECINSTR	elfdef.h	308;"	d
SHF_GROUP	elfdef.h	315;"	d
SHF_IA_64_NORECOV	elfdef.h	2175;"	d
SHF_IA_64_SHORT	elfdef.h	2174;"	d
SHF_INFO_LINK	elfdef.h	311;"	d
SHF_LINK_ORDER	elfdef.h	312;"	d
SHF_MASKOS	elfdef.h	317;"	d
SHF_MASKPROC	elfdef.h	318;"	d
SHF_MERGE	elfdef.h	309;"	d
SHF_MIPS_ADDR	elfdef.h	1235;"	d
SHF_MIPS_GPREL	elfdef.h	1233;"	d
SHF_MIPS_LOCAL	elfdef.h	1238;"	d
SHF_MIPS_MERGE	elfdef.h	1234;"	d
SHF_MIPS_NAMES	elfdef.h	1239;"	d
SHF_MIPS_NODUPE	elfdef.h	1240;"	d
SHF_MIPS_NOSTRIP	elfdef.h	1237;"	d
SHF_MIPS_STRINGS	elfdef.h	1236;"	d
SHF_ORDERED	elfdef.h	319;"	d
SHF_OS_NONCONFORMING	elfdef.h	313;"	d
SHF_PARISC_HUGE	elfdef.h	1554;"	d
SHF_PARISC_SBP	elfdef.h	1555;"	d
SHF_PARISC_SHORT	elfdef.h	1553;"	d
SHF_STRINGS	elfdef.h	310;"	d
SHF_TLS	elfdef.h	316;"	d
SHF_WRITE	elfdef.h	306;"	d
SHN_ABS	elfdef.h	260;"	d
SHN_AFTER	elfdef.h	255;"	d
SHN_BEFORE	elfdef.h	253;"	d
SHN_COMMON	elfdef.h	261;"	d
SHN_HIOS	elfdef.h	259;"	d
SHN_HIPROC	elfdef.h	257;"	d
SHN_HIRESERVE	elfdef.h	263;"	d
SHN_LOOS	elfdef.h	258;"	d
SHN_LOPROC	elfdef.h	252;"	d
SHN_LORESERVE	elfdef.h	251;"	d
SHN_MIPS_ACOMMON	elfdef.h	1183;"	d
SHN_MIPS_DATA	elfdef.h	1185;"	d
SHN_MIPS_SCOMMON	elfdef.h	1186;"	d
SHN_MIPS_SUNDEFINED	elfdef.h	1187;"	d
SHN_MIPS_TEXT	elfdef.h	1184;"	d
SHN_PARISC_ANSI_COMMON	elfdef.h	1541;"	d
SHN_PARISC_HUGE_COMMON	elfdef.h	1543;"	d
SHN_UNDEF	elfdef.h	250;"	d
SHN_XINDEX	elfdef.h	262;"	d
SHT_ALPHA_DEBUG	elfdef.h	1721;"	d
SHT_ALPHA_REGINFO	elfdef.h	1722;"	d
SHT_ARM_ATTRIBUTES	elfdef.h	2089;"	d
SHT_ARM_EXIDX	elfdef.h	2087;"	d
SHT_ARM_PREEMPTMAP	elfdef.h	2088;"	d
SHT_CHECKSUM	elfdef.h	289;"	d
SHT_DYNAMIC	elfdef.h	273;"	d
SHT_DYNSYM	elfdef.h	278;"	d
SHT_FINI_ARRAY	elfdef.h	280;"	d
SHT_GNU_ATTRIBUTES	elfdef.h	286;"	d
SHT_GNU_HASH	elfdef.h	287;"	d
SHT_GNU_LIBLIST	elfdef.h	288;"	d
SHT_GNU_verdef	elfdef.h	294;"	d
SHT_GNU_verneed	elfdef.h	295;"	d
SHT_GNU_versym	elfdef.h	296;"	d
SHT_GROUP	elfdef.h	282;"	d
SHT_HASH	elfdef.h	272;"	d
SHT_HIOS	elfdef.h	298;"	d
SHT_HIPROC	elfdef.h	300;"	d
SHT_HISUNW	elfdef.h	297;"	d
SHT_HIUSER	elfdef.h	302;"	d
SHT_IA_64_EXT	elfdef.h	2170;"	d
SHT_IA_64_UNWIND	elfdef.h	2171;"	d
SHT_INIT_ARRAY	elfdef.h	279;"	d
SHT_LOOS	elfdef.h	285;"	d
SHT_LOPROC	elfdef.h	299;"	d
SHT_LOSUNW	elfdef.h	290;"	d
SHT_LOUSER	elfdef.h	301;"	d
SHT_MIPS_AUXSYM	elfdef.h	1210;"	d
SHT_MIPS_CONFLICT	elfdef.h	1193;"	d
SHT_MIPS_CONTENT	elfdef.h	1202;"	d
SHT_MIPS_DEBUG	elfdef.h	1196;"	d
SHT_MIPS_DELTACLASS	elfdef.h	1217;"	d
SHT_MIPS_DELTADECL	elfdef.h	1219;"	d
SHT_MIPS_DELTAINST	elfdef.h	1216;"	d
SHT_MIPS_DELTASYM	elfdef.h	1215;"	d
SHT_MIPS_DENSE	elfdef.h	1207;"	d
SHT_MIPS_DWARF	elfdef.h	1218;"	d
SHT_MIPS_EH_REGION	elfdef.h	1227;"	d
SHT_MIPS_EVENTS	elfdef.h	1221;"	d
SHT_MIPS_EXTSYM	elfdef.h	1206;"	d
SHT_MIPS_FDESC	elfdef.h	1205;"	d
SHT_MIPS_GPTAB	elfdef.h	1194;"	d
SHT_MIPS_IFACE	elfdef.h	1201;"	d
SHT_MIPS_LIBLIST	elfdef.h	1191;"	d
SHT_MIPS_LINE	elfdef.h	1213;"	d
SHT_MIPS_LOCSTR	elfdef.h	1212;"	d
SHT_MIPS_LOCSYM	elfdef.h	1209;"	d
SHT_MIPS_MSYM	elfdef.h	1192;"	d
SHT_MIPS_OPTIONS	elfdef.h	1203;"	d
SHT_MIPS_OPTSYM	elfdef.h	1211;"	d
SHT_MIPS_PACKAGE	elfdef.h	1198;"	d
SHT_MIPS_PACKSYM	elfdef.h	1199;"	d
SHT_MIPS_PDESC	elfdef.h	1208;"	d
SHT_MIPS_PDR_EXCEPTION	elfdef.h	1229;"	d
SHT_MIPS_PIXIE	elfdef.h	1223;"	d
SHT_MIPS_REGINFO	elfdef.h	1197;"	d
SHT_MIPS_RELD	elfdef.h	1200;"	d
SHT_MIPS_RFDESC	elfdef.h	1214;"	d
SHT_MIPS_SHDR	elfdef.h	1204;"	d
SHT_MIPS_SYMBOL_LIB	elfdef.h	1220;"	d
SHT_MIPS_TRANSLATE	elfdef.h	1222;"	d
SHT_MIPS_UCODE	elfdef.h	1195;"	d
SHT_MIPS_WHIRL	elfdef.h	1226;"	d
SHT_MIPS_XLATE	elfdef.h	1224;"	d
SHT_MIPS_XLATE_DEBUG	elfdef.h	1225;"	d
SHT_MIPS_XLATE_OLD	elfdef.h	1228;"	d
SHT_NOBITS	elfdef.h	275;"	d
SHT_NOTE	elfdef.h	274;"	d
SHT_NULL	elfdef.h	267;"	d
SHT_NUM	elfdef.h	284;"	d
SHT_PARISC_DOC	elfdef.h	1549;"	d
SHT_PARISC_EXT	elfdef.h	1547;"	d
SHT_PARISC_UNWIND	elfdef.h	1548;"	d
SHT_PREINIT_ARRAY	elfdef.h	281;"	d
SHT_PROGBITS	elfdef.h	268;"	d
SHT_REL	elfdef.h	276;"	d
SHT_RELA	elfdef.h	271;"	d
SHT_SHLIB	elfdef.h	277;"	d
SHT_STRTAB	elfdef.h	270;"	d
SHT_SUNW_COMDAT	elfdef.h	292;"	d
SHT_SUNW_move	elfdef.h	291;"	d
SHT_SUNW_syminfo	elfdef.h	293;"	d
SHT_SYMTAB	elfdef.h	269;"	d
SHT_SYMTAB_SHNDX	elfdef.h	283;"	d
SMALL_BLOCK	tlsf.h	28;"	d
SPLIT_THREHOLD	tlsf.h	32;"	d
STB_GLOBAL	elfdef.h	374;"	d
STB_GNU_UNIQUE	elfdef.h	378;"	d
STB_HIOS	elfdef.h	379;"	d
STB_HIPROC	elfdef.h	381;"	d
STB_LOCAL	elfdef.h	373;"	d
STB_LOOS	elfdef.h	377;"	d
STB_LOPROC	elfdef.h	380;"	d
STB_MIPS_SPLIT_COMMON	elfdef.h	1254;"	d
STB_NUM	elfdef.h	376;"	d
STB_WEAK	elfdef.h	375;"	d
STN_UNDEF	elfdef.h	404;"	d
STO_ALPHA_NOPV	elfdef.h	1729;"	d
STO_ALPHA_STD_GPLOAD	elfdef.h	1730;"	d
STO_MIPS_DEFAULT	elfdef.h	1246;"	d
STO_MIPS_HIDDEN	elfdef.h	1248;"	d
STO_MIPS_INTERNAL	elfdef.h	1247;"	d
STO_MIPS_PLT	elfdef.h	1250;"	d
STO_MIPS_PROTECTED	elfdef.h	1249;"	d
STO_MIPS_SC_ALIGN_UNUSED	elfdef.h	1251;"	d
STT_ARM_16BIT	elfdef.h	2070;"	d
STT_ARM_TFUNC	elfdef.h	2069;"	d
STT_COMMON	elfdef.h	390;"	d
STT_FILE	elfdef.h	389;"	d
STT_FUNC	elfdef.h	387;"	d
STT_GNU_IFUNC	elfdef.h	394;"	d
STT_HIOS	elfdef.h	395;"	d
STT_HIPROC	elfdef.h	397;"	d
STT_HP_OPAQUE	elfdef.h	1561;"	d
STT_HP_STUB	elfdef.h	1562;"	d
STT_LOOS	elfdef.h	393;"	d
STT_LOPROC	elfdef.h	396;"	d
STT_NOTYPE	elfdef.h	385;"	d
STT_NUM	elfdef.h	392;"	d
STT_OBJECT	elfdef.h	386;"	d
STT_PARISC_MILLICODE	elfdef.h	1559;"	d
STT_SECTION	elfdef.h	388;"	d
STT_SPARC_REGISTER	elfdef.h	1016;"	d
STT_TLS	elfdef.h	391;"	d
STV_DEFAULT	elfdef.h	412;"	d
STV_HIDDEN	elfdef.h	414;"	d
STV_INTERNAL	elfdef.h	413;"	d
STV_PROTECTED	elfdef.h	415;"	d
SYMINFO_BT_LOWRESERVE	elfdef.h	351;"	d
SYMINFO_BT_PARENT	elfdef.h	350;"	d
SYMINFO_BT_SELF	elfdef.h	349;"	d
SYMINFO_CURRENT	elfdef.h	361;"	d
SYMINFO_FLG_COPY	elfdef.h	356;"	d
SYMINFO_FLG_DIRECT	elfdef.h	354;"	d
SYMINFO_FLG_LAZYLOAD	elfdef.h	357;"	d
SYMINFO_FLG_PASSTHRU	elfdef.h	355;"	d
SYMINFO_NONE	elfdef.h	360;"	d
SYMINFO_NUM	elfdef.h	362;"	d
SYSCALLS_H	syscalls.h	2;"	d
SYSCALL_H	syscall.h	2;"	d
SYSDEF_H	sysdef.h	2;"	d
TAR_LINK_DIR	fs/bootfs.c	17;"	d	file:
TAR_LINK_FILE	fs/bootfs.c	18;"	d	file:
TASK_H	task.h	2;"	d
TASK_H	task2.h	2;"	d
TASK_INTR_WAIT	task2.h	18;"	d
TASK_READY	task2.h	17;"	d
TASK_STATE_READY	task.h	7;"	d
TASK_STATE_WAIT	task.h	8;"	d
TASK_UNINTR_WAIT	task2.h	19;"	d
TASK_ZOMBIE	task2.h	20;"	d
TESTMOD_H	testmod.h	2;"	d
TIMER_H	timer.h	2;"	d
TLSFBlock	tlsf.h	/^struct TLSFBlock {$/;"	s
TLSFFreePtr	tlsf.h	/^struct TLSFFreePtr {$/;"	s
TLSFHeader	tlsf.h	/^struct TLSFHeader {$/;"	s
TLSF_H	tlsf.h	20;"	d
TLSF_SIGNATURE	tlsf.h	39;"	d
TOLOWER	util.c	485;"	d	file:
TSS	dtable.h	/^struct TSS {$/;"	s
TSSEntry	dtable.h	/^struct TSSEntry {$/;"	s
TSSPtr	dtable.h	/^struct TSSPtr {$/;"	s
TarHeader	fs/bootfs.c	/^struct TarHeader {$/;"	s	file:
Task	task.h	/^struct Task {$/;"	s
USER_ADDR_START	task2.h	15;"	d
USER_STACK_SIZE	task2.h	13;"	d
USER_STACK_START	task2.h	12;"	d
UTIL_H	util.h	2;"	d
VADDR_TO_PADDR	kmm.h	28;"	d
VER_DEF_CURRENT	elfdef.h	697;"	d
VER_DEF_NONE	elfdef.h	696;"	d
VER_DEF_NUM	elfdef.h	698;"	d
VER_FLG_BASE	elfdef.h	701;"	d
VER_FLG_WEAK	elfdef.h	702;"	d
VER_FLG_WEAK	elfdef.h	753;"	d
VER_NDX_ELIMINATE	elfdef.h	708;"	d
VER_NDX_GLOBAL	elfdef.h	706;"	d
VER_NDX_LOCAL	elfdef.h	705;"	d
VER_NDX_LORESERVE	elfdef.h	707;"	d
VER_NEED_CURRENT	elfdef.h	736;"	d
VER_NEED_NONE	elfdef.h	735;"	d
VER_NEED_NUM	elfdef.h	737;"	d
VFSDriverOperation	vfs2.h	/^struct VFSDriverOperation {$/;"	s
VFSOperation	vfs2.h	/^struct VFSOperation {$/;"	s
VFS_H	vfs.h	2;"	d
VFS_H	vfs2.h	2;"	d
VIRTUALBASE	loader32.s	/^VIRTUALBASE         equ 0xffffffffc0000000$/;"	d
VM	vmm.h	/^struct VM {$/;"	s
VMA	vmm.h	/^struct VMA {$/;"	s
VMA_ANON	prog/init.c	4;"	d	file:
VMA_ANON	vm.h	8;"	d
VMA_EXEC	prog/init.c	7;"	d	file:
VMA_EXEC	vm.h	11;"	d
VMA_FILE	prog/init.c	10;"	d	file:
VMA_FILE	vm.h	14;"	d
VMA_OWNER_KERNEL	vmm.h	30;"	d
VMA_OWNER_MASK	vmm.h	32;"	d
VMA_OWNER_UNKNOWN	vmm.h	29;"	d
VMA_OWNER_USER	vmm.h	31;"	d
VMA_PRIVATE	prog/init.c	9;"	d	file:
VMA_PRIVATE	vm.h	13;"	d
VMA_READ	prog/init.c	5;"	d	file:
VMA_READ	vm.h	9;"	d
VMA_SHARED	prog/init.c	11;"	d	file:
VMA_SHARED	vm.h	15;"	d
VMA_STACK	prog/init.c	8;"	d	file:
VMA_STACK	vm.h	12;"	d
VMA_STATUS_FREE	vmm.h	26;"	d
VMA_STATUS_INVALID	vmm.h	24;"	d
VMA_STATUS_MASK	vmm.h	27;"	d
VMA_STATUS_USED	vmm.h	25;"	d
VMA_TYPE_HEAP	vmm.h	36;"	d
VMA_TYPE_MASK	vmm.h	37;"	d
VMA_TYPE_STACK	vmm.h	35;"	d
VMA_TYPE_UNKNOWN	vmm.h	34;"	d
VMA_WRITE	prog/init.c	6;"	d	file:
VMA_WRITE	vm.h	10;"	d
VMM_H	vmm.h	20;"	d
VM_H	vm.h	2;"	d
VNODE_DIRECTORY	vfs.h	7;"	d
VNODE_DIRECTORY	vfs2.h	8;"	d
VNODE_FILE	vfs.h	6;"	d
VNODE_FILE	vfs2.h	7;"	d
VNODE_KOBJECT	vfs2.h	10;"	d
VNODE_SYMLINK	vfs2.h	9;"	d
VNode	vfs.h	/^struct VNode$/;"	s
VNodeInfo	vfs.h	/^struct VNodeInfo$/;"	s
Vnode	vfs2.h	/^struct Vnode {$/;"	s
VnodeOperations	vfs2.h	/^struct VnodeOperations {$/;"	s
_INTSIZEOF	common.h	17;"	d
_syscall_test	syscalls.c	/^void _syscall_test()$/;"	f
a_type	elfdef.h	/^  u32int a_type;		\/* Entry type *\/$/;"	m	struct:__anon36
a_un	elfdef.h	/^    } a_un;$/;"	m	struct:__anon36	typeref:union:__anon36::__anon37
a_val	elfdef.h	/^      u32int a_val;		\/* Integer value *\/$/;"	m	union:__anon36::__anon37
access	dtable.h	/^    u8int access;$/;"	m	struct:GDTEntry
accessed	paging.h	/^    u32int accessed : 1;$/;"	m	struct:__anon55
add	loader32.s	/^add     eax,4$/;"	l
add	loader32.s	/^add ebx, 0x1000              ; Add 0x1000 to the B-register.$/;"	l
add	loader32.s	/^add edi, 0x1000              ; Add 0x1000 to the destination index.$/;"	l
add	loader32.s	/^add edi, 0x1000$/;"	l
add	loader32.s	/^add edi, 8                   ; Add eight to the destination index.$/;"	l
add	loader32.s	/^add esi, 16$/;"	l
add	loader32.s	/^add rax, 0xfff$/;"	l
add	loader32.s	/^add rax, VIRTUALBASE$/;"	l
add	loader32.s	/^add rbp, VIRTUALBASE$/;"	l
add	loader32.s	/^add rbx, VIRTUALBASE$/;"	l
add	loader32.s	/^add rsi, 8$/;"	l
add	loader32.s	/^add rsi, [kernel64.offset]$/;"	l
add	loader32.s	/^add rsi, rbx                ; RDX is the Programe Header Offset in memory$/;"	l
add	loader32.s	/^add rsp, VIRTUALBASE$/;"	l
addObject	kobject.c	/^        } addObject;$/;"	m	union:KDirectoryProcessData::__anon50	typeref:struct:KDirectoryProcessData::__anon50::__anon53	file:
add_child	fs/ramfs.c	/^static void add_child(vnode_t *dir, vnode_t *node)$/;"	f	file:
add_dev	dev.c	/^void add_dev(dev_t *dev)$/;"	f
add_disk	disk.c	/^void add_disk(disk_t *disk)$/;"	f
add_partition	disk.c	/^void add_partition(disk_t *disk, u8int type, u32int start_blk, u32int nr_blks, u32int *start_part_no)$/;"	f
addr	module.h	/^    u32int addr;$/;"	m	struct:module_struct
addr	multiboot.h	/^    u32int addr;$/;"	m	struct:multiboot
addr	paging.h	/^    u32int addr : 20;$/;"	m	struct:__anon55
addr	paging.h	/^    u32int addr;$/;"	m	struct:__anon57
alloc_frame	paging.c	/^void alloc_frame(page_t *page, u32int is_user, u32int is_writable)$/;"	f
alloc_vnode	fs/ext2fs.c	/^static vnode_t *alloc_vnode(fs_t *fs,struct ext2_inode *inode)$/;"	f	file:
and	loader32.s	/^and rax, 0xfffffffffffff000$/;"	l
apm_table	multiboot.h	/^    u32int apm_table;$/;"	m	struct:multiboot
arg	kobject.c	/^    } arg;$/;"	m	struct:KDirectoryProcessData	typeref:union:KDirectoryProcessData::__anon50	file:
arr	testmod.c	/^u32int arr[63] = {1};$/;"	v
atapi_packet	ide.c	/^u8int atapi_packet[12] = {0xA8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v
atoi	util.c	/^s32int atoi(const char *nptr)$/;"	f
atol	util.h	64;"	d
attach	pci.h	/^    s32int (*attach)(pci_dev_t *pci_dev);$/;"	m	struct:__anon5
avail	paging.h	/^    u32int avail : 3;$/;"	m	struct:__anon55
availMemory	kmm.c	/^u64int availMemory() $/;"	f
base	dtable.h	/^    u64int base;$/;"	m	struct:GDTPtr
base	dtable.h	/^    u64int base;$/;"	m	struct:IDTPtr
base	dtable.h	/^    u64int base;$/;"	m	struct:TSSPtr
base	ide.c	/^    u16int base;  \/\/ I\/O Base.$/;"	m	struct:ide_channel_regs	file:
baseHigh	dtable.h	/^    u32int baseHigh;$/;"	m	struct:TSSEntry
baseHigh	dtable.h	/^    u8int baseHigh;$/;"	m	struct:GDTEntry
baseLow	dtable.h	/^    u16int baseLow;$/;"	m	struct:GDTEntry
baseLow	dtable.h	/^    u16int baseLow;$/;"	m	struct:TSSEntry
baseMiddle	dtable.h	/^    u8int baseMiddle;$/;"	m	struct:GDTEntry
baseMiddle	dtable.h	/^    u8int baseMiddle;$/;"	m	struct:TSSEntry
baseMiddle2	dtable.h	/^    u8int baseMiddle2;$/;"	m	struct:TSSEntry
basename	common.c	/^char *basename(char *s)$/;"	f
basename	util.c	/^char *basename(char *dest, const char *s)$/;"	f
bg_block_bitmap	fs/ext2fs.h	/^    u32int  bg_block_bitmap;        \/* Blocks bitmap block *\/$/;"	m	struct:ext2_group_desc
bg_free_blocks_count	fs/ext2fs.h	/^    u16int  bg_free_blocks_count;   \/* Free blocks count *\/$/;"	m	struct:ext2_group_desc
bg_free_inodes_count	fs/ext2fs.h	/^    u16int  bg_free_inodes_count;   \/* Free inodes count *\/$/;"	m	struct:ext2_group_desc
bg_inode_bitmap	fs/ext2fs.h	/^    u32int  bg_inode_bitmap;        \/* Inodes bitmap block *\/$/;"	m	struct:ext2_group_desc
bg_inode_table	fs/ext2fs.h	/^    u32int  bg_inode_table;     \/* Inodes table block *\/$/;"	m	struct:ext2_group_desc
bg_pad	fs/ext2fs.h	/^    u16int  bg_pad;$/;"	m	struct:ext2_group_desc
bg_reserved	fs/ext2fs.h	/^    u32int  bg_reserved[3];$/;"	m	struct:ext2_group_desc
bg_used_dirs_count	fs/ext2fs.h	/^    u16int  bg_used_dirs_count; \/* Directories count *\/$/;"	m	struct:ext2_group_desc
bgs	fs/ext2fs.c	/^    struct ext2_group_desc *bgs;$/;"	m	struct:__anon21	typeref:struct:__anon21::ext2_group_desc	file:
blk_size	disk.h	/^    u32int blk_size;$/;"	m	struct:disk_struct
blk_size	fs/ext2fs.c	/^    u32int blk_size;$/;"	m	struct:__anon21	file:
blockEnd	tlsf.h	/^    struct TLSFBlock *blockEnd;$/;"	m	struct:TLSFHeader	typeref:struct:TLSFHeader::TLSFBlock
blockHead	tlsf.h	/^    struct TLSFBlock *blockHead;$/;"	m	struct:TLSFHeader	typeref:struct:TLSFHeader::TLSFBlock
block_no	fs/ext2fs.c	/^static u32int block_no(fs_t *fs,struct ext2_inode *inode, u32int off)$/;"	f	file:
bmide	ide.c	/^    u16int bmide; \/\/ Bus Master IDE$/;"	m	struct:ide_channel_regs	file:
boot_device	multiboot.h	/^    u32int boot_device;$/;"	m	struct:multiboot
boot_loader_name	multiboot.h	/^    u32int boot_loader_name;$/;"	m	struct:multiboot
bootfsClose	fs/bootfs.c	/^s64int bootfsClose(struct FileSystem *fs, s64int id)$/;"	f
bootfsDriver	fs/bootfs.c	/^struct FileSystemDriver bootfsDriver = {$/;"	v	typeref:struct:FileSystemDriver
bootfsFinddir	fs/bootfs.c	/^s64int bootfsFinddir(struct FileSystem *fs, s64int id, const char *name)$/;"	f
bootfsMount	fs/bootfs.c	/^s64int bootfsMount(struct FileSystemDriver *driver, struct FileSystem **fs, const char *source, u64int flags, void *data)$/;"	f
bootfsOpen	fs/bootfs.c	/^s64int bootfsOpen(struct FileSystem *fs, s64int id)$/;"	f
bootfsRead	fs/bootfs.c	/^s64int bootfsRead(struct FileSystem *fs, s64int id, u64int offset, u64int size, char *buffer)$/;"	f
bootfsReaddir	fs/bootfs.c	/^s64int bootfsReaddir(struct FileSystem *fs, s64int id, u64int bufSize, char *buf)$/;"	f
bootfsRoot	fs/bootfs.c	/^s64int bootfsRoot(struct FileSystem *fs)$/;"	f
bootfsStat	fs/bootfs.c	/^s64int bootfsStat(struct FileSystem *fs, s64int id, struct VNodeInfo *info)$/;"	f
bootfsUnmount	fs/bootfs.c	/^s64int bootfsUnmount(struct FileSystemDriver *driver, struct FileSystem *fs)$/;"	f
brk	vm.h	/^    u32int brk;$/;"	m	struct:vm_struct
buf	fs/bootfs.c	/^    char *buf;$/;"	m	struct:BootFSData	file:
buf	kobject.c	/^            char *buf;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon51	file:
bufSize	kobject.c	/^            u64int bufSize;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon51	file:
buffer	fs/ramfs.c	/^    u8int *buffer;$/;"	m	struct:__anon20	file:
buffer	tlsf.h	/^        u8int *buffer;$/;"	m	union:TLSFBlock::__anon49
buffer	vfs.h	/^    char buffer[1];$/;"	m	struct:DirectoryRecord
bus	pci.h	/^    u32int bus, slot, func;$/;"	m	struct:pci_dev_struct
c_dev	cpio.h	/^    u16int c_dev;$/;"	m	struct:header_cpio_struct
c_filesize	cpio.h	/^    u16int c_filesize[2];$/;"	m	struct:header_cpio_struct
c_gid	cpio.h	/^    u16int c_gid;$/;"	m	struct:header_cpio_struct
c_ino	cpio.h	/^    u16int c_ino;$/;"	m	struct:header_cpio_struct
c_magic	cpio.h	/^    u16int c_magic;$/;"	m	struct:header_cpio_struct
c_mode	cpio.h	/^    u16int c_mode;$/;"	m	struct:header_cpio_struct
c_mtime	cpio.h	/^    u16int c_mtime[2];$/;"	m	struct:header_cpio_struct
c_namesize	cpio.h	/^    u16int c_namesize;$/;"	m	struct:header_cpio_struct
c_nlink	cpio.h	/^    u16int c_nlink;$/;"	m	struct:header_cpio_struct
c_rdev	cpio.h	/^    u16int c_rdev;$/;"	m	struct:header_cpio_struct
c_uid	cpio.h	/^    u16int c_uid;$/;"	m	struct:header_cpio_struct
capabilities	ide.c	/^    u16int capabilities;        \/\/ Features.$/;"	m	struct:ide_device	file:
channel	ide.c	/^    u8int channel;     \/\/ 0 (Primary Channel) or 1 (Secondary Channel).$/;"	m	struct:ide_device	file:
channels	ide.c	/^} channels[2];$/;"	v	typeref:struct:ide_channel_regs
checkSum	fs/bootfs.c	/^    char checkSum[8];$/;"	m	struct:TarHeader	file:
children	fs/ramfs.c	/^    vnode_list_t *children;$/;"	m	struct:__anon20	file:
children	kobject.c	/^    struct KObjectListNode *children;$/;"	m	struct:KDirectoryObjectData	typeref:struct:KDirectoryObjectData::KObjectListNode	file:
class_code	pci.h	/^    u8int revision, prog_if, subclass, class_code;$/;"	m	struct:__anon2
cleanup	module.h	/^    module_cleanup_func cleanup;$/;"	m	struct:module_struct
clearBit	tlsf.c	/^void clearBit(u64int *x, u64int i)$/;"	f
clear_bit	fs/ext2fs.c	/^static s32int clear_bit(u8int *buf, u32int off)$/;"	f	file:
clear_frame	paging.c	/^void clear_frame(u32int frame_addr)$/;"	f
cli	loader32.s	/^cli                           ; Clear the interrupt flag.$/;"	l
clone_directory	paging.c	/^page_directory_t *clone_directory(page_directory_t *dir)$/;"	f
clone_file	file.c	/^file_t *clone_file(file_t *f)$/;"	f
clone_file_mapping	file.c	/^file_mapping_t *clone_file_mapping(file_mapping_t *f_map)$/;"	f
clone_table	paging.c	/^page_table_t *clone_table(page_table_t *table, u32int *phys)$/;"	f
clone_task_directory	task2.c	/^page_directory_t* clone_task_directory(page_directory_t *dir, vm_t *vm)$/;"	f
clone_vm	vm.c	/^vm_t *clone_vm(vm_t *vm)$/;"	f
clone_vma	vm.c	/^vma_t *clone_vma(vma_t *vma)$/;"	f
close	vfs.h	/^    s64int (*close)(struct FileSystem *fs, s64int id);$/;"	m	struct:FileSystemOperation
close	vfs2.h	/^    s64int   (*close)   (file_t *f);$/;"	m	struct:VnodeOperations
cmdline	multiboot.h	/^    u32int cmdline;$/;"	m	struct:multiboot
cmdline	multiboot.h	/^    u32int cmdline;$/;"	m	struct:multiboot_mod_list
cmp	loader32.s	/^cmp eax, 1$/;"	l
cmp	loader32.s	/^cmp eax, 2$/;"	l
cmp	loader32.s	/^cmp rax, rbx$/;"	l
command_sets	ide.c	/^    u32int command_sets; \/\/ Command Sets Supported.$/;"	m	struct:ide_device	file:
config	pci.h	/^    pci_config_t *config;$/;"	m	struct:pci_dev_struct
config_table	multiboot.h	/^    u32int config_table;$/;"	m	struct:multiboot
construct	kobject.h	/^    struct KObject *(*construct)(struct Klass *klass, struct KObject *parent, const char *name, void *data);$/;"	m	struct:Klass	typeref:struct:Klass::construct
constructKDirectory	kobject.c	/^struct KObject *constructKDirectory(struct Klass *self, struct KObject *parent, const char *name, void *initData)$/;"	f
copy_from_user	task2.c	/^s32int copy_from_user(void *kbuf, void *ubuf, u32int n)$/;"	f
copy_page	paging.c	/^void copy_page(page_t *src, page_t *dst)$/;"	f
copy_physical_frame	process.s	/^copy_physical_frame:$/;"	l
copy_to_user	task2.c	/^s32int copy_to_user(void *ubuf, void *kbuf, u32int n)$/;"	f
count	kobject.c	/^    u64int count;$/;"	m	struct:KDirectoryObjectData	file:
covered	vfs2.h	/^    vnode_t *covered;$/;"	m	struct:Vnode
cr3	vmm.h	/^    u64int cr3;$/;"	m	struct:VM
create_order_array	order_array.c	/^order_array_t create_order_array(u32int max_size, less_than_func_t func)$/;"	f
createfs	vfs2.h	/^    fs_t* (*createfs)(struct fs_driver *, char *path, u64int flags, void *data);$/;"	m	struct:VFSDriverOperation
cs	interrupt.h	/^    u64int rip, cs, rflags, rsp, ss;$/;"	m	struct:RegisterState
ctrl	ide.c	/^    u16int ctrl;  \/\/ Control Base$/;"	m	struct:ide_channel_regs	file:
currentTask	task.c	/^struct Task *currentTask;$/;"	v	typeref:struct:Task
current_dir	paging.c	/^page_directory_t *current_dir = 0;$/;"	v
current_task	task2.c	/^task_t *current_task = 0;$/;"	v
cursor_x	screen.c	/^u8int cursor_x, cursor_y;$/;"	v
cursor_y	screen.c	/^u8int cursor_x, cursor_y;$/;"	v
d	file.h	/^    dir_t *d;$/;"	m	struct:fd_struct
d_ptr	elfdef.h	/^      Elf32_Addr d_ptr;			\/* Address value *\/$/;"	m	union:__anon30::__anon31
d_tag	elfdef.h	/^  Elf32_Sword	d_tag;			\/* Dynamic entry type *\/$/;"	m	struct:__anon30
d_un	elfdef.h	/^    } d_un;$/;"	m	struct:__anon30	typeref:union:__anon30::__anon31
d_val	elfdef.h	/^      Elf32_Word d_val;			\/* Integer value *\/$/;"	m	union:__anon30::__anon31
data	kobject.h	/^    void *data;$/;"	m	struct:KOD
data	kobject.h	/^    void *data;$/;"	m	struct:KObject
data	kobject.h	/^    void *data;$/;"	m	struct:Klass
data	loader32.s	/^data:$/;"	l
data	vfs.h	/^    void *data;$/;"	m	struct:FileSystem
db	loader32.s	/^db 0                         ; Access.$/;"	l
db	loader32.s	/^db 0                         ; Base (high).$/;"	l
db	loader32.s	/^db 0                         ; Base (middle)$/;"	l
db	loader32.s	/^db 0                         ; Granularity.$/;"	l
db	loader32.s	/^db 00100000b                 ; Granularity.$/;"	l
db	loader32.s	/^db 10010010b                 ; Access.$/;"	l
db	loader32.s	/^db 10011010b                 ; Access.$/;"	l
dd	loader32.s	/^dd  00                       ; End of kernel '.data' section.$/;"	l
dd	loader32.s	/^dd  00                       ; End of kernel.$/;"	l
dd	loader32.s	/^dd  MBOOT_CHECKSUM            ; To ensure that the above values are correct$/;"	l
dd	loader32.s	/^dd  MBOOT_HEADER_FLAGS        ; How GRUB should load your file \/ settings$/;"	l
dd	loader32.s	/^dd  MBOOT_HEADER_MAGIC        ; GRUB will search for this value on each$/;"	l
dd	loader32.s	/^dd  mboot                     ; Location of this descriptor$/;"	l
dd	loader32.s	/^dd  mboot                   ; Start of kernel '.text' (code) section.$/;"	l
dd	loader32.s	/^dd  start                     ; Kernel entry point (initial EIP).$/;"	l
deattach	pci.h	/^    s32int (*deattach)(pci_dev_t *pci_dev);$/;"	m	struct:__anon5
del_dev	dev.c	/^void del_dev(dev_t *dev)$/;"	f
del_disk	disk.c	/^void del_disk(disk_t *disk)$/;"	f
dentry_struct	file.h	/^typedef struct dentry_struct {$/;"	s
dentry_t	file.h	/^} dentry_t;$/;"	t	typeref:struct:dentry_struct
destruct	kobject.h	/^    void (*destruct)(struct Klass *klass, struct KObject *object);$/;"	m	struct:Klass
destructKDirectory	kobject.c	/^void destructKDirectory(struct Klass *self, struct KObject *object)$/;"	f
dev_i8042	i8042.c	/^dev_t *dev_i8042;$/;"	v
dev_i8042_fops	i8042.c	/^struct file_operations dev_i8042_fops = {$/;"	v	typeref:struct:file_operations
dev_id	dev.h	/^    u32int dev_id;$/;"	m	struct:dev_struct
dev_id	disk.h	/^    u32int dev_id;$/;"	m	struct:disk_struct
dev_id	vfs2.h	/^    u64int dev_id;   \/\/ set by fs driver to identify the vnode, or (major, minor) if it's a device$/;"	m	struct:Vnode
dev_struct	dev.h	/^typedef struct dev_struct {$/;"	s
dev_t	dev.h	/^} dev_t;$/;"	t	typeref:struct:dev_struct
devf	fs/ext2fs.c	/^    file_t *devf;$/;"	m	struct:__anon21	file:
device	pci.h	/^    u16int vendor, device;$/;"	m	struct:__anon2
devs	dev.c	/^dev_t *devs = 0;$/;"	v
dir	task2.h	/^    page_directory_t *dir;$/;"	m	struct:task
dir_close	file.c	/^s32int dir_close(dir_t *d)$/;"	f
dir_open	file.c	/^dir_t*  dir_open    (char *path, u32int flags)$/;"	f
dir_struct	file.h	/^typedef struct dir_struct {$/;"	s
dir_t	file.h	/^} dir_t;$/;"	t	typeref:struct:dir_struct
directoryKlass	kobject.c	/^struct Klass *directoryKlass = 0;$/;"	v	typeref:struct:Klass
dirname	common.c	/^char *dirname(char *dest, char *s)$/;"	f
dirname	util.c	/^char *dirname(char *dest, const char *s)$/;"	f
dirty	paging.h	/^    u32int dirty : 1;$/;"	m	struct:__anon55
disk	disk.h	/^    disk_t *disk;$/;"	m	struct:partition_struct
disk_close	disk.c	/^static s32int disk_close(file_t *f)$/;"	f	file:
disk_fops	disk.c	/^struct file_operations disk_fops = {$/;"	v	typeref:struct:file_operations
disk_open	disk.c	/^static s32int disk_open(file_t *f)$/;"	f	file:
disk_read	disk.c	/^static s32int disk_read(file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
disk_struct	disk.h	/^struct disk_struct {$/;"	s
disk_t	disk.h	/^typedef struct disk_struct disk_t; $/;"	t	typeref:struct:disk_struct
disk_write	disk.c	/^static s32int disk_write(file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
disks	disk.c	/^disk_t *disks = 0;$/;"	v
do_disk_read	disk.c	/^static u32int do_disk_read(disk_t *d, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
do_disk_write	disk.c	/^static u32int do_disk_write(disk_t *d, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
dot_dentry	fs/ext2fs.c	/^struct ext2_dir_entry dot_dentry = {$/;"	v	typeref:struct:ext2_dir_entry
dotdot_dentry	fs/ext2fs.c	/^struct ext2_dir_entry dotdot_dentry = {$/;"	v	typeref:struct:ext2_dir_entry
dq	loader32.s	/^dq 0                        ; Initrd address$/;"	l
dq	loader32.s	/^dq 0                        ; Initrd end$/;"	l
dq	loader32.s	/^dq 0                        ; Memory info.$/;"	l
dq	loader32.s	/^dq 0$/;"	l
dq	loader32.s	/^dq gdt64                     ; Base.$/;"	l
drive	ide.c	/^    u8int drive;       \/\/ 0 (Master Drive) or 1 (Slave Drive).$/;"	m	struct:ide_device	file:
driver	fs/initrdfs.c	/^fs_driver_t *driver;$/;"	v
driver	pci.h	/^    pci_driver_t *driver;$/;"	m	struct:pci_dev_struct
driver	vfs.h	/^    struct FileSystemDriver *driver;$/;"	m	struct:FileSystem	typeref:struct:FileSystem::FileSystemDriver
driver	vfs2.h	/^    struct fs_driver *driver;$/;"	m	struct:fs_struct	typeref:struct:fs_struct::fs_driver
driverOps	fs/bootfs.c	/^struct FileSystemDriverOperation driverOps = {$/;"	v	typeref:struct:FileSystemDriverOperation
drives_addr	multiboot.h	/^    u32int drives_addr;$/;"	m	struct:multiboot
drives_length	multiboot.h	/^    u32int drives_length;$/;"	m	struct:multiboot
drop_node	vfs2.h	/^    void (*drop_node) (fs_t *fs, vnode_t*node);$/;"	m	struct:VFSOperation
drv	ide.c	/^pci_driver_t drv = { $/;"	v
dump	kobject.h	/^    void (*dump)(struct KObject *);$/;"	m	struct:KObject
dumpKDirectory	kobject.c	/^void dumpKDirectory(struct KObject *object)$/;"	f
dump_order_array	order_array.c	/^void dump_order_array(order_array_t *array)$/;"	f
dump_pci_dev	pci.c	/^static void dump_pci_dev(pci_dev_t *dev)$/;"	f	file:
dw	loader32.s	/^dw $ - gdt64 - 1             ; Limit.$/;"	l
dw	loader32.s	/^dw 0                         ; Base (low).$/;"	l
dw	loader32.s	/^dw 0                         ; Limit (low).$/;"	l
e_ehsize	elfdef.h	/^  Elf32_Half	e_ehsize;		\/* ELF header size in bytes *\/$/;"	m	struct:__anon23
e_entry	elfdef.h	/^  Elf32_Addr	e_entry;		\/* Entry point virtual address *\/$/;"	m	struct:__anon23
e_flags	elfdef.h	/^  Elf32_Word	e_flags;		\/* Processor-specific flags *\/$/;"	m	struct:__anon23
e_ident	elfdef.h	/^  unsigned char	e_ident[EI_NIDENT];	\/* Magic number and other info *\/$/;"	m	struct:__anon23
e_machine	elfdef.h	/^  Elf32_Half	e_machine;		\/* Architecture *\/$/;"	m	struct:__anon23
e_phentsize	elfdef.h	/^  Elf32_Half	e_phentsize;		\/* Program header table entry size *\/$/;"	m	struct:__anon23
e_phnum	elfdef.h	/^  Elf32_Half	e_phnum;		\/* Program header table entry count *\/$/;"	m	struct:__anon23
e_phoff	elfdef.h	/^  Elf32_Off	e_phoff;		\/* Program header table file offset *\/$/;"	m	struct:__anon23
e_shentsize	elfdef.h	/^  Elf32_Half	e_shentsize;		\/* Section header table entry size *\/$/;"	m	struct:__anon23
e_shnum	elfdef.h	/^  Elf32_Half	e_shnum;		\/* Section header table entry count *\/$/;"	m	struct:__anon23
e_shoff	elfdef.h	/^  Elf32_Off	e_shoff;		\/* Section header table file offset *\/$/;"	m	struct:__anon23
e_shstrndx	elfdef.h	/^  Elf32_Half	e_shstrndx;		\/* Section header string table index *\/$/;"	m	struct:__anon23
e_type	elfdef.h	/^  Elf32_Half	e_type;			\/* Object file type *\/$/;"	m	struct:__anon23
e_version	elfdef.h	/^  Elf32_Word	e_version;		\/* Object file version *\/$/;"	m	struct:__anon23
ebp	task2.h	/^    u32int ebp;$/;"	m	struct:task
eip	task2.h	/^    u32int eip;$/;"	m	struct:task
empty_dentry	fs/ext2fs.c	/^struct ext2_dir_entry empty_dentry = {$/;"	v	typeref:struct:ext2_dir_entry
end	vm.h	/^    u32int end;$/;"	m	struct:vma_struct
end_stack	vm.h	/^    u32int end_stack;   \/\/ initially (0xd0000000 - 0x1000)$/;"	m	struct:vm_struct
entry	vm.h	/^    u32int entry;      \/\/ task's entry point$/;"	m	struct:vm_struct
errcode	interrupt.h	/^    u64int number, errcode;$/;"	m	struct:RegisterState
esp	task2.h	/^    u32int esp;$/;"	m	struct:task
execve	task2.c	/^s32int execve(char *path, char **argv, char **envp)$/;"	f
exists	ide.c	/^    u8int exists;    \/\/ 0 (Empty) or 1 (This Drive really exists).$/;"	m	struct:ide_device	file:
exit	task2.c	/^void exit(s32int ret)$/;"	f
expand_blocks	fs/ext2fs.c	/^static void expand_blocks(fs_t *fs,struct ext2_inode *inode,u32int new_blocks,u32int bg_hint)$/;"	f	file:
expires	task2.h	/^    u32int expires;$/;"	m	struct:timer_queue_struct
ext2_dir_entry	fs/ext2fs.h	/^struct ext2_dir_entry {$/;"	s
ext2_group_desc	fs/ext2fs.h	/^struct ext2_group_desc$/;"	s
ext2_inode	fs/ext2fs.h	/^struct ext2_inode {$/;"	s
ext2_super_block	fs/ext2fs.h	/^struct ext2_super_block {$/;"	s
ext2fs_cleanup	fs/ext2fs.c	/^void    ext2fs_cleanup(struct fs_driver *fs_drv)$/;"	f
ext2fs_close	fs/ext2fs.c	/^s32int   ext2fs_close   (file_t *f)$/;"	f
ext2fs_create	fs/ext2fs.c	/^s32int ext2fs_create  (vnode_t *dir, char *name, u32int flags)$/;"	f
ext2fs_createfs	fs/ext2fs.c	/^fs_t*   ext2fs_createfs(struct fs_driver *drv, char *path, u32int flags, void *data)$/;"	f
ext2fs_drop_node	fs/ext2fs.c	/^void ext2fs_drop_node(fs_t *fs, vnode_t *node)$/;"	f
ext2fs_drv	fs/ext2fs.c	/^struct fs_driver ext2fs_drv = {$/;"	v	typeref:struct:fs_driver
ext2fs_drv_ops	fs/ext2fs.c	/^struct fs_driver_operations ext2fs_drv_ops = {$/;"	v	typeref:struct:fs_driver_operations
ext2fs_fops	fs/ext2fs.c	/^struct file_operations ext2fs_fops = {$/;"	v	typeref:struct:file_operations
ext2fs_get_root	fs/ext2fs.c	/^vnode_t* ext2fs_get_root(fs_t *fs)$/;"	f
ext2fs_init	fs/ext2fs.c	/^void    ext2fs_init(struct fs_driver *fs_drv)$/;"	f
ext2fs_lookup	fs/ext2fs.c	/^vnode_t* ext2fs_lookup(fs_t *fs, char *path)$/;"	f
ext2fs_mkdir	fs/ext2fs.c	/^s32int ext2fs_mkdir   (vnode_t *dir, char *name, u32int flags)$/;"	f
ext2fs_mknod	fs/ext2fs.c	/^s32int ext2fs_mknod   (vnode_t *dir, char *name, u32int dev_id, u32int flags)$/;"	f
ext2fs_open	fs/ext2fs.c	/^s32int   ext2fs_open    (file_t *f)$/;"	f
ext2fs_ops	fs/ext2fs.c	/^struct fs_operations ext2fs_ops = {$/;"	v	typeref:struct:fs_operations
ext2fs_priv_t	fs/ext2fs.c	/^} ext2fs_priv_t;$/;"	t	typeref:struct:__anon21	file:
ext2fs_read	fs/ext2fs.c	/^s32int   ext2fs_read    (file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f
ext2fs_removefs	fs/ext2fs.c	/^void    ext2fs_removefs(struct fs_driver *fs_drv, fs_t *fs)$/;"	f
ext2fs_rename	fs/ext2fs.c	/^s32int ext2fs_rename (vnode_t *dir, char *old_name, char *name)$/;"	f
ext2fs_rm	fs/ext2fs.c	/^s32int   ext2fs_rm      (vnode_t *dir, char *name)$/;"	f
ext2fs_rmdir	fs/ext2fs.c	/^s32int   ext2fs_rmdir   (vnode_t *dir, char *name)$/;"	f
ext2fs_subnodes	fs/ext2fs.c	/^s32int   ext2fs_subnodes(vnode_t *dir, vnode_t ***nodes)$/;"	f
ext2fs_vnode_priv_t	fs/ext2fs.c	/^} ext2fs_vnode_priv_t;$/;"	t	typeref:struct:__anon22	file:
ext2fs_vops	fs/ext2fs.c	/^struct vnode_operations ext2fs_vops = {$/;"	v	typeref:struct:vnode_operations
ext2fs_write	fs/ext2fs.c	/^s32int   ext2fs_write   (file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f
extractPath	vfs.c	/^s64int extractPath(char *path, char *name)$/;"	f
extract_cpio	cpio.c	/^s32int extract_cpio(u8int *buf, u32int size)$/;"	f
f	file.h	/^    file_t *f;$/;"	m	struct:fd_struct
f_ops	dev.h	/^    struct file_operations *f_ops;$/;"	m	struct:dev_struct	typeref:struct:dev_struct::file_operations
f_ops	file.h	/^    struct file_operations *f_ops;$/;"	m	struct:file_struct	typeref:struct:file_struct::file_operations
f_ops	vfs2.h	/^    struct file_operations  *f_ops;$/;"	m	struct:Vnode	typeref:struct:Vnode::file_operations
fd	file.h	/^    s32int fd;$/;"	m	struct:__anon48
fd	task2.h	/^    struct fd_struct *fd[MAX_TASK_FDS];$/;"	m	struct:task	typeref:struct:task::fd_struct
fd_struct	file.h	/^typedef struct fd_struct {$/;"	s
fd_t	file.h	/^} fd_t;$/;"	t	typeref:struct:fd_struct
fd_valid	file.c	/^static u32int fd_valid(u32int fd)$/;"	f	file:
file	file.h	/^    file_t *file;$/;"	m	struct:__anon48
file	task2.h	/^    file_t *file;$/;"	m	struct:task
file_close	file.c	/^s32int file_close(file_t *f)$/;"	f
file_lseek	file.c	/^s32int file_lseek(file_t *f, s32int offset, u32int whence)$/;"	f
file_mapping_t	file.h	/^} file_mapping_t;$/;"	t	typeref:struct:__anon48
file_nodes	fs/initrdfs.c	/^vnode_t *file_nodes;$/;"	v
file_open	file.c	/^file_t* file_open(char *path, u32int flags)$/;"	f
file_read	file.c	/^s32int file_read(file_t *f, void *buf, u32int sz)$/;"	f
file_struct	file.h	/^struct file_struct {$/;"	s
file_t	file.h	/^typedef struct file_struct file_t;$/;"	t	typeref:struct:file_struct
file_type	fs/ext2fs.h	/^	u8int	file_type;$/;"	m	struct:ext2_dir_entry
file_write	file.c	/^s32int file_write(file_t *f, void *buf, u32int sz)$/;"	f
findDir	kobject.c	/^        } findDir;$/;"	m	union:KDirectoryProcessData::__anon50	typeref:struct:KDirectoryProcessData::__anon50::__anon52	file:
findMountPointPrefix	vfs.c	/^struct MountPoint *findMountPointPrefix(const char *path)$/;"	f
find_child	fs/ramfs.c	/^static vnode_t *find_child(vnode_t *dir, char *name)$/;"	f	file:
find_dev	dev.c	/^dev_t *find_dev(u32int id)$/;"	f
finddir	vfs.h	/^    s64int (*finddir)(struct FileSystem *fs, s64int id, const char *name);$/;"	m	struct:FileSystemOperation
first_frame	paging.c	/^u32int first_frame()$/;"	f
flBitmap	tlsf.h	/^    u64int flBitmap;$/;"	m	struct:TLSFHeader
flags	file.h	/^    u32int flags;$/;"	m	struct:dentry_struct
flags	file.h	/^    u32int flags;$/;"	m	struct:file_struct
flags	multiboot.h	/^    u32int flags;$/;"	m	struct:multiboot
flags	vfs.h	/^    u64int flags;$/;"	m	struct:VNode
flags	vfs2.h	/^    u64int flags;   \/\/filetype $/;"	m	struct:Vnode
flags	vm.h	/^    u32int flags;$/;"	m	struct:vma_struct
flags	vmm.h	/^    u64int flags;$/;"	m	struct:VMA
flushGDT	flushdtable.s	/^flushGDT:$/;"	l
flushIDT	flushdtable.s	/^flushIDT:$/;"	l
flushTSS	flushdtable.s	/^flushTSS:$/;"	l
fork	syscall.h	/^DECL_SYSCALL_0(fork);$/;"	v
fork	task2.c	/^u32int fork()$/;"	f
frames	paging.c	/^u32int *frames = 0;$/;"	v
free	tlsf.h	/^        struct TLSFFreePtr free;$/;"	m	union:TLSFBlock::__anon49	typeref:struct:TLSFBlock::__anon49::TLSFFreePtr
freeMemStartAddr	bootinfo.h	/^    u64int freeMemStartAddr;$/;"	m	struct:BootInfo
freeMemoryStart	kmm.c	/^u64int freeMemoryStart;                     $/;"	v
free_page	paging.c	/^void free_page(page_t *page)$/;"	f
free_vmas	vm.c	/^void free_vmas(vm_t *vm)$/;"	f
fs	vfs.c	/^    struct FileSystem *fs;$/;"	m	struct:MountPoint	typeref:struct:MountPoint::FileSystem	file:
fs	vfs.h	/^    struct FileSystem *fs;$/;"	m	struct:VNode	typeref:struct:VNode::FileSystem
fs	vfs2.h	/^        fs_t *fs;$/;"	m	struct:__anon6::__anon7
fs	vfs2.h	/^    fs_t    *fs;    \/\/ the file system instance is resides in.$/;"	m	struct:Vnode
fsDrivers	vfs.c	/^struct FileSystemDriver *fsDrivers = 0;$/;"	v	typeref:struct:FileSystemDriver
fsOps	fs/bootfs.c	/^struct FileSystemOperation fsOps = {$/;"	v	typeref:struct:FileSystemOperation
fs_driver	vfs2.h	/^typedef struct fs_driver {$/;"	s
fs_driver_t	vfs2.h	/^} fs_driver_t;$/;"	t	typeref:struct:fs_driver
fs_drivers	vfs2.c	/^fs_driver_t *fs_drivers = 0;$/;"	v
fs_drv_ops	vfs2.h	/^    struct fs_driver_operations *fs_drv_ops;$/;"	m	struct:fs_driver	typeref:struct:fs_driver::fs_driver_operations
fs_ops	vfs2.h	/^    struct fs_operations *fs_ops;$/;"	m	struct:fs_struct	typeref:struct:fs_struct::fs_operations
fs_struct	vfs2.h	/^struct fs_struct {$/;"	s
func	pci.h	/^    u32int bus, slot, func;$/;"	m	struct:pci_dev_struct
gdt64	loader32.s	/^gdt64:                           ; Global Descriptor Table (64-bit).$/;"	l
gdtPtr	dtable.c	/^struct GDTPtr   gdtPtr;$/;"	v	typeref:struct:GDTPtr
gdtTable	dtable.c	/^struct GDTEntry gdtTable[8];$/;"	v	typeref:struct:GDTEntry
general_protection_handler	task2.c	/^void general_protection_handler(registers_t *regs)$/;"	f
getBootInfo	bootinfo.c	/^struct BootInfo *getBootInfo()$/;"	f
getFSDriver	vfs.c	/^struct FileSystemDriver *getFSDriver(const char *name)$/;"	f
getMountPoint	vfs.c	/^struct MountPoint *getMountPoint(const char *name)$/;"	f
getNextBlock	tlsf.c	/^struct TLSFBlock *getNextBlock(struct TLSFBlock *blk)$/;"	f
getPAddr	kmm.c	/^u64int getPAddr(u64int vaddr, struct PML4E *pml4e)$/;"	f
getPD	kmm.c	/^struct PageDirectory *getPD(struct PageDirectoryPointer *pdp, u64int addr)$/;"	f
getPDP	kmm.c	/^struct PageDirectoryPointer *getPDP(struct PML4E *pml4e, u64int addr)$/;"	f
getPML4E	kmm.c	/^struct PML4E *getPML4E()$/;"	f
getPT	kmm.c	/^struct PageTable *getPT(struct PageDirectory *pd, u64int addr)$/;"	f
getPage	kmm.c	/^u64int* getPage(struct PageTable *pt, u64int addr)$/;"	f
getRoot	vfs2.h	/^    struct VnodeOperations *(*getRoot)(fs_t *fs);$/;"	m	struct:VFSOperation	typeref:struct:VFSOperation::getRoot
get_block	fs/ext2fs.c	/^static s32int get_block(fs_t *fs, u8int *buf, u32int blk_no)$/;"	f	file:
get_dentry_len	fs/ext2fs.c	/^static u32int get_dentry_len(u32int name_len)$/;"	f	file:
get_free_bit	fs/ext2fs.c	/^static u32int get_free_bit(u8int *buf, u32int sz)$/;"	f	file:
get_free_block	fs/ext2fs.c	/^static u32int get_free_block(fs_t *fs, u32int bg_hint)$/;"	f	file:
get_free_ino	fs/ext2fs.c	/^static u32int get_free_ino(fs_t *fs, u32int bg_hint)$/;"	f	file:
get_fs_driver_byname	vfs2.c	/^fs_driver_t* get_fs_driver_byname(char *name)$/;"	f
get_inode	fs/ext2fs.c	/^static struct ext2_inode *get_inode(fs_t *fs, u32int ino)$/;"	f	file:
get_inode_blocks	fs/ext2fs.c	/^static s32int get_inode_blocks(fs_t *fs,u8int *buf,struct ext2_inode *inode,u32int start_blk,u32int n_blks)$/;"	f	file:
get_module_name	module.c	/^char *get_module_name(char *path, char *name)$/;"	f
get_page	paging.c	/^page_t *get_page(u32int vaddr, u32int make, page_directory_t *dir)$/;"	f
get_vm_free_start	vm.c	/^u32int get_vm_free_start(vm_t *vm, u32int start, u32int size)$/;"	f
get_vma_cover	vm.c	/^vma_t* get_vma_cover(vm_t *vm, u32int start)$/;"	f
get_vma_cover2	vm.c	/^vma_t* get_vma_cover2(vm_t *vm, u32int start, u32int end)$/;"	f
getpid	task2.c	/^u32int getpid()$/;"	f
gid	fs/bootfs.c	/^    char gid[8];$/;"	m	struct:TarHeader	file:
gid	vfs2.h	/^    u64int gid;$/;"	m	struct:Vnode
globalBI	bootinfo.c	/^struct BootInfo *globalBI = 0;$/;"	v	typeref:struct:BootInfo
granunarity	dtable.h	/^    u8int granunarity; \/\/ lower 4 bits of gran is higher 4 bits of limit;$/;"	m	struct:GDTEntry
gt_bytes	elfdef.h	/^      Elf32_Word gt_bytes;		\/* This many bytes would be used *\/$/;"	m	struct:__anon39::__anon41
gt_current_g_value	elfdef.h	/^      Elf32_Word gt_current_g_value;	\/* -G value used for compilation *\/$/;"	m	struct:__anon39::__anon40
gt_entry	elfdef.h	/^    } gt_entry;				\/* Subsequent entries in section *\/$/;"	m	union:__anon39	typeref:struct:__anon39::__anon41
gt_g_value	elfdef.h	/^      Elf32_Word gt_g_value;		\/* If this value were used for -G *\/$/;"	m	struct:__anon39::__anon41
gt_header	elfdef.h	/^    } gt_header;			\/* First entry in section *\/$/;"	m	union:__anon39	typeref:struct:__anon39::__anon40
gt_unused	elfdef.h	/^      Elf32_Word gt_unused;		\/* Not used *\/$/;"	m	struct:__anon39::__anon40
h_i_author	fs/ext2fs.h	/^            u32int  h_i_author;$/;"	m	struct:ext2_inode::__anon13::__anon15
h_i_frag	fs/ext2fs.h	/^            u8int    h_i_frag;   \/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon13::__anon15
h_i_fsize	fs/ext2fs.h	/^            u8int    h_i_fsize;  \/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon13::__anon15
h_i_gid_high	fs/ext2fs.h	/^            u16int  h_i_gid_high;$/;"	m	struct:ext2_inode::__anon13::__anon15
h_i_mode_high	fs/ext2fs.h	/^            u16int  h_i_mode_high;$/;"	m	struct:ext2_inode::__anon13::__anon15
h_i_translator	fs/ext2fs.h	/^            u32int  h_i_translator;$/;"	m	struct:ext2_inode::__anon9::__anon11
h_i_uid_high	fs/ext2fs.h	/^            u16int  h_i_uid_high;$/;"	m	struct:ext2_inode::__anon13::__anon15
handle_timer_queue	task2.c	/^void handle_timer_queue()$/;"	f
handle_user_page_fault	task2.c	/^s32int handle_user_page_fault(u32int fault_addr, u32int rw)$/;"	f
head	task2.h	/^    wait_queue_node_t *head;$/;"	m	struct:__anon1
headerList	fs/bootfs.c	/^    struct TarHeader **headerList;$/;"	m	struct:BootFSData	typeref:struct:BootFSData::TarHeader	file:
header_cpio_struct	cpio.h	/^typedef struct header_cpio_struct {$/;"	s
header_cpio_t	cpio.h	/^} header_cpio_t;$/;"	t	typeref:struct:header_cpio_struct
header_type	pci.h	/^    u8int header_type;$/;"	m	struct:__anon2
heap	kmm.c	/^struct TLSFHeader *heap = 0;$/;"	v	typeref:struct:TLSFHeader
hurd1	fs/ext2fs.h	/^        } hurd1;$/;"	m	union:ext2_inode::__anon9	typeref:struct:ext2_inode::__anon9::__anon11
hurd2	fs/ext2fs.h	/^        } hurd2;$/;"	m	union:ext2_inode::__anon13	typeref:struct:ext2_inode::__anon13::__anon15
hwp_flags1	elfdef.h	/^  Elf32_Word hwp_flags1;	\/* Extra flags.  *\/$/;"	m	struct:__anon44
hwp_flags2	elfdef.h	/^  Elf32_Word hwp_flags2;	\/* Extra flags.  *\/$/;"	m	struct:__anon44
i8042_close	i8042.c	/^s32int i8042_close(file_t *f)$/;"	f
i8042_irq	i8042.c	/^MEXPORT(i8042_irq);$/;"	v
i8042_irq	i8042.c	/^void i8042_irq(registers_t *regs)$/;"	f
i8042_open	i8042.c	/^s32int i8042_open(file_t *f)$/;"	f
i8042_probe	i8042.c	/^s32int i8042_probe()$/;"	f
i8042_read	i8042.c	/^s32int i8042_read(file_t *f, u32int offset, u32int sz, u8int *buffer)$/;"	f
i8042_write	i8042.c	/^s32int i8042_write(file_t *f, u32int offset, u32int sz, u8int *buffer)$/;"	f
i_atime	fs/ext2fs.h	/^    u32int  i_atime;    \/* Access time *\/$/;"	m	struct:ext2_inode
i_block	fs/ext2fs.h	/^    u32int  i_block[EXT2_N_BLOCKS];\/* Pointers to blocks *\/$/;"	m	struct:ext2_inode
i_blocks	fs/ext2fs.h	/^    u32int  i_blocks;   \/* Blocks count *\/$/;"	m	struct:ext2_inode
i_ctime	fs/ext2fs.h	/^    u32int  i_ctime;    \/* Creation time *\/$/;"	m	struct:ext2_inode
i_dir_acl	fs/ext2fs.h	/^    u32int  i_dir_acl;  \/* Directory ACL *\/$/;"	m	struct:ext2_inode
i_dtime	fs/ext2fs.h	/^    u32int  i_dtime;    \/* Deletion Time *\/$/;"	m	struct:ext2_inode
i_faddr	fs/ext2fs.h	/^    u32int  i_faddr;    \/* Fragment address *\/$/;"	m	struct:ext2_inode
i_file_acl	fs/ext2fs.h	/^    u32int  i_file_acl; \/* File ACL *\/$/;"	m	struct:ext2_inode
i_flags	fs/ext2fs.h	/^    u32int  i_flags;    \/* File flags *\/$/;"	m	struct:ext2_inode
i_generation	fs/ext2fs.h	/^    u32int  i_generation;   \/* File version (for NFS) *\/$/;"	m	struct:ext2_inode
i_gid	fs/ext2fs.h	/^    u16int  i_gid;      \/* Low 16 bits of Group Id *\/$/;"	m	struct:ext2_inode
i_links_count	fs/ext2fs.h	/^    u16int  i_links_count;  \/* Links count *\/$/;"	m	struct:ext2_inode
i_mode	fs/ext2fs.h	/^    u16int  i_mode;     \/* File mode *\/$/;"	m	struct:ext2_inode
i_mtime	fs/ext2fs.h	/^    u32int  i_mtime;    \/* Modification time *\/$/;"	m	struct:ext2_inode
i_pad1	fs/ext2fs.h	/^            u16int   i_pad1;$/;"	m	struct:ext2_inode::__anon13::__anon14
i_size	fs/ext2fs.h	/^    u32int  i_size;     \/* Size in bytes *\/$/;"	m	struct:ext2_inode
i_uid	fs/ext2fs.h	/^    u16int  i_uid;      \/* Low 16 bits of Owner Uid *\/$/;"	m	struct:ext2_inode
id	vfs.h	/^    u64int id;$/;"	m	struct:VNode
ide_ata_access	ide.c	/^u8int ide_ata_access(u8int direction, u8int drive, u32int lba, u8int numsects, u8int *buf) {$/;"	f
ide_attach	ide.c	/^s32int ide_attach(pci_dev_t *dev)$/;"	f
ide_buf	ide.c	/^u8int ide_buf[2048] = {0};$/;"	v
ide_channel_regs	ide.c	/^struct ide_channel_regs {$/;"	s	file:
ide_deattach	ide.c	/^s32int ide_deattach(pci_dev_t *dev)$/;"	f
ide_device	ide.c	/^struct ide_device {$/;"	s	file:
ide_devices	ide.c	/^} ide_devices[4];$/;"	v	typeref:struct:ide_device
ide_initialize	ide.c	/^void ide_initialize(u32int bar0, u32int bar1, u32int bar2, u32int bar3, u32int bar4)$/;"	f
ide_irq	ide.c	/^void ide_irq(registers_t *regs)$/;"	f
ide_irq_invoked	ide.c	/^u8int ide_irq_invoked = 0;$/;"	v
ide_polling	ide.c	/^u8int ide_polling(u8int channel, u32int advanced_check) {$/;"	f
ide_print_error	ide.c	/^u8int ide_print_error(u32int drive, u8int err) {$/;"	f
ide_probe	ide.c	/^s32int ide_probe(pci_dev_t *dev)$/;"	f
ide_read	ide.c	/^u8int ide_read(u8int channel, u8int reg) {$/;"	f
ide_read_blks	ide.c	/^u32int ide_read_blks(disk_t *disk, u32int start_blk, u32int nr_blks, u8int *buf)$/;"	f
ide_read_buffer	ide.c	/^void ide_read_buffer(u8int channel, u8int reg, u32int buffer, u32int quads) {$/;"	f
ide_read_sectors	ide.c	/^MEXPORT(ide_read_sectors);$/;"	v
ide_read_sectors	ide.c	/^s32int ide_read_sectors(u8int drive, u8int numsects, u32int lba, u8int *buf) $/;"	f
ide_write	ide.c	/^void ide_write(u8int channel, u8int reg, u8int data) {$/;"	f
ide_write_blks	ide.c	/^u32int ide_write_blks(disk_t *disk, u32int start_blk, u32int nr_blks, u8int *buf)$/;"	f
ide_write_sectors	ide.c	/^MEXPORT(ide_write_sectors);$/;"	v
ide_write_sectors	ide.c	/^s32int ide_write_sectors(u8int drive, u8int numsects, u32int lba, u8int *buf)$/;"	f
idtPtr	dtable.c	/^struct IDTPtr idtPtr;$/;"	v	typeref:struct:IDTPtr
idtTable	dtable.c	/^struct IDTEntry idtTable[256];$/;"	v	typeref:struct:IDTEntry
in_escape	i8042.c	/^u8int in_escape = 0;$/;"	v
inb	common.c	/^u8int inb(u16int port)$/;"	f
inb	util.c	/^u8int inb(u16int port)$/;"	f
index	order_array.h	/^    type_t *index;$/;"	m	struct:__anon58
info	elfdef.h	/^  Elf32_Word info;		\/* Kind-specific information.  *\/$/;"	m	struct:__anon43
init	module.h	/^    module_init_func init;$/;"	m	struct:module_struct
initIDT	dtable.c	/^void initIDT()$/;"	f
initInterrupt	interrupt.c	/^void initInterrupt()$/;"	f
initMemoryManagement	kmm.c	/^void initMemoryManagement(u64int totalHighMem, u64int freePMemStartAddr)$/;"	f
initMultitasking	task.c	/^void initMultitasking()$/;"	f
initObjectTree	kobject.c	/^void initObjectTree()$/;"	f
initTSS	dtable.c	/^void initTSS()$/;"	f
initTimer	interrupt.c	/^void initTimer(u16int freq)$/;"	f
initVFS	vfs.c	/^void initVFS()$/;"	f
init_module_system	module.c	/^void init_module_system(u32int num, u32int size, u32int addr, u32int strndx)$/;"	f
init_multitasking	task2.c	/^void init_multitasking()$/;"	f
init_paging	paging.c	/^void init_paging()$/;"	f
init_pci	pci.c	/^static void init_pci()$/;"	f	file:
init_syscalls	syscalls.c	/^void init_syscalls()$/;"	f
init_timer	timer.c	/^void init_timer(u32int freq)$/;"	f
init_vfs	vfs2.c	/^void init_vfs()$/;"	f
initialStack	bootinfo.h	/^    u64int initialStack;$/;"	m	struct:BootInfo
initrdAddr	bootinfo.h	/^    u64int initrdAddr;$/;"	m	struct:BootInfo
initrdEnd	bootinfo.h	/^    u64int initrdEnd;$/;"	m	struct:BootInfo
initrd_file_header	fs/initrdfs.c	/^initrdfs_file_header_t *initrd_file_header;$/;"	v
initrd_fops	fs/initrdfs.c	/^struct file_operations initrd_fops = {$/;"	v	typeref:struct:file_operations
initrd_header	fs/initrdfs.c	/^initrdfs_header_t *initrd_header;$/;"	v
initrd_node	fs/initrdfs.c	/^vnode_t *initrd_node;$/;"	v
initrd_read	fs/initrdfs.c	/^s32int initrd_read(file_t *f, u32int offset, u32int sz, u8int *buffer)$/;"	f
initrd_subnodes	fs/initrdfs.c	/^vnode_t** initrd_subnodes(vnode_t *node)$/;"	f
initrd_vops	fs/initrdfs.c	/^struct vnode_operations initrd_vops = {$/;"	v	typeref:struct:vnode_operations
initrdfs_cleanup	fs/initrdfs.c	/^void initrdfs_cleanup(fs_driver_t *drv)$/;"	f
initrdfs_createfs	fs/initrdfs.c	/^fs_t* initrdfs_createfs(fs_driver_t *drv, vnode_t *dev, u32int flags, void *data)$/;"	f
initrdfs_drv_ops	fs/initrdfs.c	/^struct fs_driver_operations initrdfs_drv_ops = {$/;"	v	typeref:struct:fs_driver_operations
initrdfs_file_header_t	fs/initrdfs.h	/^} __attribute__((packed)) initrdfs_file_header_t;$/;"	t	typeref:struct:__anon18
initrdfs_get_root	fs/initrdfs.c	/^vnode_t* initrdfs_get_root(fs_t *fs)$/;"	f
initrdfs_header_t	fs/initrdfs.h	/^} initrdfs_header_t;$/;"	t	typeref:struct:__anon17
initrdfs_init	fs/initrdfs.c	/^void initrdfs_init(fs_driver_t *drv)$/;"	f
initrdfs_lookup	fs/initrdfs.c	/^vnode_t* initrdfs_lookup(fs_t *fs, char *path)$/;"	f
initrdfs_ops	fs/initrdfs.c	/^struct fs_operations initrdfs_ops = {$/;"	v	typeref:struct:fs_operations
initrdfs_removefs	fs/initrdfs.c	/^void initrdfs_removefs(fs_driver_t *drv, fs_t *fs)$/;"	f
inl	common.c	/^u32int inl(u16int port)$/;"	f
inl	util.c	/^u32int inl(u16int port)$/;"	f
ino	vfs2.h	/^    u64int ino; $/;"	m	struct:Vnode
inode	fs/ext2fs.c	/^    struct ext2_inode *inode;$/;"	m	struct:__anon22	typeref:struct:__anon22::ext2_inode	file:
inode	fs/ext2fs.h	/^	u32int	inode;			\/* Inode number *\/$/;"	m	struct:ext2_dir_entry
insb	common.c	/^void insb(u16int port, u32int buffer, u32int bytes) {$/;"	f
insertFreeBlock	tlsf.c	/^void insertFreeBlock(struct TLSFBlock *blk, struct TLSFHeader *tlsf, u64int fl, u64int sl)$/;"	f
insert_order_array	order_array.c	/^void insert_order_array(type_t item, order_array_t *array)$/;"	f
insert_vma	vm.c	/^void insert_vma(vm_t *vm, vma_t *vma)$/;"	f
insl	common.c	/^void insl(u16int port, u32int buffer, u32int quads) {$/;"	f
insw	common.c	/^void insw(u16int port, u32int buffer, u32int words) {$/;"	f
interruptHandlers	interrupt.c	/^static IsrHandlerFunc interruptHandlers[256] = {0};$/;"	v	file:
interrupt_pin	pci.h	/^    u8int irq, interrupt_pin;$/;"	m	struct:__anon2
inw	common.c	/^u16int inw(u16int port)$/;"	f
inw	util.c	/^u16int inw(u16int port)$/;"	f
ioBitmapBase	dtable.h	/^        u16int ioBitmapBase;$/;"	m	struct:TSS
io_bitmap	dtable.h	/^        u64int io_bitmap[IO_BITMAP_LONGS + 1];$/;"	m	struct:TSS
irq	pci.h	/^    u8int irq, interrupt_pin;$/;"	m	struct:__anon2
irqDispatcher	interrupt.c	/^void irqDispatcher(struct RegisterState *rs)$/;"	f
irq_common_stub	isr.s	/^irq_common_stub:$/;"	l
isEmptyEntry	fs/bootfs.c	/^s64int isEmptyEntry(char *buf)$/;"	f
isdigit	util.c	490;"	d	file:
isrDispatcher	interrupt.c	/^void isrDispatcher(struct RegisterState *rs)$/;"	f
isr_common_stub	isr.s	/^isr_common_stub:$/;"	l
ist	dtable.h	/^        u64int ist[7];$/;"	m	struct:TSS
isxdigit	util.c	486;"	d	file:
item_order_array	order_array.c	/^type_t item_order_array(u32int idx, order_array_t *array)$/;"	f
ja	loader32.s	/^ja  .L1$/;"	l
jb	loader32.s	/^jb noinitrd$/;"	l
jb	loader32.s	/^jb nokernel$/;"	l
jmp	loader32.s	/^jmp $                       ; Enter an infinite loop, to stop the processor$/;"	l
jmp	loader32.s	/^jmp gdt64.code:start64       ; Set the code segment and enter 64-bit long mode.$/;"	l
jmp	loader32.s	/^jmp rbx$/;"	l
kFork	task.c	/^s64int kFork(u64int flags)$/;"	f
kFree	kmm.c	/^void kFree(void *addr)$/;"	f
kMalloc	kmm.c	/^u64int kMalloc(u64int size)$/;"	f
kMallocEx	kmm.c	/^u64int kMallocEx(u64int size, u64int pageAligned, u64int *physicalAddr)$/;"	f
kbd_node	fs/initrdfs.c	/^vnode_t *kbd_node;$/;"	v
kbdus	i8042.c	/^u32int kbdus[128] =$/;"	v
kernel64	loader32.s	/^kernel64:$/;"	l
kernel_dir	paging.c	/^page_directory_t *kernel_dir = 0;$/;"	v
kernel_stack	vm.h	/^    u32int kernel_stack; \/\/ kernel_stack is in kernel_heap, size is 4kb, [kernel_stack-0x1000, kernel_stack)$/;"	m	struct:vm_struct
key	i8042.c	/^u32int key;$/;"	v
kind	elfdef.h	/^  unsigned char kind;		\/* Determines interpretation of the$/;"	m	struct:__anon43
klass	kobject.h	/^    struct Klass *klass;$/;"	m	struct:KObject	typeref:struct:KObject::Klass
klassList	kobject.c	/^struct Klass *klassList = 0;$/;"	v	typeref:struct:Klass
kmain	main.c	/^u64int kmain(struct BootInfo *si)$/;"	f
koClose	kobject.c	/^s64int koClose(struct KOD *kod)$/;"	f
koCreateDirectory	kobject.c	/^s64int koCreateDirectory(const char *path)$/;"	f
koCreateObject	kobject.c	/^s64int koCreateObject(const char *path, struct Klass *klass, void *data)$/;"	f
koDump	kobject.c	/^void koDump(struct KOD *kod)$/;"	f
koLookup	kobject.c	/^struct KObject *koLookup(const char *path)$/;"	f
koOpen	kobject.c	/^struct KOD *koOpen(const char *path)$/;"	f
koProcess	kobject.c	/^s64int koProcess(struct KOD *kod, void *data)$/;"	f
koReadDirectory	kobject.c	/^s64int koReadDirectory(struct KOD *kod, char *buf, u64int bufSize)$/;"	f
koRegisterKlass	kobject.c	/^s64int koRegisterKlass(struct Klass *klass)$/;"	f
koRemoveDirectory	kobject.c	/^s64int koRemoveDirectory(const char *path)$/;"	f
koRemoveObject	kobject.c	/^s64int koRemoveObject(const char *path)$/;"	f
koUnregisterKlass	kobject.c	/^s64int koUnregisterKlass(struct Klass *klass)$/;"	f
kstack	loader32.s	/^kstack:$/;"	l
ksyms	module.c	/^symtab_t *ksyms = 0;$/;"	v
l_checksum	elfdef.h	/^  Elf32_Word l_checksum;	\/* Checksum *\/$/;"	m	struct:__anon45
l_flags	elfdef.h	/^  Elf32_Word l_flags;		\/* Flags *\/$/;"	m	struct:__anon45
l_i_frag	fs/ext2fs.h	/^            u8int    l_i_frag;   \/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon13::__anon14
l_i_fsize	fs/ext2fs.h	/^            u8int    l_i_fsize;  \/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon13::__anon14
l_i_gid_high	fs/ext2fs.h	/^            u16int  l_i_gid_high;   \/* were reserved2[0] *\/$/;"	m	struct:ext2_inode::__anon13::__anon14
l_i_reserved1	fs/ext2fs.h	/^            u32int  l_i_reserved1;$/;"	m	struct:ext2_inode::__anon9::__anon10
l_i_reserved2	fs/ext2fs.h	/^            u32int   l_i_reserved2;$/;"	m	struct:ext2_inode::__anon13::__anon14
l_i_uid_high	fs/ext2fs.h	/^            u16int  l_i_uid_high;   \/* these 2 fields    *\/$/;"	m	struct:ext2_inode::__anon13::__anon14
l_name	elfdef.h	/^  Elf32_Word l_name;		\/* Name (string table index) *\/$/;"	m	struct:__anon45
l_time_stamp	elfdef.h	/^  Elf32_Word l_time_stamp;	\/* Timestamp *\/$/;"	m	struct:__anon45
l_version	elfdef.h	/^  Elf32_Word l_version;		\/* Interface version *\/$/;"	m	struct:__anon45
lastPid	task.c	/^u64int lastPid = 0;$/;"	v
last_pid	task2.c	/^u32int last_pid = 1;$/;"	v
len	module.h	/^    u32int len;$/;"	m	struct:__anon47
length	fs/initrdfs.h	/^    u32int length;$/;"	m	struct:__anon18
length	vfs2.h	/^    u64int length;$/;"	m	struct:Vnode
less_than_func	order_array.h	/^    less_than_func_t less_than_func;$/;"	m	struct:__anon58
less_than_func_t	order_array.h	/^typedef s8int (*less_than_func_t)(type_t, type_t);$/;"	t
lgdt	loader32.s	/^lgdt [gdt64.pointer]         ; Load the 64-bit global descriptor table.$/;"	l
limit	dtable.h	/^    u16int limit;$/;"	m	struct:GDTPtr
limit	dtable.h	/^    u16int limit;$/;"	m	struct:IDTPtr
limit	dtable.h	/^    u16int limit;$/;"	m	struct:TSSPtr
limitLow	dtable.h	/^    u16int limitLow;$/;"	m	struct:GDTEntry
limitLow	dtable.h	/^    u16int limitLow;$/;"	m	struct:TSSEntry
limitMiddle	dtable.h	/^    u8int limitMiddle;$/;"	m	struct:TSSEntry
link	fs/bootfs.c	/^    char link;$/;"	m	struct:TarHeader	file:
linkName	fs/bootfs.c	/^    char linkName[100];$/;"	m	struct:TarHeader	file:
linux1	fs/ext2fs.h	/^        } linux1;$/;"	m	union:ext2_inode::__anon9	typeref:struct:ext2_inode::__anon9::__anon10
linux2	fs/ext2fs.h	/^        } linux2;$/;"	m	union:ext2_inode::__anon13	typeref:struct:ext2_inode::__anon13::__anon14
load_module	module.c	/^module_t* load_module(char *path)$/;"	f
load_program	task2.c	/^u32int load_program(file_t *f, vm_t *vm)$/;"	f
lodsd	loader32.s	/^lodsd $/;"	l
lodsd	loader32.s	/^lodsd$/;"	l
lodsq	loader32.s	/^lodsq                       ; offset in file$/;"	l
lodsq	loader32.s	/^lodsq                       ; p_filesz$/;"	l
lodsq	loader32.s	/^lodsq                       ; p_memsz$/;"	l
lodsq	loader32.s	/^lodsq                       ; skip p_paddr;$/;"	l
lodsq	loader32.s	/^lodsq                       ; virtual memory address$/;"	l
lookup	vfs2.h	/^    struct Vnode *(*lookup)(struct Vnode *vnode, char *name);$/;"	m	struct:VFSOperation	typeref:struct:VFSOperation::lookup
loop	loader32.s	/^loop .SetEntry1               ; Set the next entry.$/;"	l
loop	loader32.s	/^loop .SetEntry2               ; Set the next entry.$/;"	l
lsBit	tlsf.c	/^u64int lsBit(u64int x)$/;"	f
m	dev.h	/^    module_t *m;$/;"	m	struct:dev_struct
m_i_frag	fs/ext2fs.h	/^            u8int    m_i_frag;   \/* Fragment number *\/$/;"	m	struct:ext2_inode::__anon13::__anon16
m_i_fsize	fs/ext2fs.h	/^            u8int    m_i_fsize;  \/* Fragment size *\/$/;"	m	struct:ext2_inode::__anon13::__anon16
m_i_reserved1	fs/ext2fs.h	/^            u32int  m_i_reserved1;$/;"	m	struct:ext2_inode::__anon9::__anon12
m_i_reserved2	fs/ext2fs.h	/^            u32int   m_i_reserved2[2];$/;"	m	struct:ext2_inode::__anon13::__anon16
m_pad1	fs/ext2fs.h	/^            u16int   m_pad1;$/;"	m	struct:ext2_inode::__anon13::__anon16
magic	fs/initrdfs.h	/^    u8int magic;$/;"	m	struct:__anon18
main	prog/init.c	/^int main()$/;"	f
mapPagesVtoP	kmm.c	/^void mapPagesVtoP(u64int vaddr, u64int paddr, u64int n, struct PML4E *pml4e)$/;"	f
masix1	fs/ext2fs.h	/^        } masix1;$/;"	m	union:ext2_inode::__anon9	typeref:struct:ext2_inode::__anon9::__anon12
masix2	fs/ext2fs.h	/^        } masix2;$/;"	m	union:ext2_inode::__anon13	typeref:struct:ext2_inode::__anon13::__anon16
mask	vfs2.h	/^    u64int mask;    \/\/permission$/;"	m	struct:Vnode
matrix	tlsf.h	/^    struct TLSFBlock *matrix[REAL_FLI][MAX_SLI];$/;"	m	struct:TLSFHeader	typeref:struct:TLSFHeader::TLSFBlock
maxSize	tlsf.h	/^    u64int maxSize;$/;"	m	struct:TLSFHeader
max_size	order_array.h	/^    u32int max_size;$/;"	m	struct:__anon58
mboot	loader32.s	/^mboot:$/;"	l
mem_lower	multiboot.h	/^    u32int mem_lower;$/;"	m	struct:multiboot
mem_upper	multiboot.h	/^    u32int mem_upper;$/;"	m	struct:multiboot
memcmp	common.c	/^s32int memcmp(u8int *b1, u8int *b2, u32int n)$/;"	f
memcpy	common.c	/^void *memcpy(void *dst, void *src, u32int n)$/;"	f
memcpy	util.c	/^void *memcpy(void *dst, void *src, u64int n)$/;"	f
memory	bootinfo.h	/^    u64int memory;$/;"	m	struct:BootInfo
memoryMapped	kmm.c	/^int memoryMapped = 0;$/;"	v
memset	common.c	/^void memset(void *addr, u8int c, u32int n)$/;"	f
memset	util.c	/^void memset(void *addr, u8int c, u64int n)$/;"	f
mkdir	vfs2.h	/^    s64int   (*mkdir)   (vnode_t *dir, char *name, u64int flags);$/;"	m	struct:VnodeOperations
mmap_addr	multiboot.h	/^    u32int mmap_addr;$/;"	m	struct:multiboot
mmap_length	multiboot.h	/^    u32int mmap_length;$/;"	m	struct:multiboot
mod_end	multiboot.h	/^    u32int mod_end;$/;"	m	struct:multiboot_mod_list
mod_start	multiboot.h	/^    u32int mod_start;$/;"	m	struct:multiboot_mod_list
mode	fs/bootfs.c	/^    char mode[8];$/;"	m	struct:TarHeader	file:
model	ide.c	/^    u8int model[41];   \/\/ model in string.$/;"	m	struct:ide_device	file:
mods_addr	multiboot.h	/^    u32int mods_addr;$/;"	m	struct:multiboot
mods_count	multiboot.h	/^    u32int mods_count;$/;"	m	struct:multiboot
module_cleanup_func	module.h	/^typedef void (*module_cleanup_func)();$/;"	t
module_ext2fs_cleanup	fs/ext2fs.c	/^MODULE_CLEANUP(module_ext2fs_cleanup);$/;"	v
module_ext2fs_cleanup	fs/ext2fs.c	/^void module_ext2fs_cleanup()$/;"	f
module_ext2fs_init	fs/ext2fs.c	/^MODULE_INIT(module_ext2fs_init);$/;"	v
module_ext2fs_init	fs/ext2fs.c	/^void module_ext2fs_init()$/;"	f
module_i8042_cleanup	i8042.c	/^MODULE_CLEANUP(module_i8042_cleanup);$/;"	v
module_i8042_cleanup	i8042.c	/^void module_i8042_cleanup()$/;"	f
module_i8042_init	i8042.c	/^MODULE_INIT(module_i8042_init);$/;"	v
module_i8042_init	i8042.c	/^void module_i8042_init()$/;"	f
module_ide_cleanup	ide.c	/^MODULE_CLEANUP(module_ide_cleanup);$/;"	v
module_ide_cleanup	ide.c	/^void module_ide_cleanup()$/;"	f
module_ide_init	ide.c	/^MODULE_INIT(module_ide_init);$/;"	v
module_ide_init	ide.c	/^void module_ide_init()$/;"	f
module_init_func	module.h	/^typedef void (*module_init_func)();$/;"	t
module_initrdfs_cleanup	fs/initrdfs.c	/^void module_initrdfs_cleanup()$/;"	f
module_initrdfs_init	fs/initrdfs.c	/^void module_initrdfs_init()$/;"	f
module_pci_cleanup	pci.c	/^MODULE_CLEANUP(module_pci_cleanup);$/;"	v
module_pci_cleanup	pci.c	/^void module_pci_cleanup()$/;"	f
module_pci_init	pci.c	/^MODULE_INIT(module_pci_init);$/;"	v
module_pci_init	pci.c	/^void module_pci_init()$/;"	f
module_ramfs_cleanup	fs/ramfs.c	/^MODULE_CLEANUP(module_ramfs_cleanup);$/;"	v
module_ramfs_cleanup	fs/ramfs.c	/^void module_ramfs_cleanup()$/;"	f
module_ramfs_init	fs/ramfs.c	/^MODULE_INIT(module_ramfs_init);$/;"	v
module_ramfs_init	fs/ramfs.c	/^void module_ramfs_init()$/;"	f
module_struct	module.h	/^typedef struct module_struct {$/;"	s
module_t	module.h	/^} module_t;$/;"	t	typeref:struct:module_struct
module_testmod_cleanup	testmod.c	/^MODULE_CLEANUP(module_testmod_cleanup);$/;"	v
module_testmod_cleanup	testmod.c	/^void module_testmod_cleanup()$/;"	f
module_testmod_init	testmod.c	/^MODULE_INIT(module_testmod_init);$/;"	v
module_testmod_init	testmod.c	/^void module_testmod_init()$/;"	f
modules	module.c	/^module_t *modules = 0;$/;"	v
mount	vfs.h	/^    s64int (*mount)(struct FileSystemDriver *driver, struct FileSystem **fs, const char *source, u64int flags, void *data);$/;"	m	struct:FileSystemDriverOperation
mountPoints	vfs.c	/^struct MountPoint *mountPoints = 0;$/;"	v	typeref:struct:MountPoint
mount_root	main.c	/^void mount_root()$/;"	f
mounts	vfs2.h	/^    } mounts[MAX_VFSMOUNTS];$/;"	m	struct:__anon6	typeref:struct:__anon6::__anon7
mov	loader32.s	/^mov     eax,esp$/;"	l
mov	loader32.s	/^mov DWORD [edi+0xff8], 0x3003      ; Set the double word at the destination index to 0x2003.$/;"	l
mov	loader32.s	/^mov DWORD [edi+0xff8], 0x5003      ; Set the double word at the destination index to 0x2003.$/;"	l
mov	loader32.s	/^mov DWORD [edi], 0x2003      ; Set the double word at the destination index to 0x2003.$/;"	l
mov	loader32.s	/^mov DWORD [edi], 0x4003      ; Set the double word at the destination index to 0x3003.$/;"	l
mov	loader32.s	/^mov DWORD [edi], 0x6003      ; Set the double word at the destination index to 0x4003.$/;"	l
mov	loader32.s	/^mov DWORD [edi], 0x7003      ; Set the double word at the destination index to 0x4003.$/;"	l
mov	loader32.s	/^mov DWORD [edi], ebx         ; Set the double word at the destination index to the B-register.$/;"	l
mov	loader32.s	/^mov [startupinfo.freepmem_start], rax$/;"	l
mov	loader32.s	/^mov [startupinfo.kstack], rax$/;"	l
mov	loader32.s	/^mov ax, gdt64.data            ; Set the A-register to the data descriptor.$/;"	l
mov	loader32.s	/^mov cr0, eax                 ; Set control register 0 to the A-register.$/;"	l
mov	loader32.s	/^mov cr3, edi       ; Set control register 3 to the destination index.$/;"	l
mov	loader32.s	/^mov cr4, eax                 ; Set control register 4 to the A-register.$/;"	l
mov	loader32.s	/^mov ds, ax                    ; Set the data segment to the A-register.$/;"	l
mov	loader32.s	/^mov eax, 0$/;"	l
mov	loader32.s	/^mov eax, [rbx+20]$/;"	l
mov	loader32.s	/^mov eax, [rbx+8]$/;"	l
mov	loader32.s	/^mov eax, cr0                 ; Set the A-register to control register 0.$/;"	l
mov	loader32.s	/^mov eax, cr4                 ; Set the A-register to control register 4.$/;"	l
mov	loader32.s	/^mov ebx, 0x00000003          ; Set the B-register to 0x00000003.$/;"	l
mov	loader32.s	/^mov ecx, 0xC0000080          ; Set the C-register to 0xC0000080, which is the EFER MSR.$/;"	l
mov	loader32.s	/^mov ecx, 1024*7    ; Set the C-register to 4096.$/;"	l
mov	loader32.s	/^mov ecx, 512                 ; Set the C-register to 512.$/;"	l
mov	loader32.s	/^mov edi, 0x1000    ; Set the destination index to 0x1000.$/;"	l
mov	loader32.s	/^mov edi, cr3       ; Set the destination index to control register 3.$/;"	l
mov	loader32.s	/^mov es, ax                    ; Set the extra segment to the A-register.$/;"	l
mov	loader32.s	/^mov esi, [rbx+24]$/;"	l
mov	loader32.s	/^mov fs, ax                    ; Set the F-segment to the A-register.$/;"	l
mov	loader32.s	/^mov gs, ax                    ; Set the G-segment to the A-register.$/;"	l
mov	loader32.s	/^mov rax, [kernel64.imageEnd]$/;"	l
mov	loader32.s	/^mov rax, [rbx+24]$/;"	l
mov	loader32.s	/^mov rax, kstack$/;"	l
mov	loader32.s	/^mov rax, rbx$/;"	l
mov	loader32.s	/^mov rax, startupinfo$/;"	l
mov	loader32.s	/^mov rbp, kstack$/;"	l
mov	loader32.s	/^mov rbx, [kernel64.entry]$/;"	l
mov	loader32.s	/^mov rbx, [kernel64.imageAddr]$/;"	l
mov	loader32.s	/^mov rbx, [startupinfo.initrdEnd]$/;"	l
mov	loader32.s	/^mov rbx, nokernel$/;"	l
mov	loader32.s	/^mov rcx, [kernel64.filesize]$/;"	l
mov	loader32.s	/^mov rdi, 0x100000$/;"	l
mov	loader32.s	/^mov rdi, kernel64.entry$/;"	l
mov	loader32.s	/^mov rdi, kernel64.imageAddr$/;"	l
mov	loader32.s	/^mov rdi, rax                ; StartupInfo struct$/;"	l
mov	loader32.s	/^mov rdi, startupinfo.initrd$/;"	l
mov	loader32.s	/^mov rdi, startupinfo.mem$/;"	l
mov	loader32.s	/^mov rsi, [kernel64.imageAddr]$/;"	l
mov	loader32.s	/^mov rsi, [rbx+32]$/;"	l
mov	loader32.s	/^mov rsp, kstack$/;"	l
mov	loader32.s	/^mov ss, ax                    ; Set the G-segment to the A-register.$/;"	l
moveKernelStack	task.c	/^void moveKernelStack()$/;"	f
move_cursor	screen.c	/^void move_cursor()$/;"	f
move_stack	task2.c	/^void move_stack(u32int new_start, u32int sz)$/;"	f
msBit	tlsf.c	/^u64int msBit(u64int x)$/;"	f
mtime	fs/bootfs.c	/^    char mtime[12];$/;"	m	struct:TarHeader	file:
multiboot	multiboot.h	/^typedef struct multiboot {$/;"	s
multiboot_mod_list	multiboot.h	/^struct multiboot_mod_list$/;"	s
multiboot_module_t	multiboot.h	/^typedef struct multiboot_mod_list multiboot_module_t;$/;"	t	typeref:struct:multiboot_mod_list
multiboot_t	multiboot.h	/^} multiboot_t;$/;"	t	typeref:struct:multiboot
n	vfs2.h	/^    u64int n;$/;"	m	struct:__anon6
nIEN	ide.c	/^    u8int  nIEN;  \/\/ No Interrupt;$/;"	m	struct:ide_channel_regs	file:
n_descsz	elfdef.h	/^  Elf32_Word n_descsz;			\/* Length of the note's descriptor.  *\/$/;"	m	struct:__anon38
n_namesz	elfdef.h	/^  Elf32_Word n_namesz;			\/* Length of the note's name.  *\/$/;"	m	struct:__anon38
n_type	elfdef.h	/^  Elf32_Word n_type;			\/* Type of the note.  *\/$/;"	m	struct:__anon38
name	disk.h	/^    char *name;$/;"	m	struct:disk_struct
name	file.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:dentry_struct
name	fs/bootfs.c	/^    char name[100];$/;"	m	struct:TarHeader	file:
name	fs/ext2fs.h	/^	char	name[EXT2_NAME_LEN];	\/* File name *\/$/;"	m	struct:ext2_dir_entry
name	fs/initrdfs.h	/^    char name[MAX_NAME_LEN]; $/;"	m	struct:__anon18
name	kobject.c	/^            const char *name;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon52	file:
name	kobject.c	/^            const char *name;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon54	file:
name	kobject.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:KObject
name	kobject.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:Klass
name	module.h	/^    char *name;$/;"	m	struct:__anon46
name	module.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:module_struct
name	pci.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:__anon5
name	vfs.c	/^    char *name;$/;"	m	struct:MountPoint	file:
name	vfs.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:FileSystemDriver
name	vfs2.h	/^    char name[MAX_NAME_LEN]; \/\/filename$/;"	m	struct:Vnode
name	vfs2.h	/^    char name[MAX_NAME_LEN];$/;"	m	struct:fs_driver
name_len	fs/ext2fs.h	/^	u8int	name_len;		\/* Name length *\/$/;"	m	struct:ext2_dir_entry
nchildren	fs/ramfs.c	/^    u32int nchildren;$/;"	m	struct:__anon20	file:
next	dev.h	/^    struct dev_struct *next;$/;"	m	struct:dev_struct	typeref:struct:dev_struct::dev_struct
next	disk.h	/^    disk_t *next;$/;"	m	struct:disk_struct
next	disk.h	/^    partition_t *next;$/;"	m	struct:partition_struct
next	kobject.c	/^    struct KObjectListNode *next, *prev;$/;"	m	struct:KObjectListNode	typeref:struct:KObjectListNode::KObjectListNode	file:
next	kobject.h	/^    struct Klass *next, *prev;$/;"	m	struct:Klass	typeref:struct:Klass::Klass
next	module.h	/^    struct module_struct *next;$/;"	m	struct:module_struct	typeref:struct:module_struct::module_struct
next	pci.h	/^    pci_dev_t *next;$/;"	m	struct:pci_dev_struct
next	task.h	/^    struct Task *next, *prev;$/;"	m	struct:Task	typeref:struct:Task::Task
next	task2.h	/^    struct task *next;$/;"	m	struct:task	typeref:struct:task::task
next	task2.h	/^    struct timer_queue_struct *next;$/;"	m	struct:timer_queue_struct	typeref:struct:timer_queue_struct::timer_queue_struct
next	task2.h	/^    struct wait_queue_node_struct *next;$/;"	m	struct:wait_queue_node_struct	typeref:struct:wait_queue_node_struct::wait_queue_node_struct
next	tlsf.h	/^    struct TLSFBlock *next;$/;"	m	struct:TLSFFreePtr	typeref:struct:TLSFFreePtr::TLSFBlock
next	vfs.c	/^    struct MountPoint *next, *prev;$/;"	m	struct:MountPoint	typeref:struct:MountPoint::MountPoint	file:
next	vfs.h	/^    struct FileSystemDriver *next, *prev;$/;"	m	struct:FileSystemDriver	typeref:struct:FileSystemDriver::FileSystemDriver
next	vfs2.h	/^    struct fs_driver *next;$/;"	m	struct:fs_driver	typeref:struct:fs_driver::fs_driver
next	vfs2.h	/^    struct vnode_list_struct *next;$/;"	m	struct:vnode_list_struct	typeref:struct:vnode_list_struct::vnode_list_struct
next	vm.h	/^    struct vma_struct *next;$/;"	m	struct:vma_struct	typeref:struct:vma_struct::vma_struct
next	vmm.h	/^    struct VMA *next;$/;"	m	struct:VMA	typeref:struct:VMA::VMA
nfiles	fs/initrdfs.c	/^u32int nfiles;$/;"	v
nfiles	fs/initrdfs.h	/^    u32int nfiles;$/;"	m	struct:__anon17
nframes	paging.c	/^u32int nframes = 0;$/;"	v
node	vfs2.h	/^    vnode_t *node;$/;"	m	struct:vnode_list_struct
noinitrd	loader32.s	/^noinitrd:$/;"	l
nokernel	loader32.s	/^nokernel:$/;"	l
nr_bgs	fs/ext2fs.c	/^    u32int nr_bgs;$/;"	m	struct:__anon21	file:
nr_blks	disk.h	/^    u32int nr_blks;$/;"	m	struct:disk_struct
nr_blks	disk.h	/^    u32int nr_blks;$/;"	m	struct:partition_struct
nsubs	file.h	/^    u32int nsubs;$/;"	m	struct:dir_struct
nsyscalls	syscalls.c	/^u32int nsyscalls = N_SYSCALLS;$/;"	v
num	fs/bootfs.c	/^    u64int num;$/;"	m	struct:BootFSData	file:
num	multiboot.h	/^    u32int num;$/;"	m	struct:multiboot
number	interrupt.h	/^    u64int number, errcode;$/;"	m	struct:RegisterState
object	kobject.c	/^            struct KObject *object;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon52	typeref:struct:KDirectoryProcessData::__anon50::__anon52::KObject	file:
object	kobject.c	/^            struct KObject *object;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon53	typeref:struct:KDirectoryProcessData::__anon50::__anon53::KObject	file:
object	kobject.c	/^    struct KObject *object;$/;"	m	struct:KObjectListNode	typeref:struct:KObjectListNode::KObject	file:
object	kobject.h	/^    struct KObject *object;$/;"	m	struct:KOD	typeref:struct:KOD::KObject
offset	file.h	/^    u32int offset;$/;"	m	struct:__anon48
offset	file.h	/^    u32int offset;$/;"	m	struct:dir_struct
offset	file.h	/^    u32int offset;$/;"	m	struct:file_struct
offset	fs/initrdfs.h	/^    u32int offset;$/;"	m	struct:__anon18
offsetHigh	dtable.h	/^    u32int offsetHigh;$/;"	m	struct:IDTEntry
offsetLow	dtable.h	/^    u16int offsetLow;$/;"	m	struct:IDTEntry
offsetMiddle	dtable.h	/^    u16int offsetMiddle;$/;"	m	struct:IDTEntry
op	kobject.c	/^    u64int op;$/;"	m	struct:KDirectoryProcessData	file:
op	vfs.h	/^    struct FileSystemDriverOperation *op;$/;"	m	struct:FileSystemDriver	typeref:struct:FileSystemDriver::FileSystemDriverOperation
op	vfs.h	/^    struct FileSystemOperation *op;$/;"	m	struct:FileSystem	typeref:struct:FileSystem::FileSystemOperation
open	vfs.h	/^    s64int (*open)(struct FileSystem *fs, s64int id);$/;"	m	struct:FileSystemOperation
open	vfs2.h	/^    s64int   (*open)    (const char *);$/;"	m	struct:VnodeOperations
or	loader32.s	/^or eax, 1 << 31              ; Set the PG-bit, which is the 32nd bit (bit 31).$/;"	l
or	loader32.s	/^or eax, 1 << 5               ; Set the PAE-bit, which is the 6th bit (bit 5).$/;"	l
or	loader32.s	/^or eax, 1 << 8               ; Set the LM-bit which is the 9th bit (bit 8).$/;"	l
order_array_t	order_array.h	/^} order_array_t;$/;"	t	typeref:struct:__anon58
osd1	fs/ext2fs.h	/^    } osd1;             \/* OS dependent 1 *\/$/;"	m	struct:ext2_inode	typeref:union:ext2_inode::__anon9
osd2	fs/ext2fs.h	/^    } osd2;             \/* OS dependent 2 *\/$/;"	m	struct:ext2_inode	typeref:union:ext2_inode::__anon13
outb	common.c	/^void outb(u16int port, u8int value)$/;"	f
outb	util.c	/^void outb(u16int port, u8int value)$/;"	f
outl	common.c	/^void outl(u16int port, u32int value)$/;"	f
outl	util.c	/^void outl(u16int port, u32int value)$/;"	f
outsb	common.c	/^void outsb(u16int port, u32int buffer, u32int bytes) {$/;"	f
outsl	common.c	/^void outsl(u16int port, u32int buffer, u32int quads) {$/;"	f
outsw	common.c	/^void outsw(u16int port, u32int buffer, u32int words) {$/;"	f
outw	common.c	/^void outw(u16int port, u16int value)$/;"	f
outw	util.c	/^void outw(u16int port, u16int value)$/;"	f
p_align	elfdef.h	/^  Elf32_Word	p_align;		\/* Segment alignment *\/$/;"	m	struct:__anon29
p_filesz	elfdef.h	/^  Elf32_Word	p_filesz;		\/* Segment size in file *\/$/;"	m	struct:__anon29
p_flags	elfdef.h	/^  Elf32_Word	p_flags;		\/* Segment flags *\/$/;"	m	struct:__anon29
p_ino	fs/ext2fs.c	/^    u32int p_ino;$/;"	m	struct:__anon22	file:
p_memsz	elfdef.h	/^  Elf32_Word	p_memsz;		\/* Segment size in memory *\/$/;"	m	struct:__anon29
p_offset	elfdef.h	/^  Elf32_Off	p_offset;		\/* Segment file offset *\/$/;"	m	struct:__anon29
p_paddr	elfdef.h	/^  Elf32_Addr	p_paddr;		\/* Segment physical address *\/$/;"	m	struct:__anon29
p_type	elfdef.h	/^  Elf32_Word	p_type;			\/* Segment type *\/$/;"	m	struct:__anon29
p_vaddr	elfdef.h	/^  Elf32_Addr	p_vaddr;		\/* Segment virtual address *\/$/;"	m	struct:__anon29
pad	multiboot.h	/^    u32int pad;$/;"	m	struct:multiboot_mod_list
page	kmm.h	/^    u64int page[512];$/;"	m	struct:PageTable
page_directory_t	paging.h	/^} page_directory_t;$/;"	t	typeref:struct:__anon57
page_fault_handler	paging.c	/^void page_fault_handler(registers_t *regs)$/;"	f
page_t	paging.h	/^} page_t;$/;"	t	typeref:struct:__anon55
page_table_t	paging.h	/^} page_table_t;$/;"	t	typeref:struct:__anon56
page_tables	paging.h	/^    page_table_t *page_tables[1024];$/;"	m	struct:__anon57
pages	paging.h	/^    page_t pages[1024];$/;"	m	struct:__anon56
panic	common.c	/^void panic(const char *msg, const char *file, u32int line)$/;"	f
panic_assert	common.c	/^void panic_assert(const char *msg, const char *file, u32int line)$/;"	f
parent	kobject.h	/^    struct KObject *parent;$/;"	m	struct:KObject	typeref:struct:KObject::KObject
parsePath	vfs.c	/^s64int parsePath(const char *path, struct MountPoint **mt, char *remainPath)$/;"	f
part_fops	disk.c	/^struct file_operations part_fops = {$/;"	v	typeref:struct:file_operations
part_read	disk.c	/^static s32int part_read(file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
part_write	disk.c	/^static s32int part_write(file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f	file:
partition_struct	disk.h	/^struct partition_struct {$/;"	s
partition_t	disk.h	/^typedef struct partition_struct partition_t;$/;"	t	typeref:struct:partition_struct
path	module.h	/^    char path[MAX_NAME_LEN];$/;"	m	struct:module_struct
path	task2.h	/^    char path[MAX_PATH_LEN];$/;"	m	struct:task
path	vfs2.h	/^        char *path;$/;"	m	struct:__anon6::__anon7
pci_config_t	pci.h	/^} pci_config_t;$/;"	t	typeref:struct:__anon2
pci_dev_struct	pci.h	/^struct pci_dev_struct {$/;"	s
pci_dev_t	pci.h	/^typedef struct pci_dev_struct pci_dev_t;$/;"	t	typeref:struct:pci_dev_struct
pci_devs	pci.c	/^static pci_dev_t *pci_devs = 0;$/;"	v	file:
pci_driver_t	pci.h	/^} pci_driver_t;$/;"	t	typeref:struct:__anon5
pci_present	pci.c	/^MEXPORT(pci_present);$/;"	v
pci_present	pci.c	/^s32int pci_present()$/;"	f
pd	kmm.h	/^    u64int pd[512];$/;"	m	struct:PageDirectoryPointer
pdp	kmm.h	/^    u64int pdp[512];$/;"	m	struct:PML4E
pid	task.h	/^    u64int pid;$/;"	m	struct:Task
pid	task2.h	/^    u32int pid;$/;"	m	struct:task
place_order_array	order_array.c	/^order_array_t place_order_array(void *addr, u32int max_size, less_than_func_t func)$/;"	f
pop	loader32.s	/^pop rbx$/;"	l
ppid	task2.h	/^    u32int ppid;$/;"	m	struct:task
present	paging.h	/^    u32int present : 1;$/;"	m	struct:__anon55
prev	kobject.c	/^    struct KObjectListNode *next, *prev;$/;"	m	struct:KObjectListNode	typeref:struct:KObjectListNode::	file:
prev	kobject.h	/^    struct Klass *next, *prev;$/;"	m	struct:Klass	typeref:struct:Klass::
prev	task.h	/^    struct Task *next, *prev;$/;"	m	struct:Task	typeref:struct:Task::
prev	task2.h	/^    struct timer_queue_struct *prev;$/;"	m	struct:timer_queue_struct	typeref:struct:timer_queue_struct::timer_queue_struct
prev	task2.h	/^    struct wait_queue_node_struct *prev;$/;"	m	struct:wait_queue_node_struct	typeref:struct:wait_queue_node_struct::wait_queue_node_struct
prev	tlsf.h	/^    struct TLSFBlock *prev;$/;"	m	struct:TLSFBlock	typeref:struct:TLSFBlock::TLSFBlock
prev	tlsf.h	/^    struct TLSFBlock *prev;$/;"	m	struct:TLSFFreePtr	typeref:struct:TLSFFreePtr::TLSFBlock
prev	vfs.c	/^    struct MountPoint *next, *prev;$/;"	m	struct:MountPoint	typeref:struct:MountPoint::	file:
prev	vfs.h	/^    struct FileSystemDriver *next, *prev;$/;"	m	struct:FileSystemDriver	typeref:struct:FileSystemDriver::
prev	vfs2.h	/^    struct vnode_list_struct *prev;$/;"	m	struct:vnode_list_struct	typeref:struct:vnode_list_struct::vnode_list_struct
prev	vm.h	/^    struct vma_struct *prev;$/;"	m	struct:vma_struct	typeref:struct:vma_struct::vma_struct
prev	vmm.h	/^    struct VMA *prev;$/;"	m	struct:VMA	typeref:struct:VMA::VMA
printk	util.c	/^void printk(char *fmt, ...)$/;"	f
priority	task.h	/^    u64int priority;$/;"	m	struct:Task
priv	dev.h	/^    void *priv;$/;"	m	struct:dev_struct
priv	disk.h	/^    void *priv;$/;"	m	struct:disk_struct
priv	file.h	/^    void *priv;$/;"	m	struct:file_struct
priv	vfs2.h	/^    void *priv;$/;"	m	struct:Vnode
priv	vfs2.h	/^    void *priv;$/;"	m	struct:fs_driver
priv	vfs2.h	/^    void *priv;$/;"	m	struct:fs_struct
priv	vm.h	/^    void *priv; \/* usually file_mapping_t* *\/$/;"	m	struct:vma_struct
probe	pci.h	/^    s32int (*probe)(pci_dev_t *pci_dev);$/;"	m	struct:__anon5
process	kobject.h	/^    s64int (*process)(struct KObject *object, void *data);$/;"	m	struct:KObject
processKDirectory	kobject.c	/^s64int processKDirectory(struct KObject *object, void *data)$/;"	f
prog_if	pci.h	/^    u8int revision, prog_if, subclass, class_code;$/;"	m	struct:__anon2
pt	kmm.h	/^    u64int pt[512];$/;"	m	struct:PageDirectory
ptr	tlsf.h	/^    } ptr;$/;"	m	struct:TLSFBlock	typeref:union:TLSFBlock::__anon49
ptr	vfs2.h	/^    vnode_t *ptr;$/;"	m	struct:Vnode
push	loader32.s	/^push    0$/;"	l
push	loader32.s	/^push    eax                   ; Initial esp  $/;"	l
push	loader32.s	/^push    ebx                   ; Load multiboot header location$/;"	l
put_block	fs/ext2fs.c	/^static s32int put_block(fs_t *fs, u8int *buf, u32int blk_no)$/;"	f	file:
put_inode	fs/ext2fs.c	/^static s32int put_inode(fs_t *fs, struct ext2_inode *inode, u32int ino)$/;"	f	file:
put_inode_blocks	fs/ext2fs.c	/^static s32int put_inode_blocks(fs_t *fs,u8int *buf,struct ext2_inode *inode,u32int start_blk,u32int n_blks)$/;"	f	file:
puthex	prog/init.c	/^void puthex(u32int n)$/;"	f
putn	prog/init.c	/^void putn(u32int n)$/;"	f
puts	prog/init.c	/^void puts(char *s)$/;"	f
r_addend	elfdef.h	/^  Elf32_Sword	r_addend;		\/* Addend *\/$/;"	m	struct:__anon28
r_info	elfdef.h	/^  Elf32_Word	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anon27
r_info	elfdef.h	/^  Elf32_Word	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anon28
r_offset	elfdef.h	/^  Elf32_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anon27
r_offset	elfdef.h	/^  Elf32_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anon28
ramfsOp	fs/ramfs.c	/^static struct FileSystemOperation ramfsOp = {$/;"	v	typeref:struct:FileSystemOperation	file:
ramfs_cleanup	fs/ramfs.c	/^void    ramfs_cleanup(struct fs_driver *fs_drv)$/;"	f
ramfs_close	fs/ramfs.c	/^s32int   ramfs_close   (file_t *f)$/;"	f
ramfs_create	fs/ramfs.c	/^s32int ramfs_create  (vnode_t *dir, char *name, u32int flags)$/;"	f
ramfs_createfs	fs/ramfs.c	/^fs_t*   ramfs_createfs(struct fs_driver *drv, char *path, u32int flags, void *data)$/;"	f
ramfs_drop_node	fs/ramfs.c	/^void ramfs_drop_node (fs_t *fs, vnode_t *node)$/;"	f
ramfs_drv	fs/ramfs.c	/^struct fs_driver ramfs_drv = {$/;"	v	typeref:struct:fs_driver
ramfs_drv_ops	fs/ramfs.c	/^struct fs_driver_operations ramfs_drv_ops = {$/;"	v	typeref:struct:fs_driver_operations
ramfs_get_root	fs/ramfs.c	/^vnode_t* ramfs_get_root(fs_t *fs)$/;"	f
ramfs_init	fs/ramfs.c	/^void    ramfs_init(struct fs_driver *fs_drv)$/;"	f
ramfs_lookup	fs/ramfs.c	/^vnode_t* ramfs_lookup(fs_t *fs, char *path)$/;"	f
ramfs_mkdir	fs/ramfs.c	/^s32int ramfs_mkdir   (vnode_t *dir, char *name, u32int flags)$/;"	f
ramfs_mknod	fs/ramfs.c	/^s32int ramfs_mknod   (vnode_t *dir, char *name, u32int dev_id, u32int flags)$/;"	f
ramfs_open	fs/ramfs.c	/^s32int   ramfs_open    (file_t *f)$/;"	f
ramfs_ops	fs/ramfs.c	/^struct fs_operations ramfs_ops = {$/;"	v	typeref:struct:fs_operations
ramfs_priv_t	fs/ramfs.c	/^} ramfs_priv_t;$/;"	t	typeref:struct:__anon19	file:
ramfs_read	fs/ramfs.c	/^s32int   ramfs_read    (file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f
ramfs_removefs	fs/ramfs.c	/^void    ramfs_removefs(struct fs_driver *fs_drv, fs_t *fs)$/;"	f
ramfs_rename	fs/ramfs.c	/^s32int ramfs_rename (vnode_t *dir, char *old_name, char *name)$/;"	f
ramfs_rm	fs/ramfs.c	/^s32int   ramfs_rm      (vnode_t *dir, char *name)$/;"	f
ramfs_rmdir	fs/ramfs.c	/^s32int   ramfs_rmdir   (vnode_t *dir, char *name)$/;"	f
ramfs_subnodes	fs/ramfs.c	/^s32int   ramfs_subnodes(vnode_t *dir, vnode_t ***nodes)$/;"	f
ramfs_vnode_priv_t	fs/ramfs.c	/^} ramfs_vnode_priv_t;$/;"	t	typeref:struct:__anon20	file:
ramfs_write	fs/ramfs.c	/^s32int   ramfs_write   (file_t *f, u32int offset, u32int sz, u8int *buf)$/;"	f
rbp	task.h	/^    u64int rip, rsp, rbp;$/;"	m	struct:Task
rdmsr	loader32.s	/^rdmsr                        ; Read from the model-specific register.$/;"	l
read	vfs.h	/^    s64int (*read)(struct FileSystem *fs, s64int id, u64int offset, u64int size, char *buffer);$/;"	m	struct:FileSystemOperation
read	vfs2.h	/^    s64int   (*read)    (file_t *f, u64int offset, u64int sz, u8int *buffer);$/;"	m	struct:VnodeOperations
readDir	kobject.c	/^        } readDir;$/;"	m	union:KDirectoryProcessData::__anon50	typeref:struct:KDirectoryProcessData::__anon50::__anon51	file:
readRIP	taskasm.s	/^readRIP:$/;"	l
read_blks	disk.h	/^    u32int (*read_blks)(disk_t *disk, u32int start_blk, u32int nr_blks, u8int *buf);$/;"	m	struct:disk_struct
read_eip	process.s	/^read_eip:$/;"	l
read_pci_config_dword	pci.c	/^MEXPORT(read_pci_config_dword);$/;"	v
read_pci_config_dword	pci.c	/^u32int read_pci_config_dword(u32int bus, u32int slot, u32int func, u32int off)$/;"	f
read_pci_dev_config_dword	pci.c	/^MEXPORT(read_pci_dev_config_dword);$/;"	v
read_pci_dev_config_dword	pci.c	/^u32int read_pci_dev_config_dword(pci_dev_t *dev, u32int off)$/;"	f
readdir	vfs.h	/^    s64int (*readdir)(struct FileSystem *fs, s64int id, u64int bufSize, char *buf);$/;"	m	struct:FileSystemOperation
real_dentry_len	fs/ext2fs.c	/^static u32int real_dentry_len(struct ext2_dir_entry *d)$/;"	f	file:
rec_len	fs/ext2fs.h	/^	u16int	rec_len;		\/* Directory entry length *\/$/;"	m	struct:ext2_dir_entry
recur	prog/init.c	/^int recur(int i)$/;"	f
ref	kobject.h	/^    u64int ref;$/;"	m	struct:KObject
registerFileSystemDriver	vfs.c	/^s64int registerFileSystemDriver(struct FileSystemDriver *driver)$/;"	f
registerInterruptHandler	interrupt.c	/^void registerInterruptHandler(u32int n, IsrHandlerFunc handler)$/;"	f
register_fs_driver	vfs2.c	/^void register_fs_driver(fs_driver_t *driver)$/;"	f
register_pci_driver	pci.c	/^MEXPORT(register_pci_driver);$/;"	v
register_pci_driver	pci.c	/^void register_pci_driver(pci_driver_t *drv)$/;"	f
relocate_section	module.c	/^static void relocate_section(u32int addr, Elf32_Shdr *shdr_rel, Elf32_Shdr *shdr_sym, u8int *buf)$/;"	f	file:
removeFreeBlock	tlsf.c	/^void removeFreeBlock(struct TLSFBlock *blk, struct TLSFHeader *tlsf, u64int fl, u64int sl)$/;"	f
removeObject	kobject.c	/^        } removeObject;$/;"	m	union:KDirectoryProcessData::__anon50	typeref:struct:KDirectoryProcessData::__anon50::__anon54	file:
remove_child	fs/ramfs.c	/^static void remove_child(vnode_t *dir, vnode_t *node)$/;"	f	file:
remove_order_array	order_array.c	/^void remove_order_array(u32int idx, order_array_t *array)$/;"	f
remove_vma	vm.c	/^void remove_vma(vm_t *vm, vma_t *vma)$/;"	f
removefs	vfs2.h	/^    void (*removefs)(struct fs_driver *, fs_t *fs);$/;"	m	struct:VFSDriverOperation
rep	loader32.s	/^rep movsb$/;"	l
rep	loader32.s	/^rep stosd          ; Clear the memory.$/;"	l
reserved	dtable.h	/^    u32int reserved;$/;"	m	struct:IDTEntry
reserved	dtable.h	/^    u32int reserved;$/;"	m	struct:TSSEntry
reserved1	dtable.h	/^        u32int reserved1;$/;"	m	struct:TSS
reserved2	dtable.h	/^        u64int reserved2;$/;"	m	struct:TSS
reserved3	dtable.h	/^        u32int reserved3;$/;"	m	struct:TSS
reserved4	dtable.h	/^        u32int reserved4;$/;"	m	struct:TSS
reserved5	dtable.h	/^        u16int reserved5;$/;"	m	struct:TSS
resolve_symbol	module.c	/^static u32int resolve_symbol(char *sym_name)$/;"	f	file:
ret_code	task2.h	/^    u32int ret_code;$/;"	m	struct:task
revision	pci.h	/^    u8int revision, prog_if, subclass, class_code;$/;"	m	struct:__anon2
rflags	interrupt.h	/^    u64int rip, cs, rflags, rsp, ss;$/;"	m	struct:RegisterState
ri_cprmask	elfdef.h	/^  Elf32_Word	ri_cprmask[4];		\/* Coprocessor registers used *\/$/;"	m	struct:__anon42
ri_gp_value	elfdef.h	/^  Elf32_Sword	ri_gp_value;		\/* $gp register value *\/$/;"	m	struct:__anon42
ri_gprmask	elfdef.h	/^  Elf32_Word	ri_gprmask;		\/* General registers used *\/$/;"	m	struct:__anon42
rip	interrupt.h	/^    u64int rip, cs, rflags, rsp, ss;$/;"	m	struct:RegisterState
rip	task.h	/^    u64int rip, rsp, rbp;$/;"	m	struct:Task
rmdir	vfs2.h	/^    s64int   (*rmdir)   (vnode_t *dir, char *name);$/;"	m	struct:VnodeOperations
rom_bar	pci.h	/^            u16int rom_bar;$/;"	m	struct:__anon2::__anon3::__anon4
root	fs/ramfs.c	/^    vnode_t *root;$/;"	m	struct:__anon19	file:
root	vfs.h	/^    s64int (*root)(struct FileSystem *fs);$/;"	m	struct:FileSystemOperation
rootDirName	fs/bootfs.c	/^    char rootDirName[100];$/;"	m	struct:BootFSData	file:
rootNode	vfs.c	/^struct VNode *rootNode = 0;$/;"	v	typeref:struct:VNode
rqNext	task.h	/^    struct Task *rqNext, *rqPrev;$/;"	m	struct:Task	typeref:struct:Task::Task
rqPrev	task.h	/^    struct Task *rqNext, *rqPrev;$/;"	m	struct:Task	typeref:struct:Task::
rsp	interrupt.h	/^    u64int rip, cs, rflags, rsp, ss;$/;"	m	struct:RegisterState
rsp	task.h	/^    u64int rip, rsp, rbp;$/;"	m	struct:Task
rsp0	dtable.h	/^        u64int rsp0;       $/;"	m	struct:TSS
rsp1	dtable.h	/^        u64int rsp1;$/;"	m	struct:TSS
rsp2	dtable.h	/^        u64int rsp2;$/;"	m	struct:TSS
rsvd1	paging.h	/^    u32int rsvd1 : 2;$/;"	m	struct:__anon55
rsvd2	paging.h	/^    u32int rsvd2 : 2;$/;"	m	struct:__anon55
runQueue	task.c	/^struct Task *runQueue[MLFQ_LEVELS];$/;"	v	typeref:struct:Task
rw	paging.h	/^    u32int rw : 1;$/;"	m	struct:__anon55
s16int	common.h	/^typedef          short s16int;$/;"	t
s16int	sysdef.h	/^typedef signed short    s16int;$/;"	t
s32int	common.h	/^typedef          int   s32int;$/;"	t
s32int	sysdef.h	/^typedef signed int      s32int;$/;"	t
s64int	sysdef.h	/^typedef signed long     s64int;$/;"	t
s8int	common.h	/^typedef          char  s8int;$/;"	t
s8int	sysdef.h	/^typedef signed char     s8int;$/;"	t
s_algorithm_usage_bitmap	fs/ext2fs.h	/^    u32int  s_algorithm_usage_bitmap; \/* For compression *\/$/;"	m	struct:ext2_super_block
s_block_group_nr	fs/ext2fs.h	/^    u16int  s_block_group_nr;   \/* block group # of this superblock *\/$/;"	m	struct:ext2_super_block
s_blocks_count	fs/ext2fs.h	/^    u32int  s_blocks_count;     \/* Blocks count *\/$/;"	m	struct:ext2_super_block
s_blocks_per_group	fs/ext2fs.h	/^    u32int  s_blocks_per_group; \/* # Blocks per group *\/$/;"	m	struct:ext2_super_block
s_checkinterval	fs/ext2fs.h	/^    u32int  s_checkinterval;    \/* max. time between checks *\/$/;"	m	struct:ext2_super_block
s_creator_os	fs/ext2fs.h	/^    u32int  s_creator_os;       \/* OS *\/$/;"	m	struct:ext2_super_block
s_def_hash_version	fs/ext2fs.h	/^    u8int    s_def_hash_version; \/* Default hash version to use *\/$/;"	m	struct:ext2_super_block
s_def_resgid	fs/ext2fs.h	/^    u16int  s_def_resgid;       \/* Default gid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_def_resuid	fs/ext2fs.h	/^    u16int  s_def_resuid;       \/* Default uid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_default_mount_opts	fs/ext2fs.h	/^    u32int  s_default_mount_opts;$/;"	m	struct:ext2_super_block
s_errors	fs/ext2fs.h	/^    u16int  s_errors;       \/* Behaviour when detecting errors *\/$/;"	m	struct:ext2_super_block
s_feature_compat	fs/ext2fs.h	/^    u32int  s_feature_compat;   \/* compatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_incompat	fs/ext2fs.h	/^    u32int  s_feature_incompat;     \/* incompatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_ro_compat	fs/ext2fs.h	/^    u32int  s_feature_ro_compat;    \/* readonly-compatible feature set *\/$/;"	m	struct:ext2_super_block
s_first_data_block	fs/ext2fs.h	/^    u32int  s_first_data_block; \/* First Data Block *\/$/;"	m	struct:ext2_super_block
s_first_ino	fs/ext2fs.h	/^    u32int  s_first_ino;        \/* First non-reserved inode *\/$/;"	m	struct:ext2_super_block
s_first_meta_bg	fs/ext2fs.h	/^    u32int  s_first_meta_bg;    \/* First metablock block group *\/$/;"	m	struct:ext2_super_block
s_frags_per_group	fs/ext2fs.h	/^    u32int  s_frags_per_group;  \/* # Fragments per group *\/$/;"	m	struct:ext2_super_block
s_free_blocks_count	fs/ext2fs.h	/^    u32int  s_free_blocks_count;    \/* Free blocks count *\/$/;"	m	struct:ext2_super_block
s_free_inodes_count	fs/ext2fs.h	/^    u32int  s_free_inodes_count;    \/* Free inodes count *\/$/;"	m	struct:ext2_super_block
s_hash_seed	fs/ext2fs.h	/^    u32int   s_hash_seed[4];     \/* HTREE hash seed *\/$/;"	m	struct:ext2_super_block
s_inode_size	fs/ext2fs.h	/^    u16int   s_inode_size;      \/* size of inode structure *\/$/;"	m	struct:ext2_super_block
s_inodes_count	fs/ext2fs.h	/^    u32int  s_inodes_count;     \/* Inodes count *\/$/;"	m	struct:ext2_super_block
s_inodes_per_group	fs/ext2fs.h	/^    u32int  s_inodes_per_group; \/* # Inodes per group *\/$/;"	m	struct:ext2_super_block
s_journal_dev	fs/ext2fs.h	/^    u32int   s_journal_dev;      \/* device number of journal file *\/$/;"	m	struct:ext2_super_block
s_journal_inum	fs/ext2fs.h	/^    u32int   s_journal_inum;     \/* inode number of journal file *\/$/;"	m	struct:ext2_super_block
s_journal_uuid	fs/ext2fs.h	/^    u8int    s_journal_uuid[16]; \/* uuid of journal superblock *\/$/;"	m	struct:ext2_super_block
s_last_mounted	fs/ext2fs.h	/^    char    s_last_mounted[64];     \/* directory where last mounted *\/$/;"	m	struct:ext2_super_block
s_last_orphan	fs/ext2fs.h	/^    u32int   s_last_orphan;      \/* start of list of inodes to delete *\/$/;"	m	struct:ext2_super_block
s_lastcheck	fs/ext2fs.h	/^    u32int  s_lastcheck;        \/* time of last check *\/$/;"	m	struct:ext2_super_block
s_log_block_size	fs/ext2fs.h	/^    u32int  s_log_block_size;   \/* Block size *\/$/;"	m	struct:ext2_super_block
s_log_frag_size	fs/ext2fs.h	/^    u32int  s_log_frag_size;    \/* Fragment size *\/$/;"	m	struct:ext2_super_block
s_magic	fs/ext2fs.h	/^    u16int  s_magic;        \/* Magic signature *\/$/;"	m	struct:ext2_super_block
s_max_mnt_count	fs/ext2fs.h	/^    u16int  s_max_mnt_count;    \/* Maximal mount count *\/$/;"	m	struct:ext2_super_block
s_minor_rev_level	fs/ext2fs.h	/^    u16int  s_minor_rev_level;  \/* minor revision level *\/$/;"	m	struct:ext2_super_block
s_mnt_count	fs/ext2fs.h	/^    u16int  s_mnt_count;        \/* Mount count *\/$/;"	m	struct:ext2_super_block
s_mtime	fs/ext2fs.h	/^    u32int  s_mtime;        \/* Mount time *\/$/;"	m	struct:ext2_super_block
s_padding1	fs/ext2fs.h	/^    u16int   s_padding1;$/;"	m	struct:ext2_super_block
s_prealloc_blocks	fs/ext2fs.h	/^    u8int    s_prealloc_blocks;  \/* Nr of blocks to try to preallocate*\/$/;"	m	struct:ext2_super_block
s_prealloc_dir_blocks	fs/ext2fs.h	/^    u8int    s_prealloc_dir_blocks;  \/* Nr to preallocate for dirs *\/$/;"	m	struct:ext2_super_block
s_r_blocks_count	fs/ext2fs.h	/^    u32int  s_r_blocks_count;   \/* Reserved blocks count *\/$/;"	m	struct:ext2_super_block
s_reserved	fs/ext2fs.h	/^    u32int   s_reserved[190];    \/* Padding to the end of the block *\/$/;"	m	struct:ext2_super_block
s_reserved_char_pad	fs/ext2fs.h	/^    u8int    s_reserved_char_pad;$/;"	m	struct:ext2_super_block
s_reserved_word_pad	fs/ext2fs.h	/^    u16int   s_reserved_word_pad;$/;"	m	struct:ext2_super_block
s_rev_level	fs/ext2fs.h	/^    u32int  s_rev_level;        \/* Revision level *\/$/;"	m	struct:ext2_super_block
s_state	fs/ext2fs.h	/^    u16int  s_state;        \/* File system state *\/$/;"	m	struct:ext2_super_block
s_uuid	fs/ext2fs.h	/^    u8int    s_uuid[16];     \/* 128-bit uuid for volume *\/$/;"	m	struct:ext2_super_block
s_volume_name	fs/ext2fs.h	/^    char    s_volume_name[16];  \/* volume name *\/$/;"	m	struct:ext2_super_block
s_wtime	fs/ext2fs.h	/^    u32int  s_wtime;        \/* Write time *\/$/;"	m	struct:ext2_super_block
sb	fs/ext2fs.c	/^    struct ext2_super_block sb;$/;"	m	struct:__anon21	typeref:struct:__anon21::ext2_super_block	file:
schedule	task.c	/^void schedule()$/;"	f
scr_clear	screen.c	/^void scr_clear()$/;"	f
scr_putch	screen.c	/^void scr_putch(char c)$/;"	f
scr_puthex	screen.c	/^void scr_puthex(u64int i)$/;"	f
scr_putn	screen.c	/^void scr_putn(u64int i)$/;"	f
scr_puts	screen.c	/^void scr_puts(const char *s)$/;"	f
scroll	screen.c	/^void scroll()$/;"	f
section	elfdef.h	/^  Elf32_Section section;	\/* Section header index of section affected,$/;"	m	struct:__anon43
selector	dtable.h	/^    u16int selector;$/;"	m	struct:IDTEntry
setBit	tlsf.c	/^void setBit(u64int *x, u64int i)$/;"	f
setBootInfo	bootinfo.c	/^void setBootInfo(struct BootInfo *bi)$/;"	f
setGDT	dtable.c	/^void setGDT(struct GDTEntry *entry, u32int base, u32int limit, u8int access, u8int granunarity)$/;"	f
setIDT	dtable.c	/^void setIDT(struct IDTEntry *entry, void* offaddr, u16int selector, u8int typeAttr)$/;"	f
setTSS	dtable.c	/^void setTSS(struct GDTEntry *entry, u64int base, u64int limit)$/;"	f
set_bit	fs/ext2fs.c	/^static s32int set_bit(u8int *buf, u32int off)$/;"	f	file:
set_frame	paging.c	/^void set_frame(u32int frame_addr)$/;"	f
sh_addr	elfdef.h	/^  Elf32_Addr	sh_addr;		\/* Section virtual addr at execution *\/$/;"	m	struct:__anon24
sh_addralign	elfdef.h	/^  Elf32_Word	sh_addralign;		\/* Section alignment *\/$/;"	m	struct:__anon24
sh_entsize	elfdef.h	/^  Elf32_Word	sh_entsize;		\/* Entry size if section holds table *\/$/;"	m	struct:__anon24
sh_flags	elfdef.h	/^  Elf32_Word	sh_flags;		\/* Section flags *\/$/;"	m	struct:__anon24
sh_info	elfdef.h	/^  Elf32_Word	sh_info;		\/* Additional section information *\/$/;"	m	struct:__anon24
sh_link	elfdef.h	/^  Elf32_Word	sh_link;		\/* Link to another section *\/$/;"	m	struct:__anon24
sh_name	elfdef.h	/^  Elf32_Word	sh_name;		\/* Section name (string tbl index) *\/$/;"	m	struct:__anon24
sh_offset	elfdef.h	/^  Elf32_Off	sh_offset;		\/* Section file offset *\/$/;"	m	struct:__anon24
sh_size	elfdef.h	/^  Elf32_Word	sh_size;		\/* Section size in bytes *\/$/;"	m	struct:__anon24
sh_type	elfdef.h	/^  Elf32_Word	sh_type;		\/* Section type *\/$/;"	m	struct:__anon24
shndx	multiboot.h	/^    u32int shndx;$/;"	m	struct:multiboot
si_boundto	elfdef.h	/^  Elf32_Half si_boundto;		\/* Direct bindings, symbol bound to *\/$/;"	m	struct:__anon26
si_flags	elfdef.h	/^  Elf32_Half si_flags;			\/* Per symbol flags *\/$/;"	m	struct:__anon26
signature	ide.c	/^    u16int signature;   \/\/ Drive Signature$/;"	m	struct:ide_device	file:
signature	tlsf.h	/^    u64int signature;$/;"	m	struct:TLSFBlock
size	elfdef.h	/^  unsigned char size;		\/* Size of descriptor, including header.  *\/$/;"	m	struct:__anon43
size	file.h	/^    u32int size;$/;"	m	struct:__anon48
size	fs/bootfs.c	/^    char size[12];$/;"	m	struct:TarHeader	file:
size	ide.c	/^    u32int size;        \/\/ size in Sectors.$/;"	m	struct:ide_device	file:
size	module.h	/^    u32int size;$/;"	m	struct:module_struct
size	multiboot.h	/^    u32int size;$/;"	m	struct:multiboot
size	tlsf.h	/^    u64int size;$/;"	m	struct:TLSFBlock
size	vfs.h	/^    u64int size;$/;"	m	struct:DirectoryRecord
size	vfs.h	/^    u64int size;$/;"	m	struct:VNodeInfo
size	vmm.h	/^    u64int size;$/;"	m	struct:VMA
slBitmap	tlsf.h	/^    u64int slBitmap[REAL_FLI];                  \/* i -> 2^(FLI_OFFSET+i) *\/$/;"	m	struct:TLSFHeader
sleep_for_ticks	task2.c	/^void sleep_for_ticks(u32int sleep_ticks)$/;"	f
sleep_on	task2.c	/^void sleep_on(wait_queue_t *wq)$/;"	f
slices	task.h	/^    u64int slices;$/;"	m	struct:Task
slot	pci.h	/^    u32int bus, slot, func;$/;"	m	struct:pci_dev_struct
sprintf	common.c	/^u32int sprintf(char *buf, char *fmt, ...)$/;"	f
sprintf	util.c	/^u64int sprintf(char *buf, char *fmt, ...)$/;"	f
ss	interrupt.h	/^    u64int rip, cs, rflags, rsp, ss;$/;"	m	struct:RegisterState
st_info	elfdef.h	/^  unsigned char	st_info;		\/* Symbol type and binding *\/$/;"	m	struct:__anon25
st_name	elfdef.h	/^  Elf32_Word	st_name;		\/* Symbol name (string tbl index) *\/$/;"	m	struct:__anon25
st_other	elfdef.h	/^  unsigned char	st_other;		\/* Symbol visibility *\/$/;"	m	struct:__anon25
st_shndx	elfdef.h	/^  Elf32_Section	st_shndx;		\/* Section index *\/$/;"	m	struct:__anon25
st_size	elfdef.h	/^  Elf32_Word	st_size;		\/* Symbol size *\/$/;"	m	struct:__anon25
st_value	elfdef.h	/^  Elf32_Addr	st_value;		\/* Symbol value *\/$/;"	m	struct:__anon25
standard_less_than_func	order_array.c	/^s8int standard_less_than_func(type_t a, type_t b)$/;"	f
start	loader32.s	/^start:$/;"	l
start	vm.h	/^    u32int start; \/* page aligned start virtual address. *\/$/;"	m	struct:vma_struct
start	vmm.h	/^    u64int start;$/;"	m	struct:VMA
start64	loader32.s	/^start64:$/;"	l
startIndex	kobject.c	/^            u64int startIndex;$/;"	m	struct:KDirectoryProcessData::__anon50::__anon51	file:
start_blk	disk.h	/^    u32int start_blk;$/;"	m	struct:partition_struct
start_brk	vm.h	/^    u32int start_brk;$/;"	m	struct:vm_struct
start_stack	vm.h	/^    u32int start_stack; \/\/ task's userspace stack, usually 0xd0000000 start_stack > end_stack$/;"	m	struct:vm_struct
startupinfo	loader32.s	/^startupinfo:$/;"	l
stat	vfs.h	/^    s64int (*stat)(struct FileSystem *fs, s64int id, struct VNodeInfo *ni);$/;"	m	struct:FileSystemOperation
state	task.h	/^    u64int state;$/;"	m	struct:Task
state	task2.h	/^    u32int state;$/;"	m	struct:task
stosd	loader32.s	/^stosd$/;"	l
stosq	loader32.s	/^stosq$/;"	l
stra	testmod.c	/^char stra[127];$/;"	v
strbrk	common.c	/^u32int strbrk(char **result, const char *str, const char *delim)$/;"	f
strchr	common.c	/^char *strchr(char *s1, char c)$/;"	f
strchr	util.c	/^char *strchr(const char *s1, char c)$/;"	f
strcmp	common.c	/^s32int strcmp(const char *s1, const char *s2)$/;"	f
strcmp	util.c	/^s64int strcmp(const char *s1, const char *s2)$/;"	f
strcpy	common.c	/^char *strcpy(char *dst, const char *src)$/;"	f
strcpy	util.c	/^char *strcpy(char *dst, const char *src)$/;"	f
strdup	common.c	/^char *strdup(const char *s)$/;"	f
strlen	common.c	/^u32int strlen(const char *s)$/;"	f
strlen	util.c	/^u64int strlen(const char *s)$/;"	f
strrchr	common.c	/^char *strrchr(char *s1, char c)$/;"	f
strrchr	util.c	/^char *strrchr(const char *s1, char c)$/;"	f
strrstr	common.c	/^char *strrstr(char *s1, char *s2)$/;"	f
strrstr	util.c	/^char *strrstr(const char *s1, const char *s2)$/;"	f
strstr	common.c	/^char *strstr(char *s1, char *s2)$/;"	f
strstr	util.c	/^char *strstr(const char *s1, const char *s2)$/;"	f
strtol	util.c	/^s64int strtol(const char *cp,char **endp,u32int base)$/;"	f
strtoul	util.c	/^u64int strtoul(const char *cp,char **endp,u32int base)$/;"	f
subclass	pci.h	/^    u8int revision, prog_if, subclass, class_code;$/;"	m	struct:__anon2
subnodes	file.h	/^    struct vnode_struct **subnodes;$/;"	m	struct:dir_struct	typeref:struct:dir_struct::vnode_struct
subsystem	pci.h	/^            u16int subsystem;$/;"	m	struct:__anon2::__anon3::__anon4
subvendor	pci.h	/^            u16int subvendor;$/;"	m	struct:__anon2::__anon3::__anon4
switch_page_directory	paging.c	/^void switch_page_directory(page_directory_t *dir)$/;"	f
switch_task	task2.c	/^void switch_task()$/;"	f
switch_to_user_mode	task2.c	/^void switch_to_user_mode()$/;"	f
symbol	module.h	/^    symbol_t symbol[MAX_SYMBOLS];$/;"	m	struct:__anon47
symbol_t	module.h	/^} symbol_t;$/;"	t	typeref:struct:__anon46
symtab	module.h	/^    symtab_t *symtab;$/;"	m	struct:module_struct
symtab_t	module.h	/^} symtab_t;$/;"	t	typeref:struct:__anon47
sync	vfs2.h	/^    void (*sync)(fs_t *fs);$/;"	m	struct:VFSOperation
sys_chdir	vfs2.c	/^s32int          sys_chdir   (char *path)$/;"	f
sys_create	vfs2.c	/^s32int          sys_create  (char *path, u32int flags)$/;"	f
sys_execve	task2.c	/^s32int sys_execve(char *path, char **argv, char **envp)$/;"	f
sys_fdclose	file.c	/^s32int sys_fdclose(s32int fd)$/;"	f
sys_fdlseek	file.c	/^s32int sys_fdlseek(s32int fd, s32int offset, u32int whence)$/;"	f
sys_fdopen	file.c	/^s32int sys_fdopen(char *path, u32int flags)$/;"	f
sys_fdread	file.c	/^s32int sys_fdread(s32int fd, void *buf, u32int size)$/;"	f
sys_fdwrite	file.c	/^s32int sys_fdwrite(s32int fd, void *buf, u32int size)$/;"	f
sys_getcwd	vfs2.c	/^s32int          sys_getcwd  (char *buf, u32int size)$/;"	f
sys_getdents	file.c	/^s32int          sys_getdents(u32int fd, u8int *buf, u32int size)$/;"	f
sys_mkdir	vfs2.c	/^s32int          sys_mkdir   (char *path, u32int flags)$/;"	f
sys_mknod	vfs2.c	/^s32int          sys_mknod   (char *path, u32int dev_id, u32int flags)$/;"	f
sys_mmap	task2.c	/^u32int sys_mmap(u32int addr, u32int length, s32int flags,$/;"	f
sys_msleep	task2.c	/^u32int sys_msleep(u32int msec)$/;"	f
sys_rename	vfs2.c	/^s32int          sys_rename  (char *path, char *name)$/;"	f
sys_rm	vfs2.c	/^s32int          sys_rm      (char *path)$/;"	f
sys_rmdir	vfs2.c	/^s32int          sys_rmdir   (char *path)$/;"	f
sys_unmap	task2.c	/^s32int sys_unmap(u32int addr, u32int length)$/;"	f
syscall_handler	syscalls.c	/^void syscall_handler(registers_t *regs)$/;"	f
syscall_mount	vfs2.c	/^void syscall_mount(char *src, char* dst, u32int flags, void *data)$/;"	f
syscalls	syscalls.c	/^void *syscalls[N_SYSCALLS] = {$/;"	v
sz	order_array.h	/^    u32int sz;$/;"	m	struct:__anon58
table_addr	paging.h	/^    u32int table_addr[1024];$/;"	m	struct:__anon57
task	task2.h	/^    task_t *task;$/;"	m	struct:timer_queue_struct
task	task2.h	/^    task_t *task;$/;"	m	struct:wait_queue_node_struct
task	task2.h	/^typedef struct task {$/;"	s
taskQueue	task.c	/^struct Task *taskQueue;$/;"	v	typeref:struct:Task
task_queue	task2.c	/^task_t *task_queue = 0;$/;"	v
task_t	task2.h	/^} task_t;$/;"	t	typeref:struct:task
test_disk	prog/init.c	/^void test_disk()$/;"	f
test_ext2fs	prog/init.c	/^void test_ext2fs()$/;"	f
test_frame	paging.c	/^u32int test_frame(u32int frame_addr)$/;"	f
test_kbd	prog/init.c	/^void test_kbd()$/;"	f
test_ramfs	prog/init.c	/^void test_ramfs()$/;"	f
ticks	task.h	/^    u64int ticks;$/;"	m	struct:Task
ticks	timer.c	/^u32int ticks = 0;$/;"	v
timerHandler	task.c	/^void timerHandler(struct RegisterState *rs)$/;"	f
timer_irq	timer.c	/^void timer_irq(registers_t *regs)$/;"	f
timer_queue	task2.c	/^timer_queue_t *timer_queue = 0;$/;"	v
timer_queue_struct	task2.h	/^typedef struct timer_queue_struct {$/;"	s
timer_queue_t	task2.h	/^} timer_queue_t;$/;"	t	typeref:struct:timer_queue_struct
times	loader32.s	/^times 1024 dq 0$/;"	l
tlsfAlloc	tlsf.c	/^struct TLSFBlock *tlsfAlloc(struct TLSFHeader *tlsf, u64int size)$/;"	f
tlsfAllocMapping	tlsf.c	/^void tlsfAllocMapping(u64int *size, u64int *fl, u64int *sl)$/;"	f
tlsfDump	tlsf.c	/^void tlsfDump(struct TLSFHeader *tlsf)$/;"	f
tlsfFindFreeBlock	tlsf.c	/^struct TLSFBlock *tlsfFindFreeBlock(struct TLSFHeader *tlsf, u64int *fl, u64int *sl)$/;"	f
tlsfFree	tlsf.c	/^void tlsfFree(struct TLSFHeader *tlsf, struct TLSFBlock *blk)$/;"	f
tlsfInitHeap	tlsf.c	/^struct TLSFHeader *tlsfInitHeap(u64int startAddr, u64int size)$/;"	f
tlsfMapping	tlsf.c	/^void tlsfMapping(u64int size, u64int *fl, u64int *sl)$/;"	f
tlsfPrintBlock	tlsf.c	/^void tlsfPrintBlock(struct TLSFBlock *blk)$/;"	f
totalHighMemory	kmm.c	/^u64int totalHighMemory;                     $/;"	v
totalMemory	kmm.c	/^u64int totalMemory() $/;"	f
tss0	dtable.c	/^struct TSS tss0;$/;"	v	typeref:struct:TSS
type	ide.c	/^    u8int type;        \/\/ 0: ATA, 1:ATAPI.$/;"	m	struct:ide_device	file:
type0	pci.h	/^        } type0;$/;"	m	union:__anon2::__anon3	typeref:struct:__anon2::__anon3::__anon4
typeAttr	dtable.h	/^    u8int typeAttr;$/;"	m	struct:IDTEntry
typeAttr	dtable.h	/^    u8int typeAttr;$/;"	m	struct:TSSEntry
type_t	order_array.h	/^typedef void* type_t;$/;"	t
u16int	common.h	/^typedef unsigned short u16int;$/;"	t
u16int	sysdef.h	/^typedef unsigned short  u16int;$/;"	t
u32int	common.h	/^typedef unsigned int   u32int;$/;"	t
u32int	sysdef.h	/^typedef unsigned int    u32int;$/;"	t
u64int	sysdef.h	/^typedef unsigned long   u64int;$/;"	t
u8int	common.h	/^typedef unsigned char  u8int;$/;"	t
u8int	sysdef.h	/^typedef unsigned char   u8int;$/;"	t
udma	ide.c	/^    u16int udma;        \/\/ Active udma mode.$/;"	m	struct:ide_device	file:
uid	fs/bootfs.c	/^    char uid[8];$/;"	m	struct:TarHeader	file:
uid	vfs2.h	/^    u64int uid;     $/;"	m	struct:Vnode
unload_module	module.c	/^void unload_module(module_t *m)$/;"	f
unmapPages	kmm.c	/^void unmapPages(u64int vaddr, u64int n)$/;"	f
unmount	vfs.h	/^    s64int (*unmount)(struct FileSystemDriver *driver, struct FileSystem *fs);$/;"	m	struct:FileSystemDriverOperation
unregisterFileSystemDriver	vfs.c	/^s64int unregisterFileSystemDriver(const char *name)$/;"	f
unregister_fs_driver	vfs2.c	/^void unregister_fs_driver(fs_driver_t *driver)$/;"	f
unregister_pci_driver	pci.c	/^MEXPORT(unregister_pci_driver);$/;"	v
unregister_pci_driver	pci.c	/^void unregister_pci_driver(pci_driver_t *drv)$/;"	f
us	paging.h	/^    u32int us : 1;$/;"	m	struct:__anon55
usedSize	tlsf.h	/^    u64int usedSize;$/;"	m	struct:TLSFHeader
v_ops	vfs2.h	/^    struct vnode_operations *v_ops;$/;"	m	struct:Vnode	typeref:struct:Vnode::vnode_operations
va_arg	common.h	20;"	d
va_arg	util.h	14;"	d
va_end	common.h	21;"	d
va_end	util.h	15;"	d
va_list	common.h	18;"	d
va_list	util.h	12;"	d
va_start	common.h	19;"	d
va_start	util.h	13;"	d
value	module.h	/^    u32int value;$/;"	m	struct:__anon46
vbe_control_info	multiboot.h	/^    u32int vbe_control_info;$/;"	m	struct:multiboot
vbe_interface_len	multiboot.h	/^    u32int vbe_interface_len;    $/;"	m	struct:multiboot
vbe_interface_off	multiboot.h	/^    u32int vbe_interface_off;$/;"	m	struct:multiboot
vbe_interface_seg	multiboot.h	/^    u32int vbe_interface_seg;$/;"	m	struct:multiboot
vbe_mode	multiboot.h	/^    u32int vbe_mode;$/;"	m	struct:multiboot
vbe_mode_info	multiboot.h	/^    u32int vbe_mode_info;$/;"	m	struct:multiboot
vd_aux	elfdef.h	/^  Elf32_Word	vd_aux;			\/* Offset in bytes to verdaux array *\/$/;"	m	struct:__anon32
vd_cnt	elfdef.h	/^  Elf32_Half	vd_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anon32
vd_flags	elfdef.h	/^  Elf32_Half	vd_flags;		\/* Version information *\/$/;"	m	struct:__anon32
vd_hash	elfdef.h	/^  Elf32_Word	vd_hash;		\/* Version name hash value *\/$/;"	m	struct:__anon32
vd_ndx	elfdef.h	/^  Elf32_Half	vd_ndx;			\/* Version Index *\/$/;"	m	struct:__anon32
vd_next	elfdef.h	/^  Elf32_Word	vd_next;		\/* Offset in bytes to next verdef$/;"	m	struct:__anon32
vd_version	elfdef.h	/^  Elf32_Half	vd_version;		\/* Version revision *\/$/;"	m	struct:__anon32
vda_name	elfdef.h	/^  Elf32_Word	vda_name;		\/* Version or dependency names *\/$/;"	m	struct:__anon33
vda_next	elfdef.h	/^  Elf32_Word	vda_next;		\/* Offset in bytes to next verdaux$/;"	m	struct:__anon33
vendor	pci.h	/^    u16int vendor, device;$/;"	m	struct:__anon2
verify_module_header	module.c	/^u32int verify_module_header(Elf32_Ehdr *header) $/;"	f
verify_program_header	task2.c	/^u32int verify_program_header(Elf32_Ehdr *header) $/;"	f
vfsClose	vfs.c	/^s64int vfsClose(struct VNode *node)$/;"	f
vfsCreateDirectory	vfs.c	/^s64int vfsCreateDirectory(const char *path)$/;"	f
vfsMount	vfs.c	/^s64int vfsMount(const char *dest, const char *source, const char *fsType, u64int flags, void *data)$/;"	f
vfsOpen	vfs.c	/^s64int vfsOpen(const char *path, u64int flags, struct VNode *node)$/;"	f
vfsRead	vfs.c	/^s64int vfsRead(struct VNode *node, u64int offset, u64int size, char *buffer)$/;"	f
vfsReadDirectory	vfs.c	/^s64int vfsReadDirectory(struct VNode *node, u64int bufSize, char *buffer)$/;"	f
vfsRemoveDirectory	vfs.c	/^s64int vfsRemoveDirectory(const char *path)$/;"	f
vfsState	vfs.c	/^s64int vfsState(const char *path, struct VNodeInfo *ni)$/;"	f
vfsUnmount	vfs.c	/^s64int vfsUnmount(const char *path)$/;"	f
vfsWrite	vfs.c	/^s64int vfsWrite(struct VNode *node, u64int offset, u64int size, char *buffer)$/;"	f
vfs_abs_path	vfs2.c	/^char* vfs_abs_path(char *p)$/;"	f
vfs_create	vfs2.c	/^s32int          vfs_create  (char *path, u32int flags)$/;"	f
vfs_dump	vfs2.c	/^void vfs_dump(char *path)$/;"	f
vfs_lookup	vfs2.c	/^vnode_t* vfs_lookup(char *path)$/;"	f
vfs_mkdir	vfs2.c	/^s32int          vfs_mkdir   (char *path, u32int flags)$/;"	f
vfs_mknod	vfs2.c	/^s32int          vfs_mknod   (char *path, u32int dev_id, u32int flags)$/;"	f
vfs_mount	vfs2.c	/^s32int vfs_mount(char *path, fs_t *fs)$/;"	f
vfs_mount_root	vfs2.c	/^s32int vfs_mount_root(fs_t *fs)$/;"	f
vfs_mounts	vfs2.c	/^vfsmount_t  *vfs_mounts = 0;$/;"	v
vfs_rename	vfs2.c	/^s32int vfs_rename  (char *path, char *name)$/;"	f
vfs_rm	vfs2.c	/^s32int          vfs_rm      (char *path)$/;"	f
vfs_rmdir	vfs2.c	/^s32int          vfs_rmdir   (char *path)$/;"	f
vfs_root	vfs2.c	/^vnode_t     *vfs_root   = 0;$/;"	v
vfs_subnodes	vfs2.c	/^s32int          vfs_subnodes(char *path, vnode_t ***nodes)$/;"	f
vfsmount_t	vfs2.h	/^} vfsmount_t;$/;"	t	typeref:struct:__anon6
video_addr	screen.c	/^u16int *video_addr = (u16int *)0xb8000;$/;"	v
vm	task.h	/^    struct VM *vm;$/;"	m	struct:Task	typeref:struct:Task::VM
vm	task2.h	/^    vm_t *vm;$/;"	m	struct:task
vm	vm.h	/^    struct vm_struct *vm;$/;"	m	struct:vma_struct	typeref:struct:vma_struct::vm_struct
vmAddArea	vmm.c	/^s64int vmAddArea(struct VM *vm, u64int start, u64int size, u64int flags)$/;"	f
vmCopy	vmm.c	/^struct VM *vmCopy(struct VM *oldVM, u64int flags)$/;"	f
vmCreate	vmm.c	/^struct VM *vmCreate()$/;"	f
vmDestroy	vmm.c	/^s64int vmDestroy(struct VM *vm)$/;"	f
vmDump	vmm.c	/^void vmDump(struct VM *vm)$/;"	f
vmQueryArea	vmm.c	/^struct VMA *vmQueryArea(struct VM *vm, u64int addr)$/;"	f
vmRemoveArea	vmm.c	/^s64int vmRemoveArea(struct VM *vm,struct VMA *vma)$/;"	f
vm_struct	vm.h	/^typedef struct vm_struct {$/;"	s
vm_t	vm.h	/^} vm_t;$/;"	t	typeref:struct:vm_struct
vmaCopy	vmm.c	/^struct VMA *vmaCopy(struct VMA *oldVMA, struct PML4E *pml4e, u64int flags)$/;"	f
vmaCreate	vmm.c	/^struct VMA *vmaCreate(u64int start, u64int size, u64int flags)$/;"	f
vmaDump	vmm.c	/^void vmaDump(struct VMA *vma)$/;"	f
vmaHead	vmm.h	/^    struct VMA *vmaHead;$/;"	m	struct:VM	typeref:struct:VM::VMA
vma_freepages	vm.c	/^void vma_freepages(vma_t *vma)$/;"	f
vma_nopage	vm.c	/^void vma_nopage(vma_t *vma, u32int vaddr)$/;"	f
vma_struct	vm.h	/^typedef struct vma_struct {$/;"	s
vma_t	vm.h	/^} vma_t;$/;"	t	typeref:struct:vma_struct
vma_write	vm.c	/^void vma_write(vma_t *vma, u32int vaddr, u32int size)$/;"	f
vmas	vm.h	/^    vma_t *vmas;$/;"	m	struct:vm_struct
vn_aux	elfdef.h	/^  Elf32_Word	vn_aux;			\/* Offset in bytes to vernaux array *\/$/;"	m	struct:__anon34
vn_cnt	elfdef.h	/^  Elf32_Half	vn_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anon34
vn_file	elfdef.h	/^  Elf32_Word	vn_file;		\/* Offset of filename for this$/;"	m	struct:__anon34
vn_next	elfdef.h	/^  Elf32_Word	vn_next;		\/* Offset in bytes to next verneed$/;"	m	struct:__anon34
vn_version	elfdef.h	/^  Elf32_Half	vn_version;		\/* Version of structure *\/$/;"	m	struct:__anon34
vna_flags	elfdef.h	/^  Elf32_Half	vna_flags;		\/* Dependency specific information *\/$/;"	m	struct:__anon35
vna_hash	elfdef.h	/^  Elf32_Word	vna_hash;		\/* Hash value of dependency name *\/$/;"	m	struct:__anon35
vna_name	elfdef.h	/^  Elf32_Word	vna_name;		\/* Dependency name string offset *\/$/;"	m	struct:__anon35
vna_next	elfdef.h	/^  Elf32_Word	vna_next;		\/* Offset in bytes to next vernaux$/;"	m	struct:__anon35
vna_other	elfdef.h	/^  Elf32_Half	vna_other;		\/* Unused *\/$/;"	m	struct:__anon35
vnode	file.h	/^    struct vnode_struct *vnode;$/;"	m	struct:file_struct	typeref:struct:file_struct::vnode_struct
vnode_list_struct	vfs2.h	/^typedef struct vnode_list_struct {$/;"	s
vnode_list_t	vfs2.h	/^} vnode_list_t;$/;"	t	typeref:struct:vnode_list_struct
vsprintf	util.c	/^u64int vsprintf(char *buf, char *fmt, va_list ap)$/;"	f
wait_queue_node_struct	task2.h	/^typedef struct wait_queue_node_struct {$/;"	s
wait_queue_node_t	task2.h	/^} wait_queue_node_t;$/;"	t	typeref:struct:wait_queue_node_struct
wait_queue_t	task2.h	/^} wait_queue_t;$/;"	t	typeref:struct:__anon1
wake_up_all	task2.c	/^void wake_up_all(wait_queue_t *wq)$/;"	f
wake_up_one	task2.c	/^void wake_up_one(wait_queue_t *wq)$/;"	f
work_path	task2.h	/^    char *work_path;$/;"	m	struct:task
wq	i8042.c	/^wait_queue_t *wq = 0;$/;"	v
wq	ide.c	/^wait_queue_t wq = {0};$/;"	v
write	vfs.h	/^    s64int (*write)(struct FileSystem *fs, s64int id, u64int offset, u64int size, char *buffer);$/;"	m	struct:FileSystemOperation
write	vfs2.h	/^    s64int   (*write)   (file_t *f, u64int offset, u64int sz, u8int *buffer);$/;"	m	struct:VnodeOperations
write_blks	disk.h	/^    u32int (*write_blks)(disk_t *disk, u32int start_blk, u32int nr_blks, u8int *buf);$/;"	m	struct:disk_struct
write_pci_config_byte	pci.c	/^MEXPORT(write_pci_config_byte);$/;"	v
write_pci_config_byte	pci.c	/^void write_pci_config_byte(u32int bus, u32int slot, u32int func, u32int off, u8int data)$/;"	f
write_pci_config_dword	pci.c	/^MEXPORT(write_pci_config_dword);$/;"	v
write_pci_config_dword	pci.c	/^void write_pci_config_dword(u32int bus, u32int slot, u32int func, u32int off, u32int data)$/;"	f
write_pci_config_word	pci.c	/^MEXPORT(write_pci_config_word);$/;"	v
write_pci_config_word	pci.c	/^void write_pci_config_word(u32int bus, u32int slot, u32int func, u32int off, u16int data)$/;"	f
write_pci_dev_config_byte	pci.c	/^MEXPORT(write_pci_dev_config_byte);$/;"	v
write_pci_dev_config_byte	pci.c	/^void write_pci_dev_config_byte(pci_dev_t *dev, u32int off, u8int data)$/;"	f
write_pci_dev_config_dword	pci.c	/^MEXPORT(write_pci_dev_config_dword);$/;"	v
write_pci_dev_config_dword	pci.c	/^void write_pci_dev_config_dword(pci_dev_t *dev, u32int off, u32int data)$/;"	f
write_pci_dev_config_word	pci.c	/^MEXPORT(write_pci_dev_config_word);$/;"	v
write_pci_dev_config_word	pci.c	/^void write_pci_dev_config_word(pci_dev_t *dev, u32int off, u16int data)$/;"	f
wrmsr	loader32.s	/^wrmsr                        ; Write to the model-specific register.$/;"	l
xor	loader32.s	/^xor eax, eax       ; Nullify the A-register.$/;"	l
xor	loader32.s	/^xor rsi, rsi$/;"	l
zero	dtable.h	/^    u8int zero;$/;"	m	struct:IDTEntry
